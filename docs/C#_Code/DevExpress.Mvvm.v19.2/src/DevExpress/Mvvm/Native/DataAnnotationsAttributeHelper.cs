namespace DevExpress.Mvvm.Native
{
    using DevExpress.Mvvm.DataAnnotations;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using System.Security;

    [SecuritySafeCritical]
    public static class DataAnnotationsAttributeHelper
    {
        internal static TBuilder AutoGeneratedCore<TBuilder>(TBuilder builder, bool autoGenerate) where TBuilder: IAttributeBuilderInternal<TBuilder> => 
            builder.AddOrModifyAttribute<DisplayAttribute>(delegate (DisplayAttribute x) {
                x.AutoGenerateField = autoGenerate;
            });

        internal static TBuilder DescriptionCore<TBuilder>(TBuilder builder, string description) where TBuilder: IAttributeBuilderInternal<TBuilder> => 
            builder.AddOrModifyAttribute<DisplayAttribute>(delegate (DisplayAttribute x) {
                x.Description = description;
            });

        internal static TBuilder DisplayNameCore<TBuilder>(TBuilder builder, string name) where TBuilder: IAttributeBuilderInternal<TBuilder> => 
            builder.AddOrModifyAttribute<DisplayAttribute>(delegate (DisplayAttribute x) {
                x.Name = name;
            });

        internal static TBuilder DisplayShortNameCore<TBuilder>(TBuilder builder, string shortName) where TBuilder: IAttributeBuilderInternal<TBuilder> => 
            builder.AddOrModifyAttribute<DisplayAttribute>(delegate (DisplayAttribute x) {
                x.ShortName = shortName;
            });

        internal static TBuilder DoNotScaffoldCore<TBuilder>(TBuilder builder) where TBuilder: IAttributeBuilderInternal<TBuilder> => 
            builder.AddOrReplaceAttribute<ScaffoldColumnAttribute>(new ScaffoldColumnAttribute(false));

        internal static TBuilder DoNotScaffoldDetailCollectionCore<TBuilder>(TBuilder builder) where TBuilder: IAttributeBuilderInternal<TBuilder> => 
            builder.AddOrReplaceAttribute<ScaffoldDetailCollectionAttribute>(new ScaffoldDetailCollectionAttribute(false));

        public static PropertyDataType FromDataType(DataType dataType)
        {
            switch (dataType)
            {
                case DataType.DateTime:
                    return PropertyDataType.DateTime;

                case DataType.Date:
                    return PropertyDataType.Date;

                case DataType.Time:
                    return PropertyDataType.Time;

                case DataType.PhoneNumber:
                    return PropertyDataType.PhoneNumber;

                case DataType.Currency:
                    return PropertyDataType.Currency;

                case DataType.MultilineText:
                    return PropertyDataType.MultilineText;

                case DataType.Password:
                    return PropertyDataType.Password;

                case DataType.Url:
                    return PropertyDataType.Url;

                case DataType.ImageUrl:
                    return PropertyDataType.ImageUrl;
            }
            return PropertyDataType.Custom;
        }

        public static bool GetAutoGenerateField(FieldInfo field)
        {
            Func<DisplayAttribute, bool> evaluator = <>c.<>9__16_0;
            if (<>c.<>9__16_0 == null)
            {
                Func<DisplayAttribute, bool> local1 = <>c.<>9__16_0;
                evaluator = <>c.<>9__16_0 = x => x.GetAutoGenerateField().GetValueOrDefault(true);
            }
            return GetFieldDisplayAttribute(field).Return<DisplayAttribute, bool>(evaluator, (<>c.<>9__16_1 ??= () => true));
        }

        internal static LambdaExpression GetDisplayAttributeCreateExpression() => 
            Expression.Lambda<Func<DisplayAttribute>>(Expression.New(typeof(DisplayAttribute)), new ParameterExpression[0]);

        internal static IEnumerable<Tuple<PropertyInfo, object>> GetDisplayAttributePropertyValuePairs(Attribute attributeBase)
        {
            ParameterExpression expression;
            DisplayAttribute attribute = (DisplayAttribute) attributeBase;
            List<Tuple<PropertyInfo, object>> list = new List<Tuple<PropertyInfo, object>>();
            if (attribute.GetOrder() != null)
            {
                expression = Expression.Parameter(typeof(DisplayAttribute), "x");
                ParameterExpression[] expressionArray1 = new ParameterExpression[] { expression };
                list.Add(GetPropertyValuePair<DisplayAttribute, int>(attribute, Expression.Lambda<Func<DisplayAttribute, int>>(Expression.Property(expression, (MethodInfo) methodof(DisplayAttribute.get_Order)), expressionArray1)));
            }
            if (attribute.GetAutoGenerateField() != null)
            {
                expression = Expression.Parameter(typeof(DisplayAttribute), "x");
                ParameterExpression[] expressionArray2 = new ParameterExpression[] { expression };
                list.Add(GetPropertyValuePair<DisplayAttribute, bool>(attribute, Expression.Lambda<Func<DisplayAttribute, bool>>(Expression.Property(expression, (MethodInfo) methodof(DisplayAttribute.get_AutoGenerateField)), expressionArray2)));
            }
            expression = Expression.Parameter(typeof(DisplayAttribute), "x");
            ParameterExpression[] parameters = new ParameterExpression[] { expression };
            list.Add(GetPropertyValuePair<DisplayAttribute, string>(attribute, Expression.Lambda<Func<DisplayAttribute, string>>(Expression.Property(expression, (MethodInfo) methodof(DisplayAttribute.get_Name)), parameters)));
            expression = Expression.Parameter(typeof(DisplayAttribute), "x");
            ParameterExpression[] expressionArray4 = new ParameterExpression[] { expression };
            list.Add(GetPropertyValuePair<DisplayAttribute, string>(attribute, Expression.Lambda<Func<DisplayAttribute, string>>(Expression.Property(expression, (MethodInfo) methodof(DisplayAttribute.get_ShortName)), expressionArray4)));
            expression = Expression.Parameter(typeof(DisplayAttribute), "x");
            ParameterExpression[] expressionArray5 = new ParameterExpression[] { expression };
            list.Add(GetPropertyValuePair<DisplayAttribute, string>(attribute, Expression.Lambda<Func<DisplayAttribute, string>>(Expression.Property(expression, (MethodInfo) methodof(DisplayAttribute.get_Description)), expressionArray5)));
            return list;
        }

        internal static Type GetDisplayAttributeType() => 
            typeof(DisplayAttribute);

        internal static string GetDisplayName(IEnumerable<Attribute> attributes)
        {
            Func<DisplayAttribute, string> evaluator = <>c.<>9__9_0;
            if (<>c.<>9__9_0 == null)
            {
                Func<DisplayAttribute, string> local1 = <>c.<>9__9_0;
                evaluator = <>c.<>9__9_0 = x => x.GetName() ?? x.GetShortName();
            }
            return attributes.OfType<DisplayAttribute>().FirstOrDefault<DisplayAttribute>().Return<DisplayAttribute, string>(evaluator, () => GetDisplayNameFromDisplayNameAttribute(attributes));
        }

        private static string GetDisplayNameFromDisplayNameAttribute(IEnumerable<Attribute> attributes)
        {
            Func<DisplayNameAttribute, string> evaluator = <>c.<>9__10_0;
            if (<>c.<>9__10_0 == null)
            {
                Func<DisplayNameAttribute, string> local1 = <>c.<>9__10_0;
                evaluator = <>c.<>9__10_0 = y => y.DisplayName;
            }
            return attributes.OfType<DisplayNameAttribute>().FirstOrDefault<DisplayNameAttribute>().With<DisplayNameAttribute, string>(evaluator);
        }

        public static string GetFieldDescription(FieldInfo field)
        {
            Func<DisplayAttribute, string> evaluator = <>c.<>9__18_0;
            if (<>c.<>9__18_0 == null)
            {
                Func<DisplayAttribute, string> local1 = <>c.<>9__18_0;
                evaluator = <>c.<>9__18_0 = x => x.GetDescription();
            }
            return GetFieldDisplayAttribute(field).With<DisplayAttribute, string>(evaluator);
        }

        private static DisplayAttribute GetFieldDisplayAttribute(FieldInfo field) => 
            MetadataHelper.GetAttribute<DisplayAttribute>(field, false);

        public static string GetFieldDisplayName(FieldInfo field)
        {
            Func<DisplayAttribute, string> evaluator = <>c.<>9__17_0;
            if (<>c.<>9__17_0 == null)
            {
                Func<DisplayAttribute, string> local1 = <>c.<>9__17_0;
                evaluator = <>c.<>9__17_0 = x => x.GetName() ?? x.GetShortName();
            }
            return GetFieldDisplayAttribute(field).With<DisplayAttribute, string>(evaluator);
        }

        public static int? GetFieldOrder(FieldInfo field)
        {
            if (GetFieldDisplayAttribute(field) != null)
            {
                return GetFieldDisplayAttribute(field).GetOrder();
            }
            return null;
        }

        internal static Tuple<PropertyInfo, object> GetPropertyValuePair<TAttribute, TProperty>(TAttribute attribute, Expression<Func<TAttribute, TProperty>> propertyExpression)
        {
            PropertyInfo argumentPropertyStrict = ExpressionHelper.GetArgumentPropertyStrict<TAttribute, TProperty>(propertyExpression);
            return new Tuple<PropertyInfo, object>(argumentPropertyStrict, argumentPropertyStrict.GetValue(attribute, null));
        }

        internal static IEnumerable<object> GetScaffoldColumnAttributeConstructorParameters(Attribute attribute) => 
            new object[] { ((ScaffoldColumnAttribute) attribute).Scaffold };

        internal static LambdaExpression GetScaffoldColumnAttributeCreateExpression()
        {
            Expression[] expressionArray1 = new Expression[] { Expression.Constant(false, typeof(bool)) };
            return Expression.Lambda<Func<ScaffoldColumnAttribute>>(Expression.New((ConstructorInfo) methodof(ScaffoldColumnAttribute..ctor), (IEnumerable<Expression>) expressionArray1), new ParameterExpression[0]);
        }

        internal static Type GetScaffoldColumnAttributeType() => 
            typeof(ScaffoldColumnAttribute);

        internal static bool HasRequiredAttribute(MemberInfo member) => 
            MetadataHelper.GetAttribute<RequiredAttribute>(member, false) != null;

        internal static TBuilder SetConvertEmptyStringToNull<TBuilder>(TBuilder builder, bool convert) where TBuilder: IAttributeBuilderInternal<TBuilder> => 
            builder.AddOrModifyAttribute<DisplayFormatAttribute>(delegate (DisplayFormatAttribute x) {
                x.ConvertEmptyStringToNull = convert;
            });

        internal static TBuilder SetDataFormatString<TBuilder>(TBuilder builder, string dataFormatString, bool applyDisplayFormatInEditMode) where TBuilder: IAttributeBuilderInternal<TBuilder> => 
            builder.AddOrModifyAttribute<DisplayFormatAttribute>(delegate (DisplayFormatAttribute x) {
                x.DataFormatString = dataFormatString;
                x.ApplyFormatInEditMode = applyDisplayFormatInEditMode;
            });

        internal static TBuilder SetDataTypeCore<TBuilder>(TBuilder builder, PropertyDataType dataType) where TBuilder: IAttributeBuilderInternal<TBuilder> => 
            builder.AddOrReplaceAttribute<DataTypeAttribute>(new DataTypeAttribute(ToDataType(dataType)));

        internal static TBuilder SetEnumDataTypeCore<TBuilder>(TBuilder builder, Type enumDataType) where TBuilder: IAttributeBuilderInternal<TBuilder> => 
            builder.AddOrReplaceAttribute<EnumDataTypeAttribute>(new EnumDataTypeAttribute(enumDataType));

        internal static TBuilder SetNotEditable<TBuilder>(TBuilder builder) where TBuilder: IAttributeBuilderInternal<TBuilder> => 
            builder.AddOrReplaceAttribute<EditableAttribute>(new EditableAttribute(false));

        internal static TBuilder SetNullDisplayText<TBuilder>(TBuilder builder, string nullDisplayText) where TBuilder: IAttributeBuilderInternal<TBuilder> => 
            builder.AddOrModifyAttribute<DisplayFormatAttribute>(delegate (DisplayFormatAttribute x) {
                x.NullDisplayText = nullDisplayText;
            });

        internal static TBuilder SetOrderCore<TBuilder>(TBuilder builder, int order) where TBuilder: IAttributeBuilderInternal<TBuilder> => 
            builder.AddOrModifyAttribute<DisplayAttribute>(delegate (DisplayAttribute x) {
                x.Order = order;
            });

        internal static TBuilder SetReadonly<TBuilder>(TBuilder builder) where TBuilder: IAttributeBuilderInternal<TBuilder> => 
            builder.AddOrReplaceAttribute<ReadOnlyAttribute>(new ReadOnlyAttribute(true));

        private static DataType ToDataType(PropertyDataType dataType)
        {
            switch (dataType)
            {
                case PropertyDataType.Currency:
                    return DataType.Currency;

                case PropertyDataType.Password:
                    return DataType.Password;

                case PropertyDataType.MultilineText:
                    return DataType.MultilineText;

                case PropertyDataType.PhoneNumber:
                    return DataType.PhoneNumber;

                case PropertyDataType.ImageUrl:
                    return DataType.ImageUrl;

                case PropertyDataType.DateTime:
                    return DataType.DateTime;

                case PropertyDataType.Date:
                    return DataType.Date;

                case PropertyDataType.Time:
                    return DataType.Time;
            }
            return DataType.Custom;
        }

        [Serializable, CompilerGenerated]
        private sealed class <>c
        {
            public static readonly DataAnnotationsAttributeHelper.<>c <>9 = new DataAnnotationsAttributeHelper.<>c();
            public static Func<DisplayAttribute, string> <>9__9_0;
            public static Func<DisplayNameAttribute, string> <>9__10_0;
            public static Func<DisplayAttribute, bool> <>9__16_0;
            public static Func<bool> <>9__16_1;
            public static Func<DisplayAttribute, string> <>9__17_0;
            public static Func<DisplayAttribute, string> <>9__18_0;

            internal bool <GetAutoGenerateField>b__16_0(DisplayAttribute x) => 
                x.GetAutoGenerateField().GetValueOrDefault(true);

            internal bool <GetAutoGenerateField>b__16_1() => 
                true;

            internal string <GetDisplayName>b__9_0(DisplayAttribute x) => 
                x.GetName() ?? x.GetShortName();

            internal string <GetDisplayNameFromDisplayNameAttribute>b__10_0(DisplayNameAttribute y) => 
                y.DisplayName;

            internal string <GetFieldDescription>b__18_0(DisplayAttribute x) => 
                x.GetDescription();

            internal string <GetFieldDisplayName>b__17_0(DisplayAttribute x) => 
                x.GetName() ?? x.GetShortName();
        }
    }
}

