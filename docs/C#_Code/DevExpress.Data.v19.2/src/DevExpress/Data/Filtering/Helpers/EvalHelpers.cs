namespace DevExpress.Data.Filtering.Helpers
{
    using DevExpress.Data.Filtering;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq.Expressions;
    using System.Runtime.CompilerServices;
    using System.Text;

    public static class EvalHelpers
    {
        private static readonly Dictionary<TypeCode, Dictionary<TypeCode, TypeCode>> BinaryNumericPromotions;
        private static HashSet<FunctionOperatorType> advancedOutlookIntervalFunctions;
        private static readonly Type stringType;
        private static Random random;

        static EvalHelpers();
        public static string CaseInsensitiveReplaceBody(string sourceString, string oldValue, string newValue, CompareInfo compareInfo);
        public static int CompareObjects(object left, object right, bool isEqualityCompare, bool caseSensitive, IComparer customComparer);
        private static object ConvertValue(object val, Type valType, Type type);
        public static object DoCustomAggregate<T>(ICustomAggregate customAggregate, IEnumerable<T> collection, Func<T, object>[] operandSelectors);
        public static object DoObjectsBitwiseAnd(object left, object right);
        public static object DoObjectsBitwiseOr(object left, object right);
        public static object DoObjectsBitwiseXor(object left, object right);
        public static object DoObjectsDivide(object left, object right);
        public static object DoObjectsMinus(object left, object right);
        public static object DoObjectsMinusChecked(object left, object right);
        public static object DoObjectsModulo(object left, object right);
        public static object DoObjectsMultiply(object left, object right);
        public static object DoObjectsMultiplyChecked(object left, object right);
        public static object DoObjectsPlus(object left, object right);
        public static object DoObjectsPlusChecked(object left, object right);
        public static DateTime EvaluateLocalDateTime(FunctionOperatorType type);
        public static CriteriaOperator ExpandIsOutlookInterval(FunctionOperator theOperator);
        private static object FnAbsObject(object op);
        private static object FnCeilingObject(object op);
        private static bool? FnContainsCaseInsensitive(string str1, string str2);
        private static bool? FnContainsCaseSensitive(string str1, string str2);
        private static int FnDiffDay(DateTime op1, DateTime op2);
        private static int FnDiffHour(DateTime op1, DateTime op2);
        private static int FnDiffMilliSecond(DateTime op1, DateTime op2);
        private static int FnDiffMinute(DateTime op1, DateTime op2);
        private static int FnDiffMonth(DateTime op1, DateTime op2);
        private static int FnDiffSecond(DateTime op1, DateTime op2);
        private static int FnDiffYear(DateTime op1, DateTime op2);
        private static bool? FnEndsWithCaseInsensitive(string str1, string str2);
        private static bool? FnEndsWithCaseSensitive(string str1, string str2);
        private static object FnFloorObject(object op);
        private static DateTime FnLocalDateTimeDayAfterTomorrow();
        private static DateTime FnLocalDateTimeLastMonth();
        private static DateTime FnLocalDateTimeLastWeek();
        private static DateTime FnLocalDateTimeLastYear();
        private static DateTime FnLocalDateTimeNextMonth();
        private static DateTime FnLocalDateTimeNextWeek();
        private static DateTime FnLocalDateTimeNextYear();
        private static DateTime FnLocalDateTimeNow();
        private static DateTime FnLocalDateTimeThisMonth();
        private static DateTime FnLocalDateTimeThisWeek();
        private static DateTime FnLocalDateTimeThisYear();
        private static DateTime FnLocalDateTimeToday();
        private static DateTime FnLocalDateTimeTomorrow();
        private static DateTime FnLocalDateTimeTwoMonthsAway();
        private static DateTime FnLocalDateTimeTwoWeeksAway();
        private static DateTime FnLocalDateTimeTwoYearsAway();
        private static DateTime FnLocalDateTimeYearBeforeToday();
        private static DateTime FnLocalDateTimeYesterday();
        private static object FnMinMaxObjectCore(object a, object b, bool isMin, bool isCaseSensitive);
        private static string FnReverse(string str);
        private static double FnRnd();
        private static object FnRoundObject(object op, int? precision);
        private static int? FnSignObject(object op);
        private static bool? FnStartsWithCaseInsensitive(string str1, string str2);
        private static bool? FnStartsWithCaseSensitive(string str1, string str2);
        internal static IEnumerable<FunctionOperatorType> GetAdvancedOutlookIntervalFunctions();
        private static TypeCode GetBinaryNumericPromotionCode(object left, object right, BinaryOperatorType exceptionType);
        public static TypeCode GetBinaryNumericPromotionCode(Type left, Type right, BinaryOperatorType exceptionType, bool raiseException);
        public static TypeCode GetBinaryNumericPromotionCode(Type left, Type right, string operatorName, string operatorTypeName, bool raiseException);
        public static Type GetBinaryNumericPromotionType(Type leftType, Type rightType);
        public static DateTime GetWeekStart(DateTime now);
        public static DateTime GetWeekStart(DateTime now, DateTimeFormatInfo dtfi);
        public static bool IsAdvancedOutlookInterval(FunctionOperatorType functionOperatorType);
        public static bool IsDateTime(FunctionOperatorType type);
        public static bool IsLocalDateTime(FunctionOperatorType type);
        public static bool IsOutlookInterval(FunctionOperatorType functionOperatorType);
        public static LambdaExpression MakeFnLambda(FunctionOperatorType functionOperatorType, Type[] invokeTypes, bool captureContext, bool caseSensitive, bool is3ValuedLogic);
        private static Expression MakeIsNotNull(Expression expr);
        private static Expression MakeIsNull(Expression expr);
        private static CriteriaOperator MakeIsSameDayCriteria(FunctionOperator theOperator);
        private static CriteriaOperator MakeIsSameDayInterval(CriteriaOperator op, DateTime lowerBound, DateTime upperBound);
        private static LambdaExpression MakeLambdaFromSimpleFunc<T>(Func<T> baseLambda, Type[] invokeTypes);
        private static LambdaExpression MakeLambdaFromSimpleFunc<X, T>(Func<X, T> baseLambda, Type[] invokeTypes);
        private static LambdaExpression MakeLambdaFromSimpleFunc<X, Y, T>(Func<X, Y, T> baseLambda, Type[] invokeTypes);
        private static LambdaExpression MakeLambdaFromSimpleFunc<X, Y, Z, T>(Func<X, Y, Z, T> baseLambda, Type[] invokeTypes);
        private static LambdaExpression MakeLambdaFromSimpleFunc<W, X, Y, Z, T>(Func<W, X, Y, Z, T> baseLambda, Type[] invokeTypes);
        private static LambdaExpression MakeLambdaFromSimpleFuncCore(Delegate baseFunc, Type[] invokeTypes);
        private static LambdaExpression MakeMinMax(Type[] invokeTypes, bool isMin, bool captureContext, bool caseSensitive);
        private static BinaryOperator MakeMonthCriteria(CriteriaOperator op, int month);
        private static CriteriaOperator MakeTypicalOutlookInterval(CriteriaOperator op, FunctionOperatorType lowerBound, FunctionOperatorType upperBound);
        private static void PopulateAdvancedOutlookIntervalFunctions();
        private static Expression SafeObjectToType(Expression arg, Type destinationType);
        public static Expression SafeToString(Expression e);

        [Serializable, CompilerGenerated]
        private sealed class <>c
        {
            public static readonly EvalHelpers.<>c <>9;
            public static Func<Type, bool> <>9__67_0;
            public static Func<Type, bool> <>9__67_3;
            public static Func<string, bool> <>9__81_0;
            public static Func<string, string> <>9__81_1;
            public static Func<string, int?> <>9__81_2;
            public static Func<string, int?, string> <>9__81_3;
            public static Func<string, int?, int?, string> <>9__81_4;
            public static Func<string, string> <>9__81_5;
            public static Func<string, string> <>9__81_6;
            public static Func<string, int?> <>9__81_7;
            public static Func<long?, string> <>9__81_8;
            public static Func<string, string> <>9__81_9;
            public static Func<string, string, string, string> <>9__81_10;
            public static Func<string, string, string, string> <>9__81_12;
            public static Func<string, string> <>9__81_13;
            public static Func<string, int?, string, string> <>9__81_14;
            public static Func<string, string, int?> <>9__81_21;
            public static Func<string, string, int?, int?> <>9__81_22;
            public static Func<string, string, int?, int?, int?> <>9__81_23;
            public static Func<string, string, int?> <>9__81_24;
            public static Func<string, string, int?, int?> <>9__81_25;
            public static Func<string, string, int?, int?, int?> <>9__81_26;
            public static Func<string, int?, string> <>9__81_27;
            public static Func<string, int?, int?, string> <>9__81_28;
            public static Func<object, object> <>9__81_29;
            public static Func<decimal, decimal> <>9__81_30;
            public static Func<double, double> <>9__81_31;
            public static Func<short, short> <>9__81_32;
            public static Func<int, int> <>9__81_33;
            public static Func<long, long> <>9__81_34;
            public static Func<sbyte, sbyte> <>9__81_35;
            public static Func<float, float> <>9__81_36;
            public static Func<double, double> <>9__81_37;
            public static Func<double, double> <>9__81_38;
            public static Func<double, double> <>9__81_39;
            public static Func<double, double> <>9__81_40;
            public static Func<double, double> <>9__81_41;
            public static Func<double, double> <>9__81_42;
            public static Func<double, double> <>9__81_43;
            public static Func<double, double, double> <>9__81_44;
            public static Func<double> <>9__81_45;
            public static Func<double, double> <>9__81_46;
            public static Func<double, double, double> <>9__81_47;
            public static Func<object, int?> <>9__81_48;
            public static Func<byte, int> <>9__81_49;
            public static Func<char, int> <>9__81_50;
            public static Func<decimal, int> <>9__81_51;
            public static Func<double, int> <>9__81_52;
            public static Func<short, int> <>9__81_53;
            public static Func<long, int> <>9__81_54;
            public static Func<sbyte, int> <>9__81_55;
            public static Func<float, int> <>9__81_56;
            public static Func<ushort, int> <>9__81_57;
            public static Func<uint, int> <>9__81_58;
            public static Func<ulong, int> <>9__81_59;
            public static Func<int, int> <>9__81_60;
            public static Func<object, int?, object> <>9__81_61;
            public static Func<decimal, int?, decimal> <>9__81_62;
            public static Func<double, int?, double> <>9__81_63;
            public static Func<object, object> <>9__81_64;
            public static Func<decimal, decimal> <>9__81_65;
            public static Func<decimal, int?, decimal> <>9__81_66;
            public static Func<double, double> <>9__81_67;
            public static Func<object, object> <>9__81_68;
            public static Func<decimal, decimal> <>9__81_69;
            public static Func<decimal, int?, decimal> <>9__81_70;
            public static Func<double, double> <>9__81_71;
            public static Func<double, double> <>9__81_72;
            public static Func<double, double> <>9__81_73;
            public static Func<double, double, double> <>9__81_74;
            public static Func<long, long, long> <>9__81_75;
            public static Func<double, double> <>9__81_76;
            public static Func<double, double> <>9__81_77;
            public static Func<double, double> <>9__81_78;
            public static Func<double, double> <>9__81_79;
            public static Func<string, int?, string> <>9__81_80;
            public static Func<string, int?, string, string> <>9__81_81;
            public static Func<string, int?, string> <>9__81_82;
            public static Func<string, int?, string, string> <>9__81_83;
            public static Func<string, string, bool> <>9__81_84;
            public static Func<string, string, bool> <>9__81_85;
            public static Func<string, string, bool> <>9__81_86;
            public static Func<string, string, bool> <>9__81_87;
            public static Func<string, string, bool> <>9__81_88;
            public static Func<string, string, bool> <>9__81_89;
            public static Func<object, int?> <>9__81_90;
            public static Func<object, long?> <>9__81_91;
            public static Func<object, float?> <>9__81_92;
            public static Func<object, double?> <>9__81_93;
            public static Func<object, decimal?> <>9__81_94;
            public static Func<DateTime> <>9__81_95;
            public static Func<DateTime> <>9__81_96;
            public static Func<DateTime> <>9__81_97;
            public static Func<DateTime> <>9__81_98;
            public static Func<DateTime> <>9__81_99;
            public static Func<DateTime> <>9__81_100;
            public static Func<DateTime> <>9__81_101;
            public static Func<DateTime> <>9__81_102;
            public static Func<DateTime> <>9__81_103;
            public static Func<DateTime> <>9__81_104;
            public static Func<DateTime> <>9__81_105;
            public static Func<DateTime> <>9__81_106;
            public static Func<DateTime> <>9__81_107;
            public static Func<DateTime> <>9__81_108;
            public static Func<DateTime> <>9__81_109;
            public static Func<DateTime> <>9__81_110;
            public static Func<DateTime> <>9__81_111;
            public static Func<DateTime> <>9__81_112;
            public static Func<DateTime, bool> <>9__81_113;
            public static Func<DateTime, bool> <>9__81_114;
            public static Func<DateTime, bool> <>9__81_115;
            public static Func<DateTime, bool> <>9__81_116;
            public static Func<DateTime, bool> <>9__81_117;
            public static Func<DateTime, bool> <>9__81_118;
            public static Func<DateTime, bool> <>9__81_119;
            public static Func<DateTime, bool> <>9__81_120;
            public static Func<DateTime, bool> <>9__81_121;
            public static Func<DateTime, bool> <>9__81_122;
            public static Func<DateTime, bool> <>9__81_123;
            public static Func<DateTime, bool> <>9__81_124;
            public static Func<DateTime, bool> <>9__81_125;
            public static Func<DateTime, bool> <>9__81_126;
            public static Func<DateTime, bool> <>9__81_127;
            public static Func<DateTime, bool> <>9__81_128;
            public static Func<DateTime, bool> <>9__81_129;
            public static Func<DateTime, bool> <>9__81_130;
            public static Func<DateTime, bool> <>9__81_131;
            public static Func<DateTime, bool> <>9__81_132;
            public static Func<DateTime, bool> <>9__81_133;
            public static Func<DateTime, bool> <>9__81_134;
            public static Func<DateTime, bool> <>9__81_135;
            public static Func<DateTime, bool> <>9__81_136;
            public static Func<DateTime, bool> <>9__81_137;
            public static Func<DateTime, bool> <>9__81_138;
            public static Func<DateTime, bool> <>9__81_139;
            public static Func<DateTime, bool> <>9__81_140;
            public static Func<DateTime, bool> <>9__81_141;
            public static Func<DateTime, bool> <>9__81_142;
            public static Func<DateTime, bool> <>9__81_143;
            public static Func<DateTime, bool> <>9__81_144;
            public static Func<DateTime, bool> <>9__81_145;
            public static Func<DateTime, DateTime, long> <>9__81_146;
            public static Func<DateTime, DateTime, int> <>9__81_147;
            public static Func<DateTime, DateTime, int> <>9__81_148;
            public static Func<DateTime, DateTime, int> <>9__81_149;
            public static Func<DateTime, DateTime, int> <>9__81_150;
            public static Func<DateTime, DateTime, int> <>9__81_151;
            public static Func<DateTime, DateTime, int> <>9__81_152;
            public static Func<DateTime, DateTime, int> <>9__81_153;
            public static Func<DateTime, DateTime> <>9__81_154;
            public static Func<DateTime, int> <>9__81_155;
            public static Func<DateTime, int> <>9__81_156;
            public static Func<DateTime, int> <>9__81_157;
            public static Func<DateTime, int> <>9__81_158;
            public static Func<DateTime, int> <>9__81_159;
            public static Func<DateTime, int> <>9__81_160;
            public static Func<DateTime, int> <>9__81_161;
            public static Func<DateTime, int> <>9__81_162;
            public static Func<DateTime, int> <>9__81_163;
            public static Func<DateTime, long> <>9__81_164;
            public static Func<DateTime> <>9__81_165;
            public static Func<DateTime> <>9__81_166;
            public static Func<DateTime> <>9__81_167;
            public static Func<DateTime, TimeSpan, DateTime> <>9__81_168;
            public static Func<DateTime, long, DateTime> <>9__81_169;
            public static Func<DateTime, double, DateTime> <>9__81_170;
            public static Func<DateTime, double, DateTime> <>9__81_171;
            public static Func<DateTime, double, DateTime> <>9__81_172;
            public static Func<DateTime, double, DateTime> <>9__81_173;
            public static Func<DateTime, double, DateTime> <>9__81_174;
            public static Func<DateTime, int, DateTime> <>9__81_175;
            public static Func<DateTime, int, DateTime> <>9__81_176;
            public static Func<Type, int, ParameterExpression> <>9__87_0;
            public static Func<Expression, Expression> <>9__87_1;

            static <>c();
            internal bool <MakeFnLambda>b__81_0(string x);
            internal string <MakeFnLambda>b__81_1(string x);
            internal string <MakeFnLambda>b__81_10(string str, string pattern, string replace);
            internal DateTime <MakeFnLambda>b__81_100();
            internal DateTime <MakeFnLambda>b__81_101();
            internal DateTime <MakeFnLambda>b__81_102();
            internal DateTime <MakeFnLambda>b__81_103();
            internal DateTime <MakeFnLambda>b__81_104();
            internal DateTime <MakeFnLambda>b__81_105();
            internal DateTime <MakeFnLambda>b__81_106();
            internal DateTime <MakeFnLambda>b__81_107();
            internal DateTime <MakeFnLambda>b__81_108();
            internal DateTime <MakeFnLambda>b__81_109();
            internal DateTime <MakeFnLambda>b__81_110();
            internal DateTime <MakeFnLambda>b__81_111();
            internal DateTime <MakeFnLambda>b__81_112();
            internal bool <MakeFnLambda>b__81_113(DateTime dt);
            internal bool <MakeFnLambda>b__81_114(DateTime dt);
            internal bool <MakeFnLambda>b__81_115(DateTime dt);
            internal bool <MakeFnLambda>b__81_116(DateTime dt);
            internal bool <MakeFnLambda>b__81_117(DateTime dt);
            internal bool <MakeFnLambda>b__81_118(DateTime dt);
            internal bool <MakeFnLambda>b__81_119(DateTime dt);
            internal string <MakeFnLambda>b__81_12(string str, string pattern, string replace);
            internal bool <MakeFnLambda>b__81_120(DateTime dt);
            internal bool <MakeFnLambda>b__81_121(DateTime dt);
            internal bool <MakeFnLambda>b__81_122(DateTime dt);
            internal bool <MakeFnLambda>b__81_123(DateTime dt);
            internal bool <MakeFnLambda>b__81_124(DateTime dt);
            internal bool <MakeFnLambda>b__81_125(DateTime dt);
            internal bool <MakeFnLambda>b__81_126(DateTime dt);
            internal bool <MakeFnLambda>b__81_127(DateTime dt);
            internal bool <MakeFnLambda>b__81_128(DateTime dt);
            internal bool <MakeFnLambda>b__81_129(DateTime dt);
            internal string <MakeFnLambda>b__81_13(string x);
            internal bool <MakeFnLambda>b__81_130(DateTime dt);
            internal bool <MakeFnLambda>b__81_131(DateTime dt);
            internal bool <MakeFnLambda>b__81_132(DateTime dt);
            internal bool <MakeFnLambda>b__81_133(DateTime dt);
            internal bool <MakeFnLambda>b__81_134(DateTime dt);
            internal bool <MakeFnLambda>b__81_135(DateTime dt);
            internal bool <MakeFnLambda>b__81_136(DateTime dt);
            internal bool <MakeFnLambda>b__81_137(DateTime dt);
            internal bool <MakeFnLambda>b__81_138(DateTime dt);
            internal bool <MakeFnLambda>b__81_139(DateTime dt);
            internal string <MakeFnLambda>b__81_14(string x, int? startIndex, string value);
            internal bool <MakeFnLambda>b__81_140(DateTime dt);
            internal bool <MakeFnLambda>b__81_141(DateTime dt);
            internal bool <MakeFnLambda>b__81_142(DateTime dt);
            internal bool <MakeFnLambda>b__81_143(DateTime dt);
            internal bool <MakeFnLambda>b__81_144(DateTime dt);
            internal bool <MakeFnLambda>b__81_145(DateTime dt);
            internal long <MakeFnLambda>b__81_146(DateTime op1, DateTime op2);
            internal int <MakeFnLambda>b__81_147(DateTime op1, DateTime op2);
            internal int <MakeFnLambda>b__81_148(DateTime op1, DateTime op2);
            internal int <MakeFnLambda>b__81_149(DateTime op1, DateTime op2);
            internal int <MakeFnLambda>b__81_150(DateTime op1, DateTime op2);
            internal int <MakeFnLambda>b__81_151(DateTime op1, DateTime op2);
            internal int <MakeFnLambda>b__81_152(DateTime op1, DateTime op2);
            internal int <MakeFnLambda>b__81_153(DateTime op1, DateTime op2);
            internal DateTime <MakeFnLambda>b__81_154(DateTime d);
            internal int <MakeFnLambda>b__81_155(DateTime d);
            internal int <MakeFnLambda>b__81_156(DateTime d);
            internal int <MakeFnLambda>b__81_157(DateTime d);
            internal int <MakeFnLambda>b__81_158(DateTime d);
            internal int <MakeFnLambda>b__81_159(DateTime d);
            internal int <MakeFnLambda>b__81_160(DateTime d);
            internal int <MakeFnLambda>b__81_161(DateTime d);
            internal int <MakeFnLambda>b__81_162(DateTime d);
            internal int <MakeFnLambda>b__81_163(DateTime d);
            internal long <MakeFnLambda>b__81_164(DateTime d);
            internal DateTime <MakeFnLambda>b__81_165();
            internal DateTime <MakeFnLambda>b__81_166();
            internal DateTime <MakeFnLambda>b__81_167();
            internal DateTime <MakeFnLambda>b__81_168(DateTime dt, TimeSpan ts);
            internal DateTime <MakeFnLambda>b__81_169(DateTime dt, long ticks);
            internal DateTime <MakeFnLambda>b__81_170(DateTime dt, double ms);
            internal DateTime <MakeFnLambda>b__81_171(DateTime dt, double s);
            internal DateTime <MakeFnLambda>b__81_172(DateTime dt, double m);
            internal DateTime <MakeFnLambda>b__81_173(DateTime dt, double h);
            internal DateTime <MakeFnLambda>b__81_174(DateTime dt, double d);
            internal DateTime <MakeFnLambda>b__81_175(DateTime dt, int m);
            internal DateTime <MakeFnLambda>b__81_176(DateTime dt, int y);
            internal int? <MakeFnLambda>b__81_2(string x);
            internal int? <MakeFnLambda>b__81_21(string pattern, string body);
            internal int? <MakeFnLambda>b__81_22(string pattern, string body, int? startIndex);
            internal int? <MakeFnLambda>b__81_23(string pattern, string body, int? startIndex, int? endIndex);
            internal int? <MakeFnLambda>b__81_24(string pattern, string body);
            internal int? <MakeFnLambda>b__81_25(string pattern, string body, int? startIndex);
            internal int? <MakeFnLambda>b__81_26(string pattern, string body, int? startIndex, int? endIndex);
            internal string <MakeFnLambda>b__81_27(string x, int? startIndex);
            internal string <MakeFnLambda>b__81_28(string x, int? startIndex, int? count);
            internal object <MakeFnLambda>b__81_29(object x);
            internal string <MakeFnLambda>b__81_3(string x, int? s);
            internal decimal <MakeFnLambda>b__81_30(decimal x);
            internal double <MakeFnLambda>b__81_31(double x);
            internal short <MakeFnLambda>b__81_32(short x);
            internal int <MakeFnLambda>b__81_33(int x);
            internal long <MakeFnLambda>b__81_34(long x);
            internal sbyte <MakeFnLambda>b__81_35(sbyte x);
            internal float <MakeFnLambda>b__81_36(float x);
            internal double <MakeFnLambda>b__81_37(double x);
            internal double <MakeFnLambda>b__81_38(double x);
            internal double <MakeFnLambda>b__81_39(double x);
            internal string <MakeFnLambda>b__81_4(string x, int? s, int? l);
            internal double <MakeFnLambda>b__81_40(double x);
            internal double <MakeFnLambda>b__81_41(double x);
            internal double <MakeFnLambda>b__81_42(double x);
            internal double <MakeFnLambda>b__81_43(double x);
            internal double <MakeFnLambda>b__81_44(double x, double newBase);
            internal double <MakeFnLambda>b__81_45();
            internal double <MakeFnLambda>b__81_46(double x);
            internal double <MakeFnLambda>b__81_47(double x, double y);
            internal int? <MakeFnLambda>b__81_48(object x);
            internal int <MakeFnLambda>b__81_49(byte x);
            internal string <MakeFnLambda>b__81_5(string x);
            internal int <MakeFnLambda>b__81_50(char x);
            internal int <MakeFnLambda>b__81_51(decimal x);
            internal int <MakeFnLambda>b__81_52(double x);
            internal int <MakeFnLambda>b__81_53(short x);
            internal int <MakeFnLambda>b__81_54(long x);
            internal int <MakeFnLambda>b__81_55(sbyte x);
            internal int <MakeFnLambda>b__81_56(float x);
            internal int <MakeFnLambda>b__81_57(ushort x);
            internal int <MakeFnLambda>b__81_58(uint x);
            internal int <MakeFnLambda>b__81_59(ulong x);
            internal string <MakeFnLambda>b__81_6(string x);
            internal int <MakeFnLambda>b__81_60(int x);
            internal object <MakeFnLambda>b__81_61(object x, int? precision);
            internal decimal <MakeFnLambda>b__81_62(decimal x, int? precision);
            internal double <MakeFnLambda>b__81_63(double x, int? precision);
            internal object <MakeFnLambda>b__81_64(object x);
            internal decimal <MakeFnLambda>b__81_65(decimal x);
            internal decimal <MakeFnLambda>b__81_66(decimal x, int? precision);
            internal double <MakeFnLambda>b__81_67(double x);
            internal object <MakeFnLambda>b__81_68(object x);
            internal decimal <MakeFnLambda>b__81_69(decimal x);
            internal int? <MakeFnLambda>b__81_7(string x);
            internal decimal <MakeFnLambda>b__81_70(decimal x, int? precision);
            internal double <MakeFnLambda>b__81_71(double x);
            internal double <MakeFnLambda>b__81_72(double x);
            internal double <MakeFnLambda>b__81_73(double x);
            internal double <MakeFnLambda>b__81_74(double y, double x);
            internal long <MakeFnLambda>b__81_75(long a, long b);
            internal double <MakeFnLambda>b__81_76(double x);
            internal double <MakeFnLambda>b__81_77(double x);
            internal double <MakeFnLambda>b__81_78(double x);
            internal double <MakeFnLambda>b__81_79(double x);
            internal string <MakeFnLambda>b__81_8(long? x);
            internal string <MakeFnLambda>b__81_80(string str, int? totalLength);
            internal string <MakeFnLambda>b__81_81(string str, int? totalLength, string padChar);
            internal string <MakeFnLambda>b__81_82(string str, int? totalLength);
            internal string <MakeFnLambda>b__81_83(string str, int? totalLength, string padChar);
            internal bool <MakeFnLambda>b__81_84(string s1, string s2);
            internal bool <MakeFnLambda>b__81_85(string s1, string s2);
            internal bool <MakeFnLambda>b__81_86(string s1, string s2);
            internal bool <MakeFnLambda>b__81_87(string s1, string s2);
            internal bool <MakeFnLambda>b__81_88(string s1, string s2);
            internal bool <MakeFnLambda>b__81_89(string s1, string s2);
            internal string <MakeFnLambda>b__81_9(string x);
            internal int? <MakeFnLambda>b__81_90(object x);
            internal long? <MakeFnLambda>b__81_91(object x);
            internal float? <MakeFnLambda>b__81_92(object x);
            internal double? <MakeFnLambda>b__81_93(object x);
            internal decimal? <MakeFnLambda>b__81_94(object x);
            internal DateTime <MakeFnLambda>b__81_95();
            internal DateTime <MakeFnLambda>b__81_96();
            internal DateTime <MakeFnLambda>b__81_97();
            internal DateTime <MakeFnLambda>b__81_98();
            internal DateTime <MakeFnLambda>b__81_99();
            internal ParameterExpression <MakeLambdaFromSimpleFuncCore>b__87_0(Type x, int i);
            internal Expression <MakeLambdaFromSimpleFuncCore>b__87_1(Expression e);
            internal bool <MakeMinMax>b__67_0(Type t);
            internal bool <MakeMinMax>b__67_3(Type t);
        }

        public class FnConcater
        {
            private StringBuilder SB;
            private bool Nulled;

            public bool Append(string op);
            public override string ToString();
        }

        public static class FnMinMaxHelpers
        {
            public static T? FnMinMaxComparableBothNullableCore<T>(T? a, T? b, bool isMin) where T: struct, IComparable<T>;
            public static T FnMinMaxComparableClassCore<T>(T a, T b, bool isMin) where T: class, IComparable<T>;
            public static T FnMinMaxComparableNoNullsCore<T>(T a, T b, bool isMin) where T: IComparable<T>;
            public static T FnMinMaxComparableNullableACore<T>(T? a, T b, bool isMin) where T: struct, IComparable<T>;
            public static T FnMinMaxComparableNullableBCore<T>(T a, T? b, bool isMin) where T: struct, IComparable<T>;
        }

        private static class SingleLetterDiTriGraphsTools
        {
            private static readonly string[] sld_co_c;
            private static readonly string[] sld_co_g;
            private static readonly string[] sld_co_h;
            private static readonly string[] sld_hu_c;
            private static readonly string[] sld_hu_d;
            private static readonly string[] sld_hu_g;
            private static readonly string[] sld_hu_l;
            private static readonly string[] sld_hu_n;
            private static readonly string[] sld_hu_s;
            private static readonly string[] sld_hu_t;
            private static readonly string[] sld_hu_z;

            static SingleLetterDiTriGraphsTools();
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_arn(char sldPrefix);
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_br(char sldPrefix);
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_bs(char sldPrefix);
            private static IEnumerable<string> GetSingleLetterDigraphSuffixes_co(char sldPrefix);
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_cs(char sldPrefix);
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_cy(char sldPrefix);
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_da(char sldPrefix);
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_hr(char sldPrefix);
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_hsb(char sldPrefix);
            private static IEnumerable<string> GetSingleLetterDigraphSuffixes_hu(char sldPrefix);
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_kl(char sldPrefix);
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_mi(char sldPrefix);
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_sk(char sldPrefix);
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_sq(char sldPrefix);
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_sr(char sldPrefix);
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_ug(char sldPrefix);
            private static IEnumerable<char> GetSingleLetterDigraphSuffixes_vi(char sldPrefix);
            public static Delegate GetSuffixesGetterForCulture(string cultureName);
            private static char LatinToLower(char ch);
        }
    }
}

