namespace DevExpress.Xpf.Grid.Native
{
    using DevExpress.Core;
    using DevExpress.Mvvm.UI.Native.ViewGenerator.Model;
    using DevExpress.Xpf.Core.Native;
    using DevExpress.Xpf.Editors.Settings;
    using DevExpress.Xpf.Grid;
    using System;
    using System.Collections.Generic;
    using System.Windows;

    public class RuntimeColumnPropertiesPopulator
    {
        private readonly IModelItem columnModel;
        protected readonly GenerateColumnWrapper wrapper;

        public RuntimeColumnPropertiesPopulator(IModelItem columnModel, GenerateColumnWrapper wrapper)
        {
            this.columnModel = columnModel;
            this.wrapper = wrapper;
        }

        public void ApplyDefaultProperties(bool setIsSmart)
        {
            if (setIsSmart)
            {
                this.SetSmartProperty();
            }
            if (this.IsAutoGeneratedColumn() || this.IsSmartColumn())
            {
                if (!this.wrapper.Visible)
                {
                    this.SafeSetValueIsNotSet(this.columnModel, BaseColumn.VisibleProperty, this.wrapper.Visible);
                }
                if (this.wrapper.HeaderToolTip != null)
                {
                    this.SetValueIfNotSet(this.columnModel, BaseColumn.HeaderToolTipProperty, this.wrapper.HeaderToolTip);
                }
                if ((this.wrapper.AllowEditing != null) && !this.wrapper.AllowEditing.Value)
                {
                    this.SetValueIfNotSet(this.columnModel, ColumnBase.AllowEditingProperty, this.wrapper.AllowEditing.ToDefaultBoolean());
                }
                if (this.wrapper.ReadOnly)
                {
                    this.SetValueIfNotSet(this.columnModel, ColumnBase.ReadOnlyProperty, this.wrapper.ReadOnly);
                }
                if (this.wrapper.Header != null)
                {
                    this.SafeSetValueIsNotSet(this.columnModel, BaseColumn.HeaderProperty, this.wrapper.Header);
                }
            }
        }

        public void ApplyEditSettingsProperties(IModelItem editSettings)
        {
            if (editSettings != null)
            {
                if (this.IsSmartColumn())
                {
                    foreach (KeyValuePair<DependencyProperty, object> pair in this.wrapper.EditSettingsWrapper.Properties)
                    {
                        this.SetValueIfNotSet(editSettings, pair.Key, pair.Value);
                    }
                }
                this.SafeSetValueIsNotSet(this.columnModel, ColumnBase.EditSettingsProperty, editSettings);
            }
        }

        public void ApplyFieldName()
        {
            this.columnModel.Properties[ColumnBase.FieldNameProperty.Name].SetValueIfNotSet(this.wrapper.FieldName);
        }

        public void ApplyInitializer(IModelItem editSettings)
        {
            this.wrapper.Initializer.SetContainerProperties(this.columnModel);
            if (editSettings != null)
            {
                this.wrapper.Initializer.SetEditProperties(this.columnModel, editSettings);
            }
        }

        public void ApplyPropertiesFromResource()
        {
            if (this.wrapper.EditorResourceKey != null)
            {
                DataTemplate resourceTemplate = this.wrapper.Generator.GetResourceTemplate(this.columnModel, this.wrapper.EditorResourceKey);
                object resourceContentFromTemplate = this.wrapper.Generator.GetResourceContentFromTemplate(resourceTemplate);
                IModelItem root = new RuntimeEditingContext(resourceContentFromTemplate, null).GetRoot();
                if (resourceContentFromTemplate is ColumnBase)
                {
                    IModelItem item2 = (((ColumnBase) resourceContentFromTemplate).EditSettings != null) ? new RuntimeEditingContext(((ColumnBase) resourceContentFromTemplate).EditSettings, null).GetRoot() : null;
                    this.SafeSetValueIsNotSet(this.columnModel, ColumnBase.EditSettingsProperty, item2);
                }
                else if (resourceContentFromTemplate is BaseEditSettings)
                {
                    this.SafeSetValueIsNotSet(this.columnModel, ColumnBase.EditSettingsProperty, root);
                }
                else
                {
                    this.SetValueIfNotSet(this.columnModel, ColumnBase.CellTemplateProperty, resourceTemplate);
                }
            }
        }

        public void ApplyRuntimeProperties()
        {
            ((ColumnBase) this.columnModel.GetCurrentValue()).FieldType = this.wrapper.ColumnFieldType;
        }

        public void ApplySmartProperties(bool ignoreSmartProperty)
        {
            if (ignoreSmartProperty || ((bool) this.columnModel.Properties[ColumnBase.IsSmartProperty.Name].Value.GetCurrentValue()))
            {
                foreach (KeyValuePair<DependencyProperty, object> pair in this.wrapper.Properties)
                {
                    this.SetValueIfNotSet(this.columnModel, pair.Key, pair.Value);
                }
            }
        }

        protected virtual bool CanApplyEditSettings() => 
            this.wrapper.EditSettingsWrapper.EditSettingsType != null;

        public void ClearSmartProperty()
        {
            this.columnModel.Properties[ColumnBase.IsSmartProperty.Name].ClearValue();
        }

        public IModelItem CreateEditSettings() => 
            this.IsEditSettingsSet() ? (!this.IsPropertySet(this.columnModel, ColumnBase.EditSettingsProperty) ? (this.CanApplyEditSettings() ? this.columnModel.Context.CreateItem(this.wrapper.EditSettingsWrapper.EditSettingsType) : null) : null) : null;

        protected virtual bool IsAutoGeneratedColumn() => 
            (bool) this.columnModel.Properties[BaseColumn.IsAutoGeneratedProperty.Name].Value.GetCurrentValue();

        private bool IsEditSettingsSet() => 
            this.wrapper.EditSettingsWrapper.EditSettingsType != null;

        protected virtual bool IsPropertySet(IModelItem modelItem, DependencyProperty property)
        {
            if (modelItem.Properties[property.Name].IsSet)
            {
                return true;
            }
            DependencyObject currentValue = modelItem.GetCurrentValue() as DependencyObject;
            return ((currentValue != null) ? currentValue.IsPropertySet(property) : false);
        }

        protected virtual bool IsSmartColumn() => 
            (bool) this.columnModel.Properties[ColumnBase.IsSmartProperty.Name].Value.GetCurrentValue();

        protected virtual void SafeSetValueIsNotSet(IModelItem modelItem, DependencyProperty property, object value)
        {
            if (!this.IsPropertySet(modelItem, property))
            {
                modelItem.Properties[property.Name].SetValueIfNotSet(value);
            }
        }

        public void SetSmartProperty()
        {
            this.columnModel.Properties[ColumnBase.IsSmartProperty.Name].SetValueIfNotSet(true);
        }

        protected virtual void SetValueIfNotSet(IModelItem modelItem, DependencyProperty property, object value)
        {
            modelItem.Properties[property.Name].SetValueIfNotSet(value);
        }
    }
}

