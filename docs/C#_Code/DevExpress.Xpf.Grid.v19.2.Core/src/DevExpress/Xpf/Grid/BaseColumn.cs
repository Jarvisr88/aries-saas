namespace DevExpress.Xpf.Grid
{
    using DevExpress.Core;
    using DevExpress.Utils;
    using DevExpress.Utils.Serializing;
    using DevExpress.Xpf.Core;
    using DevExpress.Xpf.Core.Serialization;
    using DevExpress.Xpf.Editors;
    using DevExpress.Xpf.Grid.Native;
    using DevExpress.Xpf.Utils;
    using System;
    using System.ComponentModel;
    using System.Drawing;
    using System.Globalization;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Threading;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Data;
    using System.Windows.Media;

    public abstract class BaseColumn : DXFrameworkContentElement
    {
        internal const double DefaultMinWidth = 5.0;
        public static readonly DependencyProperty HeaderProperty;
        public static readonly DependencyProperty ImageProperty;
        public static readonly DependencyProperty ImageAlignmentProperty;
        internal const string HeaderCaptionPropertyName = "HeaderCaption";
        protected internal static readonly DependencyPropertyKey HeaderCaptionPropertyKey;
        public static readonly DependencyProperty HeaderCaptionProperty;
        public static readonly DependencyProperty HeaderTemplateProperty;
        public static readonly DependencyProperty HeaderTemplateSelectorProperty;
        protected static readonly DependencyPropertyKey ActualHeaderTemplateSelectorPropertyKey;
        public static readonly DependencyProperty ActualHeaderTemplateSelectorProperty;
        public static readonly DependencyProperty HeaderToolTipProperty;
        public static readonly DependencyProperty HeaderToolTipTemplateProperty;
        private static readonly DependencyPropertyKey ActualHeaderToolTipTemplatePropertyKey;
        public static readonly DependencyProperty ActualHeaderToolTipTemplateProperty;
        public static readonly DependencyProperty ColumnPositionProperty;
        public static readonly DependencyProperty HasTopElementProperty;
        public static readonly DependencyProperty HasBottomElementProperty;
        public static readonly DependencyProperty VisibleProperty;
        public static readonly DependencyProperty FixedWidthProperty;
        public static readonly DependencyProperty MinWidthProperty;
        protected static readonly DependencyPropertyKey ActualWidthPropertyKey;
        public static readonly DependencyProperty ActualWidthProperty;
        private static readonly DependencyPropertyKey ActualHeaderWidthPropertyKey;
        public static readonly DependencyProperty ActualHeaderWidthProperty;
        public static readonly DependencyProperty WidthProperty;
        public static readonly DependencyProperty MaxWidthProperty;
        public static readonly DependencyProperty HasRightSiblingProperty;
        public static readonly DependencyProperty HasLeftSiblingProperty;
        internal const string ActualAllowResizingPropertyName = "ActualAllowResizing";
        protected static readonly DependencyPropertyKey ActualAllowResizingPropertyKey;
        public static readonly DependencyProperty ActualAllowResizingProperty;
        public static readonly DependencyProperty AllowResizingProperty;
        public static readonly DependencyProperty AllowMovingProperty;
        private static readonly DependencyPropertyKey ActualAllowMovingPropertyKey;
        public static readonly DependencyProperty ActualAllowMovingProperty;
        public static readonly DependencyProperty VisibleIndexProperty;
        public static readonly DependencyProperty ActualVisibleIndexProperty;
        public static readonly DependencyProperty ActualCollectionIndexProperty;
        public static readonly DependencyProperty HorizontalHeaderContentAlignmentProperty;
        public static readonly DependencyProperty IsAutoGeneratedProperty;
        private static readonly DependencyPropertyKey IsAutoGeneratedPropertyKey;
        public static readonly DependencyProperty FixedProperty;
        public static readonly DependencyProperty AllowPrintingProperty;
        private static readonly DependencyPropertyKey ParentBandPropertyKey;
        public static readonly DependencyProperty ParentBandProperty;
        public static readonly DependencyProperty AllowSearchHeaderHighlightingProperty;
        public static readonly DependencyProperty HeaderStyleProperty;
        private static readonly DependencyPropertyKey ActualHeaderStylePropertyKey;
        public static readonly DependencyProperty ActualHeaderStyleProperty;
        public static readonly DependencyProperty CellToolTipTemplateProperty;
        private static readonly DependencyPropertyKey ActualCellToolTipTemplatePropertyKey;
        public static readonly DependencyProperty ActualCellToolTipTemplateProperty;
        public static readonly DependencyProperty HeaderImageStyleProperty;
        private static readonly DependencyPropertyKey ActualBandRightSeparatorWidthPropertyKey;
        public static readonly DependencyProperty ActualBandRightSeparatorWidthProperty;
        private static readonly DependencyPropertyKey ActualBandLeftSeparatorWidthPropertyKey;
        public static readonly DependencyProperty ActualBandLeftSeparatorWidthProperty;
        private static readonly DependencyPropertyKey ActualBandCellRightSeparatorColorPropertyKey;
        public static readonly DependencyProperty ActualBandCellRightSeparatorColorProperty;
        private static readonly DependencyPropertyKey ActualBandHeaderRightSeparatorColorPropertyKey;
        public static readonly DependencyProperty ActualBandHeaderRightSeparatorColorProperty;
        private static readonly DependencyPropertyKey ActualBandCellLeftSeparatorColorPropertyKey;
        public static readonly DependencyProperty ActualBandCellLeftSeparatorColorProperty;
        private static readonly DependencyPropertyKey ActualBandHeaderLeftSeparatorColorPropertyKey;
        public static readonly DependencyProperty ActualBandHeaderLeftSeparatorColorProperty;
        public static readonly DependencyProperty AllowBestFitProperty;
        public static readonly DependencyProperty BestFitWidthProperty;
        private BindingBase cellToolTipBinding;
        private Style actualHeaderImageStyleCore;
        internal int index = -1;
        internal int exportIndex = -1;

        public event ColumnContentChangedEventHandler ContentChanged;

        static BaseColumn()
        {
            Type ownerType = typeof(BaseColumn);
            HeaderProperty = DependencyPropertyManager.Register("Header", typeof(object), ownerType, new FrameworkPropertyMetadata(new PropertyChangedCallback(BaseColumn.OnHeaderChanged)));
            HeaderCaptionPropertyKey = DependencyPropertyManager.RegisterReadOnly("HeaderCaption", typeof(object), ownerType, new PropertyMetadata("", (d, e) => ((BaseColumn) d).HeaderCaptionChanged()));
            HeaderCaptionProperty = HeaderCaptionPropertyKey.DependencyProperty;
            ImageProperty = DependencyPropertyManager.Register("Image", typeof(ImageSource), ownerType, new PropertyMetadata(null, (d, e) => ((BaseColumn) d).OnImageChanged()));
            ImageAlignmentProperty = DependencyPropertyManager.Register("ImageAlignment", typeof(StringAlignment), ownerType, new PropertyMetadata(StringAlignment.Near, (d, e) => ((BaseColumn) d).OnImageAlignmentChanged()));
            HeaderTemplateProperty = DependencyPropertyManager.Register("HeaderTemplate", typeof(DataTemplate), ownerType, new PropertyMetadata(null, (d, e) => ((BaseColumn) d).UpdateActualHeaderTemplateSelector()));
            HeaderTemplateSelectorProperty = DependencyPropertyManager.Register("HeaderTemplateSelector", typeof(DataTemplateSelector), ownerType, new PropertyMetadata(null, (d, e) => ((BaseColumn) d).UpdateActualHeaderTemplateSelector()));
            ActualHeaderTemplateSelectorPropertyKey = DependencyPropertyManager.RegisterReadOnly("ActualHeaderTemplateSelector", typeof(DataTemplateSelector), ownerType, new PropertyMetadata((d, e) => ((BaseColumn) d).RaiseContentChanged(ActualHeaderTemplateSelectorProperty)));
            ActualHeaderTemplateSelectorProperty = ActualHeaderTemplateSelectorPropertyKey.DependencyProperty;
            HeaderToolTipProperty = DependencyPropertyManager.Register("HeaderToolTip", typeof(object), ownerType, new FrameworkPropertyMetadata(null, (d, e) => ((BaseColumn) d).RaiseContentChanged(HeaderToolTipProperty)));
            HeaderToolTipTemplateProperty = DependencyPropertyManager.Register("HeaderToolTipTemplate", typeof(DataTemplate), ownerType, new FrameworkPropertyMetadata(null, (d, e) => ((BaseColumn) d).UpdateActualHeaderToolTipTemplate()));
            ActualHeaderToolTipTemplatePropertyKey = DependencyPropertyManager.RegisterReadOnly("ActualHeaderToolTipTemplate", typeof(DataTemplate), ownerType, new FrameworkPropertyMetadata(null, (d, e) => ((BaseColumn) d).RaiseContentChanged(ActualHeaderToolTipTemplateProperty)));
            ActualHeaderToolTipTemplateProperty = ActualHeaderToolTipTemplatePropertyKey.DependencyProperty;
            ColumnPositionProperty = DependencyPropertyManager.Register("ColumnPosition", typeof(DevExpress.Xpf.Grid.ColumnPosition), ownerType, new FrameworkPropertyMetadata(DevExpress.Xpf.Grid.ColumnPosition.Middle, (d, e) => ((BaseColumn) d).RaiseContentChanged(ColumnPositionProperty)));
            HasTopElementProperty = DependencyPropertyManager.Register("HasTopElement", typeof(bool), ownerType, new PropertyMetadata(false, (d, e) => ((BaseColumn) d).RaiseHasTopElementChanged()));
            HasBottomElementProperty = DependencyPropertyManager.Register("HasBottomElement", typeof(bool), ownerType, new PropertyMetadata(false, (d, e) => ((BaseColumn) d).RaiseContentChanged(HasBottomElementProperty)));
            VisibleProperty = DependencyPropertyManager.Register("Visible", typeof(bool), ownerType, new PropertyMetadata(true, (d, e) => ((BaseColumn) d).OnVisibleChanged()));
            HasRightSiblingProperty = DependencyPropertyManager.Register("HasRightSibling", typeof(bool), ownerType, new FrameworkPropertyMetadata(true, (d, e) => ((BaseColumn) d).OnHasRightSiblingChanged()));
            HasLeftSiblingProperty = DependencyPropertyManager.Register("HasLeftSibling", typeof(bool), ownerType, new FrameworkPropertyMetadata(true, (d, e) => ((BaseColumn) d).OnHasLeftSiblingChanged()));
            FixedWidthProperty = DependencyPropertyManager.Register("FixedWidth", typeof(bool), ownerType, new PropertyMetadata(false, (d, e) => ((BaseColumn) d).OnLayoutPropertyChanged()));
            MinWidthProperty = DependencyPropertyManager.Register("MinWidth", typeof(double), ownerType, new PropertyMetadata(5.0, (d, e) => ((BaseColumn) d).OnLayoutPropertyChanged(), new CoerceValueCallback(BaseColumn.OnMinWidthChanging)));
            ActualWidthPropertyKey = DependencyPropertyManager.RegisterReadOnly("ActualWidth", typeof(double), ownerType, new FrameworkPropertyMetadata((double) 1.0 / (double) 0.0, FrameworkPropertyMetadataOptions.AffectsMeasure));
            ActualWidthProperty = ActualWidthPropertyKey.DependencyProperty;
            ActualHeaderWidthPropertyKey = DependencyPropertyManager.RegisterReadOnly("ActualHeaderWidth", typeof(double), ownerType, new FrameworkPropertyMetadata((double) 1.0 / (double) 0.0, (d, e) => ((BaseColumn) d).OnActualHeaderWidthChanged(), (CoerceValueCallback) ((d, baseValue) => Math.Max(0.0, (double) baseValue))));
            ActualHeaderWidthProperty = ActualHeaderWidthPropertyKey.DependencyProperty;
            WidthProperty = DependencyPropertyManager.Register("Width", typeof(GridColumnWidth), ownerType, new FrameworkPropertyMetadata(new GridColumnWidth(120.0, GridColumnUnitType.Pixel), (d, e) => ((BaseColumn) d).OnWidthChanged(), (CoerceValueCallback) ((d, e) => ((BaseColumn) d).OnWidthChanging((GridColumnWidth) e))));
            MaxWidthProperty = DependencyPropertyManager.Register("MaxWidth", typeof(double), ownerType, new FrameworkPropertyMetadata((double) 1.0 / (double) 0.0, (d, e) => ((BaseColumn) d).OnLayoutPropertyChanged()));
            AllowResizingProperty = DependencyPropertyManager.Register("AllowResizing", typeof(DefaultBoolean), ownerType, new PropertyMetadata(DefaultBoolean.Default, (d, e) => ((BaseColumn) d).OnLayoutPropertyChanged()));
            ActualAllowResizingPropertyKey = DependencyPropertyManager.RegisterReadOnly("ActualAllowResizing", typeof(bool), ownerType, new PropertyMetadata(true, (d, e) => ((BaseColumn) d).RaiseContentChanged(ActualAllowResizingProperty)));
            ActualAllowResizingProperty = ActualAllowResizingPropertyKey.DependencyProperty;
            AllowMovingProperty = DependencyPropertyManager.Register("AllowMoving", typeof(DefaultBoolean), ownerType, new FrameworkPropertyMetadata(DefaultBoolean.Default, (d, e) => ((BaseColumn) d).UpdateActualAllowMoving()));
            ActualAllowMovingPropertyKey = DependencyPropertyManager.RegisterReadOnly("ActualAllowMoving", typeof(bool), ownerType, new FrameworkPropertyMetadata(true));
            ActualAllowMovingProperty = ActualAllowMovingPropertyKey.DependencyProperty;
            VisibleIndexProperty = DependencyPropertyManager.RegisterAttached("VisibleIndex", typeof(int), ownerType, new PropertyMetadata(-1, new PropertyChangedCallback(BaseColumn.OnVisibleIndexChanged)));
            ActualVisibleIndexProperty = DependencyPropertyManager.RegisterAttached("ActualVisibleIndex", typeof(int), ownerType, new PropertyMetadata(-1));
            ActualCollectionIndexProperty = DependencyPropertyManager.RegisterAttached("ActualCollectionIndex", typeof(int), ownerType, new PropertyMetadata(-1));
            HorizontalHeaderContentAlignmentProperty = DependencyPropertyManager.Register("HorizontalHeaderContentAlignment", typeof(HorizontalAlignment), ownerType, new FrameworkPropertyMetadata(HorizontalAlignment.Left, (d, e) => ((BaseColumn) d).RaiseContentChanged(HorizontalHeaderContentAlignmentProperty), new CoerceValueCallback(BaseColumn.CoerceHorizontalHeaderContentAlignment)));
            FixedProperty = DependencyPropertyManager.Register("Fixed", typeof(FixedStyle), ownerType, new PropertyMetadata(FixedStyle.None, (d, e) => ((BaseColumn) d).OnFixedChanged()));
            DependencyPropertyKey[] knownKeys = new DependencyPropertyKey[] { ActualHeaderWidthPropertyKey, ActualWidthPropertyKey };
            CloneDetailHelper.RegisterKnownPropertyKeys(ownerType, knownKeys);
            IsAutoGeneratedPropertyKey = DependencyPropertyManager.RegisterReadOnly("IsAutoGenerated", typeof(bool), ownerType, new PropertyMetadata(false));
            IsAutoGeneratedProperty = IsAutoGeneratedPropertyKey.DependencyProperty;
            AllowPrintingProperty = DependencyProperty.Register("AllowPrinting", typeof(bool), ownerType, new PropertyMetadata(true));
            ParentBandPropertyKey = DependencyProperty.RegisterReadOnly("ParentBand", typeof(BandBase), ownerType, new PropertyMetadata(null, (d, e) => ((BaseColumn) d).ParentBandChanged()));
            ParentBandProperty = ParentBandPropertyKey.DependencyProperty;
            AllowSearchHeaderHighlightingProperty = DependencyProperty.Register("AllowSearchHeaderHighlighting", typeof(bool), ownerType, new PropertyMetadata(false, (d, e) => ((BaseColumn) d).OnAllowSearchHeaderHighlightingChanged()));
            HeaderStyleProperty = DependencyPropertyManager.Register("HeaderStyle", typeof(Style), ownerType, new PropertyMetadata(null, (d, e) => ((BaseColumn) d).OnHeaderStyleChanged(e)));
            ActualHeaderStylePropertyKey = DependencyPropertyManager.RegisterReadOnly("ActualHeaderStyle", typeof(Style), ownerType, new PropertyMetadata(null, (d, e) => ((BaseColumn) d).OnActualHeaderStyleChanged(e)));
            ActualHeaderStyleProperty = ActualHeaderStylePropertyKey.DependencyProperty;
            CellToolTipTemplateProperty = DependencyPropertyManager.Register("CellToolTipTemplate", typeof(DataTemplate), ownerType, new FrameworkPropertyMetadata(null, (d, e) => ((BaseColumn) d).UpdateActualCellToolTipTemplate()));
            ActualCellToolTipTemplatePropertyKey = DependencyPropertyManager.RegisterReadOnly("ActualCellToolTipTemplate", typeof(DataTemplate), ownerType, new FrameworkPropertyMetadata(null, (d, e) => ((BaseColumn) d).RaiseContentChanged(ActualCellToolTipTemplateProperty)));
            ActualCellToolTipTemplateProperty = ActualCellToolTipTemplatePropertyKey.DependencyProperty;
            HeaderImageStyleProperty = DependencyPropertyManager.Register("HeaderImageStyle", typeof(Style), ownerType, new PropertyMetadata(null, (d, e) => ((BaseColumn) d).UpdateActualHeaderImageStyle()));
            ActualBandRightSeparatorWidthPropertyKey = DependencyPropertyManager.RegisterReadOnly("ActualBandRightSeparatorWidth", typeof(double), typeof(BaseColumn), new FrameworkPropertyMetadata(0.0, (d, e) => ((BaseColumn) d).OnActualBandRightSeparatorWidthChanged((double) e.NewValue)));
            ActualBandRightSeparatorWidthProperty = ActualBandRightSeparatorWidthPropertyKey.DependencyProperty;
            ActualBandLeftSeparatorWidthPropertyKey = DependencyPropertyManager.RegisterReadOnly("ActualBandLeftSeparatorWidth", typeof(double), typeof(BaseColumn), new FrameworkPropertyMetadata(0.0, (d, e) => ((BaseColumn) d).OnActualBandLeftSeparatorWidthChanged((double) e.NewValue)));
            ActualBandLeftSeparatorWidthProperty = ActualBandLeftSeparatorWidthPropertyKey.DependencyProperty;
            ActualBandCellRightSeparatorColorPropertyKey = DependencyPropertyManager.RegisterReadOnly("ActualBandCellRightSeparatorColor", typeof(System.Windows.Media.Brush), typeof(BaseColumn), new FrameworkPropertyMetadata(null, (d, e) => ((BaseColumn) d).OnActualBandCellRightSeparatorColorChanged((System.Windows.Media.Brush) e.NewValue)));
            ActualBandCellRightSeparatorColorProperty = ActualBandCellRightSeparatorColorPropertyKey.DependencyProperty;
            ActualBandHeaderRightSeparatorColorPropertyKey = DependencyPropertyManager.RegisterReadOnly("ActualBandHeaderRightSeparatorColor", typeof(System.Windows.Media.Brush), typeof(BaseColumn), new FrameworkPropertyMetadata(null, (d, e) => ((BaseColumn) d).OnActualBandHeaderRightSeparatorColorChanged((System.Windows.Media.Brush) e.NewValue)));
            ActualBandHeaderRightSeparatorColorProperty = ActualBandHeaderRightSeparatorColorPropertyKey.DependencyProperty;
            ActualBandCellLeftSeparatorColorPropertyKey = DependencyPropertyManager.RegisterReadOnly("ActualBandCellLeftSeparatorColor", typeof(System.Windows.Media.Brush), typeof(BaseColumn), new FrameworkPropertyMetadata(null, (d, e) => ((BaseColumn) d).OnActualBandCellLeftSeparatorColorChanged((System.Windows.Media.Brush) e.NewValue)));
            ActualBandCellLeftSeparatorColorProperty = ActualBandCellLeftSeparatorColorPropertyKey.DependencyProperty;
            ActualBandHeaderLeftSeparatorColorPropertyKey = DependencyPropertyManager.RegisterReadOnly("ActualBandHeaderLeftSeparatorColor", typeof(System.Windows.Media.Brush), typeof(BaseColumn), new FrameworkPropertyMetadata(null, (d, e) => ((BaseColumn) d).OnActualBandHeaderLeftSeparatorColorChanged((System.Windows.Media.Brush) e.NewValue)));
            ActualBandHeaderLeftSeparatorColorProperty = ActualBandHeaderLeftSeparatorColorPropertyKey.DependencyProperty;
            AllowBestFitProperty = DependencyPropertyManager.Register("AllowBestFit", typeof(DefaultBoolean), ownerType, new FrameworkPropertyMetadata(DefaultBoolean.Default));
            BestFitWidthProperty = DependencyPropertyManager.Register("BestFitWidth", typeof(double), ownerType, new FrameworkPropertyMetadata((double) 1.0 / (double) 0.0, null, (CoerceValueCallback) ((d, baseValue) => CoerceBestFitWidth(Convert.ToDouble(baseValue)))));
        }

        public BaseColumn()
        {
            this.HeaderWidth = double.NaN;
            this.ForcedWidth = double.NaN;
        }

        protected internal virtual bool CanDropTo(BaseColumn target) => 
            true;

        internal bool CheckAndUpdateBandSeparatorWidth()
        {
            bool flag = false;
            if (this.OldActualBandRightSeparatorWidth != this.ActualBandRightSeparatorWidthCore)
            {
                this.OldActualBandRightSeparatorWidth = this.ActualBandRightSeparatorWidthCore;
                flag = true;
            }
            if (this.OldActualBandLeftSeparatorWidth != this.ActualBandLeftSeparatorWidthCore)
            {
                this.OldActualBandLeftSeparatorWidth = this.ActualBandLeftSeparatorWidthCore;
                flag = true;
            }
            return (flag || ((this.ActualBandRightSeparatorWidthCore > 0.0) || (this.ActualBandLeftSeparatorWidthCore > 0.0)));
        }

        private static double CoerceBestFitWidth(double baseValue) => 
            Math.Max(baseValue, 0.0);

        private static object CoerceHorizontalHeaderContentAlignment(DependencyObject d, object value) => 
            !((BaseColumn) d).Visible ? HorizontalAlignment.Left : value;

        internal abstract Func<DataControlBase, BaseColumn> CreateCloneAccessor();
        protected virtual bool GetActualAllowResizing(bool autoWidth)
        {
            bool allowResizing = this.GetAllowResizing();
            return (!(allowResizing & autoWidth) ? allowResizing : this.HasRightSibling);
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static int GetActualCollectionIndex(DependencyObject element)
        {
            if (element == null)
            {
                throw new ArgumentNullException("element");
            }
            return (int) element.GetValue(ActualCollectionIndexProperty);
        }

        protected internal virtual DataTemplate GetActualTemplate() => 
            this.HeaderTemplate;

        protected internal virtual DataTemplateSelector GetActualTemplateSelector() => 
            this.HeaderTemplateSelector;

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static int GetActualVisibleIndex(DependencyObject element)
        {
            if (element == null)
            {
                throw new ArgumentNullException("element");
            }
            return (int) element.GetValue(ActualVisibleIndexProperty);
        }

        protected internal virtual bool GetAllowResizing() => 
            this.AllowResizing.GetValue(this.OwnerAllowResizing);

        protected BaseColumn GetEventTargetColumn() => 
            this.GetOriginationColumn() ?? this;

        protected object GetFormattedHeader()
        {
            object header = this.Header;
            if (header == null)
            {
                return null;
            }
            BindingExpression bindingExpression = (this.GetOriginationColumn() ?? this).GetBindingExpression(HeaderProperty);
            return (((bindingExpression == null) || ((bindingExpression.ParentBinding == null) || string.IsNullOrEmpty(bindingExpression.ParentBinding.StringFormat))) ? header : FormatStringConverter.GetFormattedValue(bindingExpression.ParentBinding.StringFormat, header, CultureInfo.CurrentCulture));
        }

        internal abstract DataControlBase GetNotifySourceControl();
        protected virtual BaseColumn GetOriginationColumn() => 
            null;

        internal BandBase GetRootParentBand()
        {
            BandBase parentBand = this.ParentBand;
            if (parentBand == null)
            {
                return null;
            }
            while (parentBand.ParentBand != null)
            {
                parentBand = parentBand.ParentBand;
            }
            return parentBand;
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static int GetVisibleIndex(DependencyObject element)
        {
            if (element == null)
            {
                throw new ArgumentNullException("element");
            }
            return (int) element.GetValue(VisibleIndexProperty);
        }

        protected virtual void HeaderCaptionChanged()
        {
            this.RaiseContentChanged(HeaderCaptionProperty);
        }

        internal virtual bool IsServiceColumn() => 
            false;

        private void OnActualBandCellLeftSeparatorColorChanged(System.Windows.Media.Brush newVal)
        {
            this.ActualBandCellLeftSeparatorColorCore = newVal;
            this.RaiseContentChanged(ActualBandCellLeftSeparatorColorProperty);
        }

        private void OnActualBandCellRightSeparatorColorChanged(System.Windows.Media.Brush newVal)
        {
            this.ActualBandCellRightSeparatorColorCore = newVal;
            this.RaiseContentChanged(ActualBandCellRightSeparatorColorProperty);
        }

        private void OnActualBandHeaderLeftSeparatorColorChanged(System.Windows.Media.Brush newVal)
        {
            this.ActualBandHeaderLeftSeparatorColorCore = newVal;
        }

        private void OnActualBandHeaderRightSeparatorColorChanged(System.Windows.Media.Brush newVal)
        {
            this.ActualBandHeaderRightSeparatorColorCore = newVal;
        }

        private void OnActualBandLeftSeparatorWidthChanged(double newVal)
        {
            this.ActualBandLeftSeparatorWidthCore = newVal;
        }

        private void OnActualBandRightSeparatorWidthChanged(double newVal)
        {
            this.ActualBandRightSeparatorWidthCore = newVal;
        }

        private void OnActualHeaderStyleChanged(DependencyPropertyChangedEventArgs e)
        {
            this.RaiseContentChanged(ActualHeaderStyleProperty);
        }

        protected virtual void OnActualHeaderWidthChanged()
        {
            this.RaiseContentChanged(ActualHeaderWidthProperty);
            if (this.View != null)
            {
                UpdateRowDataDelegate updateMethod = <>c.<>9__260_0;
                if (<>c.<>9__260_0 == null)
                {
                    UpdateRowDataDelegate local1 = <>c.<>9__260_0;
                    updateMethod = <>c.<>9__260_0 = data => data.OnActualHeaderWidthChange();
                }
                this.View.UpdateRowData(updateMethod, false, false);
            }
        }

        protected virtual void OnAllowSearchHeaderHighlightingChanged()
        {
            this.RaiseContentChanged(AllowSearchHeaderHighlightingProperty);
        }

        protected internal virtual bool OnBandSeparatorChanged()
        {
            this.ActualBandRightSeparatorWidth = 0.0;
            this.ActualBandLeftSeparatorWidth = 0.0;
            this.ActualBandCellRightSeparatorColor = null;
            this.ActualBandHeaderRightSeparatorColor = null;
            this.ActualBandCellLeftSeparatorColor = null;
            this.ActualBandHeaderLeftSeparatorColor = null;
            return false;
        }

        protected void OnBandSeparatorChangedCore()
        {
            this.OnBandSeparatorChanged();
            if (this.View != null)
            {
                this.View.RebuildColumns();
            }
        }

        protected virtual void OnCellToolTipBindingChanged()
        {
        }

        protected virtual void OnFixedChanged()
        {
            if (!this.IsServiceColumn())
            {
                this.OnPropertyChanged();
                this.RaiseContentChanged(FixedProperty);
            }
        }

        protected virtual void OnHasLeftSiblingChanged()
        {
            this.RaiseContentChanged(HasLeftSiblingProperty);
        }

        protected virtual void OnHasRightSiblingChanged()
        {
            this.RaiseContentChanged(HasRightSiblingProperty);
        }

        private static void OnHeaderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            ((BaseColumn) d).SetHeaderCaption();
        }

        private void OnHeaderStyleChanged(DependencyPropertyChangedEventArgs e)
        {
            this.UpdateActualHeaderStyle();
            this.RaiseContentChanged(HeaderStyleProperty);
        }

        private void OnImageAlignmentChanged()
        {
            this.RaiseContentChanged(ImageAlignmentProperty);
        }

        private void OnImageChanged()
        {
            this.RaiseContentChanged(ImageProperty);
        }

        protected virtual void OnLayoutPropertyChanged()
        {
        }

        private static object OnMinWidthChanging(DependencyObject d, object value) => 
            (((double) value) >= 5.0) ? value : 5.0;

        protected void OnPropertyChanged()
        {
            if (this.ResizeOwner != null)
            {
                this.ResizeOwner.CalcColumnsLayout();
                this.ResizeOwner.UpdateContentLayout();
            }
        }

        protected override void OnPropertyChanged(DependencyPropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            DataControlBase notifySourceControl = this.GetNotifySourceControl();
            if ((notifySourceControl != null) && !notifySourceControl.LockUpdateLayout)
            {
                Func<DataControlBase, DependencyObject> getTarget = this.CreateCloneAccessor();
                notifySourceControl.GetDataControlOriginationElement().NotifyPropertyChanged(notifySourceControl, e.Property, getTarget, typeof(BaseColumn));
            }
        }

        protected virtual void OnVisibleChanged()
        {
            base.CoerceValue(HorizontalHeaderContentAlignmentProperty);
            this.UpdateSearchInfo();
            this.OnPropertyChanged();
            this.UpdateScrollBarAnnotations();
        }

        protected virtual void OnVisibleIndexChanged(int oldValue)
        {
            if (this.ResizeOwner != null)
            {
                this.ResizeOwner.ApplyColumnVisibleIndex(this, oldValue);
            }
        }

        private static void OnVisibleIndexChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            BaseColumn column = d as BaseColumn;
            if (column != null)
            {
                column.OnVisibleIndexChanged((int) e.OldValue);
            }
        }

        private void OnWidthChanged()
        {
            this.ActualWidth = this.Width.Value;
            this.ForcedWidth = double.NaN;
            this.OnLayoutPropertyChanged();
        }

        private GridColumnWidth OnWidthChanging(GridColumnWidth value)
        {
            if ((value == this.Width) && ((this.Width.Value != this.ActualWidth) || (this.Width.Value != this.ColumnWidth)))
            {
                this.OnWidthChanged();
            }
            return (!double.IsNaN(value.Value) ? (!value.IsAbsolute ? value : new GridColumnWidth(Math.Min(Math.Max(this.MinWidth, value.Value), this.MaxWidth))) : new GridColumnWidth(120.0));
        }

        internal void OwnerAddedColumn()
        {
            this.SetHeaderCaption();
        }

        protected virtual void ParentBandChanged()
        {
            this.OnBandSeparatorChanged();
        }

        protected void RaiseContentChanged(DependencyProperty property)
        {
            if (this.ContentChanged != null)
            {
                this.ContentChanged(this, new ColumnContentChangedEventArgs(property));
            }
        }

        protected internal void RaiseHasTopElementChanged()
        {
            this.RaiseContentChanged(HasTopElementProperty);
        }

        public static void SetActualCollectionIndex(DependencyObject element, int index)
        {
            if (element == null)
            {
                throw new ArgumentNullException("element");
            }
            element.SetValue(ActualCollectionIndexProperty, index);
        }

        public static void SetActualVisibleIndex(DependencyObject element, int index)
        {
            if (element == null)
            {
                throw new ArgumentNullException("element");
            }
            element.SetValue(ActualVisibleIndexProperty, index);
        }

        protected virtual void SetHeaderCaption()
        {
            base.SetValue(HeaderCaptionPropertyKey, this.GetFormattedHeader());
        }

        public static void SetVisibleIndex(DependencyObject element, int index)
        {
            if (element == null)
            {
                throw new ArgumentNullException("element");
            }
            element.SetValue(VisibleIndexProperty, index);
        }

        internal void UpdateActualAllowMoving()
        {
            this.ActualAllowMoving = DesignerHelper.GetValue(this, this.AllowMoving.GetValue(this.OwnerAllowMoving), true);
        }

        internal void UpdateActualAllowResizing()
        {
            if (this.ResizeOwner != null)
            {
                base.SetValue(ActualAllowResizingPropertyKey, this.GetActualAllowResizing(this.ResizeOwner.AutoWidth));
            }
        }

        protected internal virtual void UpdateActualCellToolTipTemplate()
        {
            this.ActualCellToolTipTemplate = this.CellToolTipTemplate;
        }

        internal virtual void UpdateActualHeaderImageStyle()
        {
            this.ActualHeaderImageStyle = this.HeaderImageStyle;
        }

        internal void UpdateActualHeaderStyle()
        {
            Style headerStyle = this.HeaderStyle;
            Style columnHeaderStyle = headerStyle;
            if (headerStyle == null)
            {
                Style local1 = headerStyle;
                columnHeaderStyle = this.View?.ColumnHeaderStyle;
            }
            this.ActualHeaderStyle = columnHeaderStyle;
        }

        protected internal void UpdateActualHeaderTemplateSelector()
        {
            this.UpdateActualTemplateSelector(ActualHeaderTemplateSelectorPropertyKey, this.GetActualTemplateSelector(), this.GetActualTemplate(), null);
        }

        protected internal virtual void UpdateActualHeaderToolTipTemplate()
        {
            this.ActualHeaderToolTipTemplate = this.HeaderToolTipTemplate;
        }

        protected internal void UpdateActualTemplateSelector(DependencyPropertyKey propertyKey, DataTemplateSelector selector, DataTemplate template, Func<DataTemplateSelector, DataTemplate, DataTemplateSelector> createWrapper = null)
        {
            DataControlOriginationElementHelper.UpdateActualTemplateSelector(this, this.GetOriginationColumn(), propertyKey, selector, template, createWrapper);
        }

        protected void UpdateContentLayout()
        {
            if (this.ResizeOwner != null)
            {
                this.ResizeOwner.UpdateContentLayout();
            }
        }

        protected void UpdateScrollBarAnnotations()
        {
            if (this.View != null)
            {
                this.View.UpdateScrollBarAnnotations();
            }
        }

        protected void UpdateSearchInfo()
        {
            if (this.View != null)
            {
                this.View.UpdateColumnAllowSearchPanel(this);
            }
        }

        internal virtual void UpdateViewInfo(bool updateDataPropertiesOnly = false)
        {
            if (!updateDataPropertiesOnly)
            {
                this.UpdateActualAllowResizing();
                this.UpdateActualAllowMoving();
            }
        }

        protected double ValidateActualSeparatorWidth(double val, bool right = true) => 
            !right ? (this.HasLeftSibling ? val : 0.0) : (this.HasRightSibling ? val : 0.0);

        [Description("Gets or sets the column name."), XtraSerializableProperty, XtraResetProperty(ResetPropertyMode.None), GridStoreAlwaysProperty]
        public string Name
        {
            get => 
                base.Name;
            set => 
                base.Name = value;
        }

        [Description("Gets or sets the column header's content. This is a dependency property."), Category("Data"), TypeConverter(typeof(ObjectConverter)), XtraSerializableProperty]
        public object Header
        {
            get => 
                base.GetValue(HeaderProperty);
            set => 
                base.SetValue(HeaderProperty, value);
        }

        [Description("Gets the column header's caption. This is a dependency property.")]
        public object HeaderCaption =>
            base.GetValue(HeaderCaptionProperty);

        [Category("Appearance ")]
        public ImageSource Image
        {
            get => 
                (ImageSource) base.GetValue(ImageProperty);
            set => 
                base.SetValue(ImageProperty, value);
        }

        [Category("Appearance ")]
        public StringAlignment ImageAlignment
        {
            get => 
                (StringAlignment) base.GetValue(ImageAlignmentProperty);
            set => 
                base.SetValue(ImageAlignmentProperty, value);
        }

        [Description("Gets or sets the template that defines the column header's presentation. This is a dependency property."), Category("Appearance ")]
        public DataTemplate HeaderTemplate
        {
            get => 
                (DataTemplate) base.GetValue(HeaderTemplateProperty);
            set => 
                base.SetValue(HeaderTemplateProperty, value);
        }

        [Description("Gets or sets an object that chooses a column header template based on custom logic. This is a dependency property."), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Category("Appearance ")]
        public DataTemplateSelector HeaderTemplateSelector
        {
            get => 
                (DataTemplateSelector) base.GetValue(HeaderTemplateSelectorProperty);
            set => 
                base.SetValue(HeaderTemplateSelectorProperty, value);
        }

        [Description("Gets the actual template selector that chooses a header template based on custom logic. This is a dependency property.")]
        public DataTemplateSelector ActualHeaderTemplateSelector =>
            (DataTemplateSelector) base.GetValue(ActualHeaderTemplateSelectorProperty);

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), CloneDetailMode(CloneDetailMode.Skip)]
        public bool AllowSearchHeaderHighlighting
        {
            get => 
                (bool) base.GetValue(AllowSearchHeaderHighlightingProperty);
            set => 
                base.SetValue(AllowSearchHeaderHighlightingProperty, value);
        }

        [Description("Gets or sets the column header's tooltip. This is a dependency property."), Category("Data"), XtraSerializableProperty]
        public object HeaderToolTip
        {
            get => 
                base.GetValue(HeaderToolTipProperty);
            set => 
                base.SetValue(HeaderToolTipProperty, value);
        }

        [Description("Gets or sets the template that defines the tooltip's presentation. This is a dependency property."), Category("Appearance ")]
        public DataTemplate HeaderToolTipTemplate
        {
            get => 
                (DataTemplate) base.GetValue(HeaderToolTipTemplateProperty);
            set => 
                base.SetValue(HeaderToolTipTemplateProperty, value);
        }

        [Description("Gets or sets the actual template that defines the tooltip's presentation. This is a dependency property.")]
        public DataTemplate ActualHeaderToolTipTemplate
        {
            get => 
                (DataTemplate) base.GetValue(ActualHeaderToolTipTemplateProperty);
            internal set => 
                base.SetValue(ActualHeaderToolTipTemplatePropertyKey, value);
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), CloneDetailMode(CloneDetailMode.Skip)]
        public DevExpress.Xpf.Grid.ColumnPosition ColumnPosition
        {
            get => 
                (DevExpress.Xpf.Grid.ColumnPosition) base.GetValue(ColumnPositionProperty);
            set => 
                base.SetValue(ColumnPositionProperty, value);
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), CloneDetailMode(CloneDetailMode.Skip)]
        public bool HasTopElement
        {
            get => 
                (bool) base.GetValue(HasTopElementProperty);
            set => 
                base.SetValue(HasTopElementProperty, value);
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), CloneDetailMode(CloneDetailMode.Skip)]
        public bool HasBottomElement
        {
            get => 
                (bool) base.GetValue(HasBottomElementProperty);
            set => 
                base.SetValue(HasBottomElementProperty, value);
        }

        [Description("Gets or sets whether to display the column within a View. This is a dependency property."), Category("Layout"), XtraSerializableProperty, GridUIProperty]
        public bool Visible
        {
            get => 
                (bool) base.GetValue(VisibleProperty);
            set => 
                base.SetValue(VisibleProperty, value);
        }

        [Category("Appearance Print")]
        public bool AllowPrinting
        {
            get => 
                (bool) base.GetValue(AllowPrintingProperty);
            set => 
                base.SetValue(AllowPrintingProperty, value);
        }

        [Browsable(false), XtraSerializableProperty, XtraResetProperty(ResetPropertyMode.None), GridUIProperty]
        public int VisibleIndex
        {
            get => 
                GetVisibleIndex(this);
            set => 
                SetVisibleIndex(this, value);
        }

        [Browsable(false)]
        public int ActualVisibleIndex
        {
            get => 
                GetActualVisibleIndex(this);
            set => 
                SetActualVisibleIndex(this, value);
        }

        [Description("Gets or sets the column header's content alignment. This is a dependency property."), Category("Layout")]
        public HorizontalAlignment HorizontalHeaderContentAlignment
        {
            get => 
                (HorizontalAlignment) base.GetValue(HorizontalHeaderContentAlignmentProperty);
            set => 
                base.SetValue(HorizontalHeaderContentAlignmentProperty, value);
        }

        [Description("Gets or sets whether the column/band is fixed. This is a dependency property."), Category("Layout"), XtraSerializableProperty, GridUIProperty]
        public FixedStyle Fixed
        {
            get => 
                (FixedStyle) base.GetValue(FixedProperty);
            set => 
                base.SetValue(FixedProperty, value);
        }

        [Description("Gets or sets whether the column's width remains the same when the auto column width feature is enabled. This is a dependency property."), DefaultValue(false), Category("Layout"), XtraSerializableProperty, XtraResetProperty]
        public bool FixedWidth
        {
            get => 
                (bool) base.GetValue(FixedWidthProperty);
            set => 
                base.SetValue(FixedWidthProperty, value);
        }

        [Description("Gets or sets the column's minimum width. This is a dependency property."), TypeConverter(typeof(LengthConverter)), Category("Layout"), XtraSerializableProperty]
        public double MinWidth
        {
            get => 
                (double) base.GetValue(MinWidthProperty);
            set => 
                base.SetValue(MinWidthProperty, value);
        }

        [Description("Gets the column's width. This is a dependency property."), XtraSerializableProperty(0x7fffffff), GridUIProperty, XtraResetProperty(ResetPropertyMode.None), CloneDetailMode(CloneDetailMode.Force)]
        public double ActualWidth
        {
            get => 
                (double) base.GetValue(ActualWidthProperty);
            internal set => 
                base.SetValue(ActualWidthPropertyKey, value);
        }

        internal double ForcedWidth { get; set; }

        [Description("Gets the column header's width. This is a dependency property."), CloneDetailMode(CloneDetailMode.Force)]
        public double ActualHeaderWidth
        {
            get => 
                (double) base.GetValue(ActualHeaderWidthProperty);
            internal set => 
                base.SetValue(ActualHeaderWidthPropertyKey, value);
        }

        internal double HeaderWidth { get; set; }

        internal double ColumnWidth { get; set; }

        [Description("Gets or sets the column's width. This is a dependency property."), Category("Layout"), XtraSerializableProperty(0x7ffffffe), GridUIProperty]
        public GridColumnWidth Width
        {
            get => 
                (GridColumnWidth) base.GetValue(WidthProperty);
            set => 
                base.SetValue(WidthProperty, value);
        }

        [Description("Gets or sets the column's maximum width."), Category("Layout"), XtraSerializableProperty]
        public double MaxWidth
        {
            get => 
                (double) base.GetValue(MaxWidthProperty);
            set => 
                base.SetValue(MaxWidthProperty, value);
        }

        [Browsable(false), CloneDetailMode(CloneDetailMode.Skip)]
        public bool HasRightSibling
        {
            get => 
                (bool) base.GetValue(HasRightSiblingProperty);
            set => 
                base.SetValue(HasRightSiblingProperty, value);
        }

        [Browsable(false), CloneDetailMode(CloneDetailMode.Skip)]
        public bool HasLeftSibling
        {
            get => 
                (bool) base.GetValue(HasLeftSiblingProperty);
            set => 
                base.SetValue(HasLeftSiblingProperty, value);
        }

        [Description("Gets or sets whether an end-user can resize this column. This is a dependency property."), Category("Layout"), XtraSerializableProperty]
        public DefaultBoolean AllowResizing
        {
            get => 
                (DefaultBoolean) base.GetValue(AllowResizingProperty);
            set => 
                base.SetValue(AllowResizingProperty, value);
        }

        [Description("Gets whether an end-user can resize this column. This is a dependency property.")]
        public bool ActualAllowResizing =>
            (bool) base.GetValue(ActualAllowResizingProperty);

        [Description(""), Category("Layout"), XtraSerializableProperty]
        public DefaultBoolean AllowMoving
        {
            get => 
                (DefaultBoolean) base.GetValue(AllowMovingProperty);
            set => 
                base.SetValue(AllowMovingProperty, value);
        }

        [Description("")]
        public bool ActualAllowMoving
        {
            get => 
                (bool) base.GetValue(ActualAllowMovingProperty);
            private set => 
                base.SetValue(ActualAllowMovingPropertyKey, value);
        }

        public bool IsAutoGenerated
        {
            get => 
                (bool) base.GetValue(IsAutoGeneratedProperty);
            internal set => 
                base.SetValue(IsAutoGeneratedPropertyKey, value);
        }

        [CloneDetailMode(CloneDetailMode.Skip)]
        public BandBase ParentBand
        {
            get => 
                (BandBase) base.GetValue(ParentBandProperty);
            internal set => 
                base.SetValue(ParentBandPropertyKey, value);
        }

        [Description("Gets or sets a style applied to the column's header. This is a dependency property."), Category("Appearance ")]
        public Style HeaderStyle
        {
            get => 
                (Style) base.GetValue(HeaderStyleProperty);
            set => 
                base.SetValue(HeaderStyleProperty, value);
        }

        [Description("Gets an actual style applied to the column's header. This is a dependency property."), Category("Appearance ")]
        public Style ActualHeaderStyle
        {
            get => 
                (Style) base.GetValue(ActualHeaderStyleProperty);
            internal set => 
                base.SetValue(ActualHeaderStylePropertyKey, value);
        }

        [Category("Appearance ")]
        public Style HeaderImageStyle
        {
            get => 
                (Style) base.GetValue(HeaderImageStyleProperty);
            set => 
                base.SetValue(HeaderImageStyleProperty, value);
        }

        [Description(""), DefaultValue((string) null), Category("Appearance ")]
        public BindingBase CellToolTipBinding
        {
            get => 
                this.cellToolTipBinding;
            set
            {
                if (!ReferenceEquals(this.cellToolTipBinding, value))
                {
                    this.cellToolTipBinding = value;
                    this.OnCellToolTipBindingChanged();
                }
            }
        }

        [Description("Gets the actual cell tooltip template applied to the current column. This is a dependency property.")]
        public DataTemplate ActualCellToolTipTemplate
        {
            get => 
                (DataTemplate) base.GetValue(ActualCellToolTipTemplateProperty);
            internal set => 
                base.SetValue(ActualCellToolTipTemplatePropertyKey, value);
        }

        [Description("Gets or sets the template that defines the cell tooltips's appearance. This is a dependency property."), Category("Appearance ")]
        public DataTemplate CellToolTipTemplate
        {
            get => 
                (DataTemplate) base.GetValue(CellToolTipTemplateProperty);
            set => 
                base.SetValue(CellToolTipTemplateProperty, value);
        }

        [Description("Gets the actual width of the band's right separator. This is a dependency property.")]
        public double ActualBandRightSeparatorWidth
        {
            get => 
                (double) base.GetValue(ActualBandRightSeparatorWidthProperty);
            internal set => 
                base.SetValue(ActualBandRightSeparatorWidthPropertyKey, value);
        }

        [Description("Gets the actual width of the band's left separator. This is a dependency property.")]
        public double ActualBandLeftSeparatorWidth
        {
            get => 
                (double) base.GetValue(ActualBandLeftSeparatorWidthProperty);
            internal set => 
                base.SetValue(ActualBandLeftSeparatorWidthPropertyKey, value);
        }

        [Description("Gets an actual color of the right band separator. This is a dependency property.")]
        public System.Windows.Media.Brush ActualBandCellRightSeparatorColor
        {
            get => 
                (System.Windows.Media.Brush) base.GetValue(ActualBandCellRightSeparatorColorProperty);
            internal set => 
                base.SetValue(ActualBandCellRightSeparatorColorPropertyKey, value);
        }

        [Description("Gets an actual color of the band header's right separator. This is a dependency property.")]
        public System.Windows.Media.Brush ActualBandHeaderRightSeparatorColor
        {
            get => 
                (System.Windows.Media.Brush) base.GetValue(ActualBandHeaderRightSeparatorColorProperty);
            internal set => 
                base.SetValue(ActualBandHeaderRightSeparatorColorPropertyKey, value);
        }

        [Description("Gets an actual color of the left band separator. This is a dependency property.")]
        public System.Windows.Media.Brush ActualBandCellLeftSeparatorColor
        {
            get => 
                (System.Windows.Media.Brush) base.GetValue(ActualBandCellLeftSeparatorColorProperty);
            internal set => 
                base.SetValue(ActualBandCellLeftSeparatorColorPropertyKey, value);
        }

        [Description("Gets an actual color of the band header's left separator. This is a dependency property.")]
        public System.Windows.Media.Brush ActualBandHeaderLeftSeparatorColor
        {
            get => 
                (System.Windows.Media.Brush) base.GetValue(ActualBandHeaderLeftSeparatorColorProperty);
            internal set => 
                base.SetValue(ActualBandHeaderLeftSeparatorColorPropertyKey, value);
        }

        [Description("Gets or sets whether it is allowed to calculate an optimal width and apply it to the column."), Category("BestFit"), XtraSerializableProperty]
        public DefaultBoolean AllowBestFit
        {
            get => 
                (DefaultBoolean) base.GetValue(AllowBestFitProperty);
            set => 
                base.SetValue(AllowBestFitProperty, value);
        }

        [Description("Gets or sets the column's width when the Best Fit feature is applied to this column."), Category("BestFit"), XtraSerializableProperty]
        public double BestFitWidth
        {
            get => 
                (double) base.GetValue(BestFitWidthProperty);
            set => 
                base.SetValue(BestFitWidthProperty, value);
        }

        internal Style ActualHeaderImageStyle
        {
            get => 
                this.actualHeaderImageStyleCore;
            set
            {
                if (!ReferenceEquals(this.actualHeaderImageStyleCore, value))
                {
                    this.actualHeaderImageStyleCore = value;
                    this.OnImageChanged();
                }
            }
        }

        protected internal virtual IColumnOwnerBase ResizeOwner =>
            null;

        [Description("Gets the view that owns the column. This is a dependency property.")]
        public DataViewBase View =>
            this.ResizeOwner as DataViewBase;

        protected internal virtual bool ActualAllowGroupingCore =>
            false;

        protected virtual bool OwnerAllowResizing =>
            this.ResizeOwner.AllowResizing;

        protected virtual bool OwnerAllowMoving =>
            this.ResizeOwner.AllowColumnMoving;

        internal abstract BandBase ParentBandInternal { get; }

        internal DevExpress.Xpf.Grid.BandRow BandRow { get; set; }

        protected internal virtual bool CanStartDragSingleColumn =>
            (this.View != null) && ((this.View.DataControl != null) && (((this.View.DataControl.BandsLayoutCore == null) || !this.View.DataControl.BandsLayoutCore.ShowBandsPanel) ? (!this.View.IsLastVisibleColumn(this) || this.View.CanStartDragSingleColumn()) : true));

        protected internal virtual bool IsBand =>
            false;

        protected internal virtual bool AllowChangeParent =>
            this.View.DataControl.BandsLayoutCore.AllowChangeColumnParent;

        internal double ActualBandRightSeparatorWidthCore { get; private set; }

        internal double ActualBandLeftSeparatorWidthCore { get; private set; }

        internal System.Windows.Media.Brush ActualBandCellRightSeparatorColorCore { get; private set; }

        internal System.Windows.Media.Brush ActualBandHeaderRightSeparatorColorCore { get; private set; }

        internal System.Windows.Media.Brush ActualBandCellLeftSeparatorColorCore { get; private set; }

        internal System.Windows.Media.Brush ActualBandHeaderLeftSeparatorColorCore { get; private set; }

        private double OldActualBandRightSeparatorWidth { get; set; }

        private double OldActualBandLeftSeparatorWidth { get; set; }

        [Serializable, CompilerGenerated]
        private sealed class <>c
        {
            public static readonly BaseColumn.<>c <>9 = new BaseColumn.<>c();
            public static UpdateRowDataDelegate <>9__260_0;

            internal void <.cctor>b__68_0(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).HeaderCaptionChanged();
            }

            internal void <.cctor>b__68_1(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnImageChanged();
            }

            internal void <.cctor>b__68_10(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).RaiseHasTopElementChanged();
            }

            internal void <.cctor>b__68_11(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).RaiseContentChanged(BaseColumn.HasBottomElementProperty);
            }

            internal void <.cctor>b__68_12(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnVisibleChanged();
            }

            internal void <.cctor>b__68_13(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnHasRightSiblingChanged();
            }

            internal void <.cctor>b__68_14(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnHasLeftSiblingChanged();
            }

            internal void <.cctor>b__68_15(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnLayoutPropertyChanged();
            }

            internal void <.cctor>b__68_16(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnLayoutPropertyChanged();
            }

            internal void <.cctor>b__68_17(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnActualHeaderWidthChanged();
            }

            internal object <.cctor>b__68_18(DependencyObject d, object baseValue) => 
                Math.Max(0.0, (double) baseValue);

            internal void <.cctor>b__68_19(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnWidthChanged();
            }

            internal void <.cctor>b__68_2(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnImageAlignmentChanged();
            }

            internal object <.cctor>b__68_20(DependencyObject d, object e) => 
                ((BaseColumn) d).OnWidthChanging((GridColumnWidth) e);

            internal void <.cctor>b__68_21(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnLayoutPropertyChanged();
            }

            internal void <.cctor>b__68_22(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnLayoutPropertyChanged();
            }

            internal void <.cctor>b__68_23(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).RaiseContentChanged(BaseColumn.ActualAllowResizingProperty);
            }

            internal void <.cctor>b__68_24(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).UpdateActualAllowMoving();
            }

            internal void <.cctor>b__68_25(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).RaiseContentChanged(BaseColumn.HorizontalHeaderContentAlignmentProperty);
            }

            internal void <.cctor>b__68_26(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnFixedChanged();
            }

            internal void <.cctor>b__68_27(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).ParentBandChanged();
            }

            internal void <.cctor>b__68_28(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnAllowSearchHeaderHighlightingChanged();
            }

            internal void <.cctor>b__68_29(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnHeaderStyleChanged(e);
            }

            internal void <.cctor>b__68_3(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).UpdateActualHeaderTemplateSelector();
            }

            internal void <.cctor>b__68_30(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnActualHeaderStyleChanged(e);
            }

            internal void <.cctor>b__68_31(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).UpdateActualCellToolTipTemplate();
            }

            internal void <.cctor>b__68_32(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).RaiseContentChanged(BaseColumn.ActualCellToolTipTemplateProperty);
            }

            internal void <.cctor>b__68_33(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).UpdateActualHeaderImageStyle();
            }

            internal void <.cctor>b__68_34(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnActualBandRightSeparatorWidthChanged((double) e.NewValue);
            }

            internal void <.cctor>b__68_35(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnActualBandLeftSeparatorWidthChanged((double) e.NewValue);
            }

            internal void <.cctor>b__68_36(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnActualBandCellRightSeparatorColorChanged((System.Windows.Media.Brush) e.NewValue);
            }

            internal void <.cctor>b__68_37(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnActualBandHeaderRightSeparatorColorChanged((System.Windows.Media.Brush) e.NewValue);
            }

            internal void <.cctor>b__68_38(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnActualBandCellLeftSeparatorColorChanged((System.Windows.Media.Brush) e.NewValue);
            }

            internal void <.cctor>b__68_39(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).OnActualBandHeaderLeftSeparatorColorChanged((System.Windows.Media.Brush) e.NewValue);
            }

            internal void <.cctor>b__68_4(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).UpdateActualHeaderTemplateSelector();
            }

            internal object <.cctor>b__68_40(DependencyObject d, object baseValue) => 
                BaseColumn.CoerceBestFitWidth(Convert.ToDouble(baseValue));

            internal void <.cctor>b__68_5(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).RaiseContentChanged(BaseColumn.ActualHeaderTemplateSelectorProperty);
            }

            internal void <.cctor>b__68_6(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).RaiseContentChanged(BaseColumn.HeaderToolTipProperty);
            }

            internal void <.cctor>b__68_7(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).UpdateActualHeaderToolTipTemplate();
            }

            internal void <.cctor>b__68_8(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).RaiseContentChanged(BaseColumn.ActualHeaderToolTipTemplateProperty);
            }

            internal void <.cctor>b__68_9(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((BaseColumn) d).RaiseContentChanged(BaseColumn.ColumnPositionProperty);
            }

            internal void <OnActualHeaderWidthChanged>b__260_0(RowData data)
            {
                data.OnActualHeaderWidthChange();
            }
        }
    }
}

