namespace DevExpress.Xpf.Grid
{
    using DevExpress.Data;
    using DevExpress.Data.Filtering;
    using DevExpress.Data.Filtering.Helpers;
    using DevExpress.Data.Helpers;
    using DevExpress.Data.Utils;
    using DevExpress.Entity.Model;
    using DevExpress.Mvvm;
    using DevExpress.Mvvm.Native;
    using DevExpress.Mvvm.UI.ModuleInjection;
    using DevExpress.Mvvm.UI.Native.ViewGenerator;
    using DevExpress.Mvvm.UI.Native.ViewGenerator.Model;
    using DevExpress.Utils;
    using DevExpress.Utils.Serializing;
    using DevExpress.Utils.Serializing.Helpers;
    using DevExpress.Xpf.Core;
    using DevExpress.Xpf.Core.ConditionalFormatting;
    using DevExpress.Xpf.Core.ConditionalFormatting.Native;
    using DevExpress.Xpf.Core.DragDrop.Native;
    using DevExpress.Xpf.Core.FilteringUI;
    using DevExpress.Xpf.Core.FilteringUI.Native;
    using DevExpress.Xpf.Core.Native;
    using DevExpress.Xpf.Core.Serialization;
    using DevExpress.Xpf.Data;
    using DevExpress.Xpf.Editors.Filtering;
    using DevExpress.Xpf.Editors.Helpers;
    using DevExpress.Xpf.Editors.Settings;
    using DevExpress.Xpf.Grid.Automation;
    using DevExpress.Xpf.Grid.Core.Native;
    using DevExpress.Xpf.Grid.Native;
    using DevExpress.Xpf.GridData;
    using DevExpress.Xpf.Utils;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Collections.Specialized;
    using System.ComponentModel;
    using System.Data;
    using System.IO;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Threading;
    using System.Threading.Tasks;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Data;
    using System.Windows.Input;
    using System.Windows.Markup;

    [DefaultBindingProperty("ItemsSource"), ComplexBindingProperties("ItemsSource"), ContentProperty("Columns")]
    public abstract class DataControlBase : Control, IValidationAttributeOwner, INotificationManager, INotifyPropertyChanged, IDXFilterable, IDXDomainDataSourceSupport, IDispalyMemberBindingClient, IEventArgsConverterSource, IWeakEventListener, IDataControllerOwner, ICollectionOwner
    {
        internal static readonly ColumnSortOrder defaultColumnSortOrder = ColumnSortOrder.Ascending;
        public const int InvalidRowHandle = -2147483648;
        public const int InvalidRowIndex = -1;
        public const int AutoFilterRowHandle = -2147483645;
        public const int NewItemRowHandle = -2147483647;
        internal const int LoadingRowHandle = -2147483646;
        public static bool AllowInfiniteGridSize = false;
        public static readonly DependencyProperty ItemsSourceProperty;
        public static readonly DependencyProperty CurrentViewProperty;
        public static readonly DependencyProperty CurrentViewChangedListenerProperty;
        public static readonly DependencyProperty AllowLiveDataShapingProperty;
        public static readonly DependencyProperty ActiveViewProperty;
        private static readonly DependencyPropertyKey ActiveFilterInfoPropertyKey;
        public static readonly DependencyProperty ActiveFilterInfoProperty;
        public static readonly DependencyProperty AllowMRUFilterListProperty;
        public static readonly DependencyProperty MRUFilterListCountProperty;
        public static readonly DependencyProperty AllowColumnMRUFilterListProperty;
        public static readonly DependencyProperty MRUColumnFilterListCountProperty;
        internal const string FilterCriteriaPropertyName = "FilterCriteria";
        public static readonly DependencyProperty FilterCriteriaProperty;
        public static readonly DependencyProperty FixedFilterProperty;
        public static readonly DependencyProperty FilterStringProperty;
        public static readonly DependencyProperty IsFilterEnabledProperty;
        public static readonly DependencyProperty AutoPopulateColumnsProperty;
        public static readonly DependencyProperty AutoGenerateColumnsProperty;
        public static readonly DependencyProperty EnableSmartColumnsGenerationProperty;
        public static readonly DependencyProperty ShowBorderProperty;
        public static readonly DependencyProperty DefaultSortingProperty;
        public static readonly RoutedEvent ItemsSourceChangedEvent;
        public static readonly RoutedEvent FilterChangedEvent;
        public static readonly RoutedEvent FilterGroupSortChangingEvent;
        public static readonly RoutedEvent ColumnsPopulatedEvent;
        public static readonly RoutedEvent AutoGeneratingColumnEvent;
        public static readonly RoutedEvent AutoGeneratedColumnsEvent;
        public static readonly RoutedEvent CustomUniqueValuesEvent;
        public static readonly DependencyProperty ShowLoadingPanelProperty;
        public static readonly DependencyProperty DesignTimeShowSampleDataProperty;
        public static readonly DependencyProperty DesignTimeUseDistinctSampleValuesProperty;
        public static readonly DependencyProperty DesignTimeDataSourceRowCountProperty;
        public static readonly DependencyProperty DesignTimeDataObjectTypeProperty;
        public static readonly DependencyProperty ColumnGeneratorStyleProperty;
        public static readonly DependencyProperty ColumnGeneratorTemplateProperty;
        public static readonly DependencyProperty ColumnGeneratorTemplateSelectorProperty;
        [IgnoreDependencyPropertiesConsistencyChecker]
        private static readonly DependencyProperty ColumnsItemsAttachedBehaviorProperty;
        public static readonly DependencyProperty ColumnsSourceProperty;
        public static readonly DependencyProperty TotalSummaryGeneratorTemplateProperty;
        [IgnoreDependencyPropertiesConsistencyChecker]
        private static readonly DependencyProperty TotalSummaryItemsAttachedBehaviorProperty;
        public static readonly DependencyProperty TotalSummarySourceProperty;
        private static readonly DependencyPropertyKey OwnerDetailDescriptorPropertyKey;
        public static readonly DependencyProperty OwnerDetailDescriptorProperty;
        public static readonly DependencyProperty ShowAllTableValuesInCheckedFilterPopupProperty;
        public static readonly DependencyProperty ShowAllTableValuesInFilterPopupProperty;
        public static readonly DependencyProperty CurrentItemProperty;
        public static readonly DependencyProperty CurrentColumnProperty;
        public static readonly DependencyProperty CurrentCellValueProperty;
        public static readonly DependencyProperty SelectedItemProperty;
        public static readonly DependencyProperty SelectedItemsProperty;
        public static readonly DependencyProperty SelectionModeProperty;
        public static readonly DependencyProperty AllowUpdateTwoWayBoundPropertiesOnSynchronizationProperty;
        public static readonly DependencyProperty ImplyNullLikeEmptyStringWhenFilteringProperty;
        public static readonly DependencyProperty UseFieldNameForSerializationProperty;
        public static readonly DependencyProperty ClipboardCopyModeProperty;
        public static readonly RoutedEvent PastingFromClipboardEvent;
        public static readonly RoutedEvent CurrentItemChangedEvent;
        public static readonly RoutedEvent SelectedItemChangedEvent;
        public static readonly RoutedEvent CurrentColumnChangedEvent;
        public static readonly DependencyProperty BandsSourceProperty;
        [IgnoreDependencyPropertiesConsistencyChecker]
        private static readonly DependencyProperty BandsItemsAttachedBehaviorProperty;
        public static readonly DependencyProperty BandGeneratorTemplateProperty;
        public static readonly DependencyProperty BandGeneratorTemplateSelectorProperty;
        public static readonly DependencyProperty BandGeneratorStyleProperty;
        public static readonly DependencyProperty AllowInitiallyFocusedRowProperty;
        public static readonly DependencyProperty DetectNestedPropertyChangesProperty;
        internal Locker BandsSourceChangedLocker = new Locker();
        internal Locker BandsSourceSyncLocker = new Locker();
        internal Locker lockBandsSourceUpdate = new Locker();
        private ContentControl themeLoader;
        private bool isUnloaded;
        internal Locker updateSortIndexesLocker = new Locker();
        internal Locker syncronizationLocker = new Locker();
        private int loadingCount;
        private IColumnCollection columns;
        protected DevExpress.Xpf.Data.DataProviderBase fDataProvider;
        private CriteriaOperator extraFilter;
        internal DevExpress.Xpf.Grid.Automation.LogicalPeerCache logicalPeerCache;
        private PeerCacheBase peerCache;
        private DataControlAutomationPeer peer;
        internal Locker dataResetLocker = new Locker();
        private bool isLoaded;
        private readonly EndInitPostponedAction rebuildSortInfoPostponedAction;
        private readonly EndInitPostponedAction rePopulateColumnsPostponedAction;
        internal readonly Locker DataSourceChangingLocker = new Locker();
        internal int countColumnFilteringTrue;
        internal int countColumnCellMerge;
        internal int countColumnInstantFeedback;
        private ObservableCollectionCore<GridSortInfo> actualSortInfoCore;
        private ReadOnlyGridSortInfoCollection actualSortInfo;
        private readonly SortInfoCollectionBase sortInfoCore;
        private ISummaryItemOwner totalSummary;
        private ISummaryItemOwner groupSummary;
        private LockedPostponedAction updateFocusedRowDataposponedAction;
        private bool lockUpdateLayout;
        private readonly NamePropertyChangeListener namePropertyChangeListener;
        protected internal Locker CurrentItemChangedLocker = new Locker();
        internal DataViewBase viewCore;
        private IDataControlParent dataControlParent;
        private IDataControlOwner dataControlOwner;
        private readonly IDictionary<string, GridSortInfo> invalidSortCache = new Dictionary<string, GridSortInfo>();
        private readonly IDictionary<string, PropertyGroupDescription> invalidGroupCache = new Dictionary<string, PropertyGroupDescription>();
        internal readonly Locker UpdateGroupRowCheckedLocker = new Locker();
        private IList<NodeDefinition> nodeDefinitions;
        private bool scrollOffsetIsImmediate;
        private int offsetCorrection;
        private readonly Locker endInitLocker = new Locker();
        internal Locker RepopuateColumnLocker = new Locker();
        protected internal readonly Locker FilterCriteriaChangedLocker = new Locker();
        private Locker filterSortEventLocker = new Locker();
        private Locker updateDataSourceLocker = new Locker();
        internal Locker SortUpdateLocker = new Locker();
        internal bool needsDataReset;
        private bool doUnboundChangedOnColumnsEndUpdate;
        private INotificationManager internalNotificationManager;
        private IDesignTimeAdornerBase designTimeAdorner;
        private readonly string[] WcfSources = new string[] { "WcfServerModeSource", "WcfInstantFeedbackSource", "RiaInstantFeedbackSource" };
        private bool shouldRestoreUseFieldNameForSerialization;
        private bool oldUseFieldNameForSerialization;
        private BandsLayoutBase bandsLayoutCore;
        private IBandsCollection bandsCore;
        private CollectionChangedWeakEventHandler<DataControlBase> collectionChangedHandler;
        private ListChangedWeakEventHandler<DataControlBase> listChangedHandler;
        private Locker designColumnMoverLocker = new Locker();
        private readonly Locker restoreLayoutLocker = new Locker();
        private bool? restoreLayoutCurrentRowIsNull;
        private MasterDetailProviderBase masterDetailProvider = NullDetailProvider.Instance;
        private List<DataControlBase> detailClones = new List<DataControlBase>();
        internal Locker syncPropertyLocker = new Locker();
        private Locker cloneDetailLocker = new Locker();
        private IDataControlOriginationElement dataControlOriginationElement;
        private readonly EventArgsConverter eventArgsConverter;
        private GridPropertySchemeController propertySchemeController;
        private FilteringUIContext _FilteringContext;

        [Category("Events")]
        public event RoutedEventHandler AutoGeneratedColumns
        {
            add
            {
                base.AddHandler(AutoGeneratedColumnsEvent, value);
            }
            remove
            {
                base.RemoveHandler(AutoGeneratedColumnsEvent, value);
            }
        }

        [Category("Events")]
        public event AutoGeneratingColumnEventHandler AutoGeneratingColumn
        {
            add
            {
                base.AddHandler(AutoGeneratingColumnEvent, value);
            }
            remove
            {
                base.RemoveHandler(AutoGeneratingColumnEvent, value);
            }
        }

        [Obsolete("Use the AutoGeneratedColumns event instead"), Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public event RoutedEventHandler ColumnsPopulated
        {
            add
            {
                base.AddHandler(ColumnsPopulatedEvent, value);
            }
            remove
            {
                base.RemoveHandler(ColumnsPopulatedEvent, value);
            }
        }

        public event CurrentColumnChangedEventHandler CurrentColumnChanged
        {
            add
            {
                base.AddHandler(CurrentColumnChangedEvent, value);
            }
            remove
            {
                base.RemoveHandler(CurrentColumnChangedEvent, value);
            }
        }

        public event CurrentItemChangedEventHandler CurrentItemChanged
        {
            add
            {
                base.AddHandler(CurrentItemChangedEvent, value);
            }
            remove
            {
                base.RemoveHandler(CurrentItemChangedEvent, value);
            }
        }

        [Category("Events")]
        public event CustomUniqueValuesEventHandler CustomUniqueValues
        {
            add
            {
                base.AddHandler(CustomUniqueValuesEvent, value);
            }
            remove
            {
                base.RemoveHandler(CustomUniqueValuesEvent, value);
            }
        }

        [Category("Options Filter")]
        public event RoutedEventHandler FilterChanged
        {
            add
            {
                base.AddHandler(FilterChangedEvent, value);
            }
            remove
            {
                base.RemoveHandler(FilterChangedEvent, value);
            }
        }

        [Category("Options Filter")]
        public event FilterGroupSortChangingEventHandler FilterGroupSortChanging
        {
            add
            {
                base.AddHandler(FilterGroupSortChangingEvent, value);
            }
            remove
            {
                base.RemoveHandler(FilterGroupSortChangingEvent, value);
            }
        }

        [Category("Options Behavior")]
        public event ItemsSourceChangedEventHandler ItemsSourceChanged
        {
            add
            {
                base.AddHandler(ItemsSourceChangedEvent, value);
            }
            remove
            {
                base.RemoveHandler(ItemsSourceChangedEvent, value);
            }
        }

        public event PastingFromClipboardEventHandler PastingFromClipboard
        {
            add
            {
                base.AddHandler(PastingFromClipboardEvent, value);
            }
            remove
            {
                base.RemoveHandler(PastingFromClipboardEvent, value);
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public event SelectedItemChangedEventHandler SelectedItemChanged
        {
            add
            {
                base.AddHandler(SelectedItemChangedEvent, value);
            }
            remove
            {
                base.RemoveHandler(SelectedItemChangedEvent, value);
            }
        }

        static DataControlBase()
        {
            DataControlStrategyRegistrator.RegisterDataControlStrategy();
            Type ownerType = typeof(DataControlBase);
            ItemsSourceProperty = DependencyPropertyManager.Register("ItemsSource", typeof(object), ownerType, new FrameworkPropertyMetadata(null, new PropertyChangedCallback(DataControlBase.OnDataSourceChanged)));
            AllowLiveDataShapingProperty = DependencyPropertyManager.Register("AllowLiveDataShaping", typeof(bool?), ownerType, new FrameworkPropertyMetadata(null, (d, e) => ((DataControlBase) d).OnAllowLiveDataShapingChanged()));
            CurrentViewProperty = DependencyPropertyManager.RegisterAttached("CurrentView", typeof(DataViewBase), ownerType, new PropertyMetadata(null, new PropertyChangedCallback(DataControlBase.OnCurrentViewChanged)));
            CurrentViewChangedListenerProperty = DependencyPropertyManager.RegisterAttached("CurrentViewChangedListener", typeof(INotifyCurrentViewChanged), ownerType, new PropertyMetadata(null, new PropertyChangedCallback(DataControlBase.OnCurrentViewChangedListenerChanged)));
            ActiveViewProperty = DependencyPropertyManager.RegisterAttached("ActiveView", typeof(DataViewBase), ownerType, new FrameworkPropertyMetadata(null, FrameworkPropertyMetadataOptions.Inherits));
            ActiveFilterInfoPropertyKey = DependencyPropertyManager.RegisterReadOnly("ActiveFilterInfo", typeof(CriteriaOperatorInfo), ownerType, new FrameworkPropertyMetadata(null));
            ActiveFilterInfoProperty = ActiveFilterInfoPropertyKey.DependencyProperty;
            AllowMRUFilterListProperty = DependencyPropertyManager.Register("AllowMRUFilterList", typeof(bool), ownerType, new PropertyMetadata(true));
            MRUFilterListCountProperty = DependencyPropertyManager.Register("MRUFilterListCount", typeof(int), ownerType, new PropertyMetadata((int) 10, new PropertyChangedCallback(DataControlBase.OnMRUFilterListCountChanged)));
            AllowColumnMRUFilterListProperty = DependencyPropertyManager.Register("AllowColumnMRUFilterList", typeof(bool), ownerType, new PropertyMetadata(true));
            ShowAllTableValuesInFilterPopupProperty = DependencyPropertyManager.Register("ShowAllTableValuesInFilterPopup", typeof(bool), ownerType, new PropertyMetadata(false));
            ShowAllTableValuesInCheckedFilterPopupProperty = DependencyPropertyManager.Register("ShowAllTableValuesInCheckedFilterPopup", typeof(bool), ownerType, new PropertyMetadata(true));
            MRUColumnFilterListCountProperty = DependencyPropertyManager.Register("MRUColumnFilterListCount", typeof(int), ownerType, new PropertyMetadata(5));
            FilterCriteriaProperty = DependencyPropertyManager.Register("FilterCriteria", typeof(CriteriaOperator), ownerType, new PropertyMetadata(null, new PropertyChangedCallback(DataControlBase.OnFilterCriteriaChanged), new CoerceValueCallback(DataControlBase.CoerceFilterCriteria)));
            FixedFilterProperty = DependencyProperty.Register("FixedFilter", typeof(CriteriaOperator), ownerType, new PropertyMetadata(null, new PropertyChangedCallback(DataControlBase.OnFixedFilterChanged), new CoerceValueCallback(DataControlBase.CoerceFixedFilter)));
            FilterStringProperty = DependencyPropertyManager.Register("FilterString", typeof(string), ownerType, new PropertyMetadata(string.Empty, new PropertyChangedCallback(DataControlBase.OnFilterStringChanged), new CoerceValueCallback(DataControlBase.CoerceFilterString)));
            IsFilterEnabledProperty = DependencyPropertyManager.Register("IsFilterEnabled", typeof(bool), ownerType, new PropertyMetadata(true, new PropertyChangedCallback(DataControlBase.OnIsFilterEnabledChanged), new CoerceValueCallback(DataControlBase.CoerceIsFilterEnabled)));
            AutoPopulateColumnsProperty = DependencyPropertyManager.Register("AutoPopulateColumns", typeof(bool), ownerType, new FrameworkPropertyMetadata(false, (d, e) => ((DataControlBase) d).OnAutoPopulateColumnsChanged()));
            AutoGenerateColumnsProperty = DependencyPropertyManager.Register("AutoGenerateColumns", typeof(AutoGenerateColumnsMode), ownerType, new FrameworkPropertyMetadata(AutoGenerateColumnsMode.None, (d, e) => ((DataControlBase) d).OnAutoGenerateColumnsChanged()));
            EnableSmartColumnsGenerationProperty = DependencyPropertyManager.Register("EnableSmartColumnsGeneration", typeof(bool), ownerType, new FrameworkPropertyMetadata(false, (d, e) => ((DataControlBase) d).OnEnableSmartColumnsGenerationChanged()));
            ShowBorderProperty = DependencyPropertyManager.RegisterAttached("ShowBorder", typeof(bool), ownerType, new PropertyMetadata(true));
            ShowLoadingPanelProperty = DependencyPropertyManager.Register("ShowLoadingPanel", typeof(bool), ownerType, new PropertyMetadata(false));
            DefaultSortingProperty = DependencyPropertyManager.Register("DefaultSorting", typeof(string), ownerType, new PropertyMetadata(null, (d, e) => ((DataControlBase) d).OnDefaultSortingChanged()));
            ItemsSourceChangedEvent = EventManager.RegisterRoutedEvent("ItemsSourceChanged", RoutingStrategy.Direct, typeof(ItemsSourceChangedEventHandler), ownerType);
            FilterChangedEvent = EventManager.RegisterRoutedEvent("FilterChanged", RoutingStrategy.Direct, typeof(RoutedEventHandler), ownerType);
            FilterGroupSortChangingEvent = EventManager.RegisterRoutedEvent("FilterGroupSortChanging", RoutingStrategy.Direct, typeof(FilterGroupSortChangingEventHandler), ownerType);
            ColumnsPopulatedEvent = EventManager.RegisterRoutedEvent("ColumnsPopulated", RoutingStrategy.Direct, typeof(RoutedEventHandler), ownerType);
            AutoGeneratingColumnEvent = EventManager.RegisterRoutedEvent("AutoGeneratingColumn", RoutingStrategy.Direct, typeof(AutoGeneratingColumnEventHandler), ownerType);
            AutoGeneratedColumnsEvent = EventManager.RegisterRoutedEvent("AutoGeneratedColumns", RoutingStrategy.Direct, typeof(RoutedEventHandler), ownerType);
            CustomUniqueValuesEvent = EventManager.RegisterRoutedEvent("CustomUniqueValues", RoutingStrategy.Direct, typeof(CustomUniqueValuesEventHandler), ownerType);
            DesignTimeShowSampleDataProperty = DependencyPropertyManager.RegisterAttached("DesignTimeShowSampleData", typeof(bool), ownerType, new PropertyMetadata(true, new PropertyChangedCallback(DataControlBase.OnDesignTimePropertyChanged)));
            DesignTimeUseDistinctSampleValuesProperty = DependencyPropertyManager.RegisterAttached("DesignTimeUseDistinctSampleValues", typeof(bool), ownerType, new PropertyMetadata(true, new PropertyChangedCallback(DataControlBase.OnDesignTimePropertyChanged)));
            DesignTimeDataSourceRowCountProperty = DependencyPropertyManager.RegisterAttached("DesignTimeDataSourceRowCount", typeof(int), ownerType, new PropertyMetadata(2, new PropertyChangedCallback(DataControlBase.OnDesignTimePropertyChanged), (CoerceValueCallback) ((d, baseValue) => ((DataControlBase) d).CoerceDesignTimeDataSourceRowCount((int) baseValue))));
            DesignTimeDataObjectTypeProperty = DependencyPropertyManager.RegisterAttached("DesignTimeDataObjectType", typeof(Type), ownerType, new PropertyMetadata(null, new PropertyChangedCallback(DataControlBase.OnDesignTimePropertyChanged)));
            ColumnGeneratorStyleProperty = DependencyProperty.Register("ColumnGeneratorStyle", typeof(Style), ownerType, new PropertyMetadata(new PropertyChangedCallback(DataControlBase.OnColumnsItemsGeneratorTemplatePropertyChanged)));
            ColumnGeneratorTemplateProperty = DependencyProperty.Register("ColumnGeneratorTemplate", typeof(DataTemplate), ownerType, new PropertyMetadata(new PropertyChangedCallback(DataControlBase.OnColumnsItemsGeneratorTemplatePropertyChanged)));
            ColumnGeneratorTemplateSelectorProperty = DependencyProperty.Register("ColumnGeneratorTemplateSelector", typeof(DataTemplateSelector), ownerType, new PropertyMetadata(new PropertyChangedCallback(DataControlBase.OnColumnsItemsGeneratorTemplatePropertyChanged)));
            ColumnsItemsAttachedBehaviorProperty = DependencyProperty.Register("ColumnsItemsAttachedBehavior", typeof(ItemsAttachedBehaviorCore<DataControlBase, ColumnBase>), ownerType, new PropertyMetadata(null));
            ColumnsSourceProperty = DependencyProperty.Register("ColumnsSource", typeof(IEnumerable), ownerType, new PropertyMetadata((d, e) => OnColumnsSourceChanged(d, e)));
            BandGeneratorStyleProperty = DependencyProperty.Register("BandGeneratorStyle", typeof(Style), ownerType, new PropertyMetadata(new PropertyChangedCallback(DataControlBase.OnBandsItemsGeneratorTemplatePropertyChanged)));
            BandGeneratorTemplateProperty = DependencyProperty.Register("BandGeneratorTemplate", typeof(DataTemplate), ownerType, new PropertyMetadata(new PropertyChangedCallback(DataControlBase.OnBandsItemsGeneratorTemplatePropertyChanged)));
            BandGeneratorTemplateSelectorProperty = DependencyProperty.Register("BandGeneratorTemplateSelector", typeof(DataTemplateSelector), ownerType, new PropertyMetadata(new PropertyChangedCallback(DataControlBase.OnBandsItemsGeneratorTemplatePropertyChanged)));
            BandsItemsAttachedBehaviorProperty = DependencyProperty.Register("BandsItemsAttachedBehavior", typeof(ItemsAttachedBehaviorExtendedLock<DataControlBase, BandBase>), ownerType, new PropertyMetadata(null));
            BandsSourceProperty = DependencyProperty.Register("BandsSource", typeof(IEnumerable), ownerType, new PropertyMetadata((d, e) => OnBandsSourceChanged(d, e)));
            TotalSummaryGeneratorTemplateProperty = DependencyProperty.Register("TotalSummaryGeneratorTemplate", typeof(DataTemplate), ownerType, new PropertyMetadata(new PropertyChangedCallback(DataControlBase.OnTotalSummaryItemsGeneratorTemplatePropertyChanged)));
            TotalSummaryItemsAttachedBehaviorProperty = DependencyProperty.Register("TotalSummaryItemsAttachedBehavior", typeof(ItemsAttachedBehaviorCore<DataControlBase, DevExpress.Xpf.Grid.SummaryItemBase>), ownerType, new PropertyMetadata(null));
            TotalSummarySourceProperty = DependencyProperty.Register("TotalSummarySource", typeof(IEnumerable), ownerType, new PropertyMetadata(delegate (DependencyObject d, DependencyPropertyChangedEventArgs e) {
                Func<DataControlBase, IList> getTargetFunction = <>c.<>9__81_9;
                if (<>c.<>9__81_9 == null)
                {
                    Func<DataControlBase, IList> local1 = <>c.<>9__81_9;
                    getTargetFunction = <>c.<>9__81_9 = grid => grid.TotalSummaryCore;
                }
                ItemsAttachedBehaviorCore<DataControlBase, DevExpress.Xpf.Grid.SummaryItemBase>.OnItemsSourcePropertyChanged(d, e, TotalSummaryItemsAttachedBehaviorProperty, TotalSummaryGeneratorTemplateProperty, null, null, getTargetFunction, <>c.<>9__81_10 ??= grid => grid.CreateSummaryItem(), null, null, null, null, true, true, null, false);
            }));
            OwnerDetailDescriptorPropertyKey = DependencyPropertyManager.RegisterReadOnly("OwnerDetailDescriptor", typeof(DetailDescriptorBase), ownerType, new PropertyMetadata(null));
            OwnerDetailDescriptorProperty = OwnerDetailDescriptorPropertyKey.DependencyProperty;
            CurrentItemProperty = DependencyPropertyManager.Register("CurrentItem", typeof(object), ownerType, new FrameworkPropertyMetadata(null, FrameworkPropertyMetadataOptions.BindsTwoWayByDefault, (d, e) => ((DataControlBase) d).OnCurrentItemChanged(e.OldValue, true), (d, e) => ((DataControlBase) d).CoerceCurrentItem(e)));
            CurrentCellValueProperty = DependencyPropertyManager.Register("CurrentCellValue", typeof(object), ownerType, new FrameworkPropertyMetadata(null));
            CurrentColumnProperty = DependencyPropertyManager.Register("CurrentColumn", typeof(ColumnBase), ownerType, new FrameworkPropertyMetadata(null, (d, e) => ((DataControlBase) d).OnCurrentColumnChanged((GridColumnBase) e.OldValue, (GridColumnBase) e.NewValue), (CoerceValueCallback) ((d, e) => ((DataControlBase) d).CoerceCurrentColumn((GridColumnBase) e))));
            CurrentItemChangedEvent = EventManager.RegisterRoutedEvent("CurrentItemChanged", RoutingStrategy.Direct, typeof(CurrentItemChangedEventHandler), ownerType);
            SelectedItemChangedEvent = EventManager.RegisterRoutedEvent("SelectedItemChanged", RoutingStrategy.Direct, typeof(SelectedItemChangedEventHandler), ownerType);
            CurrentColumnChangedEvent = EventManager.RegisterRoutedEvent("CurrentColumnChanged", RoutingStrategy.Direct, typeof(CurrentColumnChangedEventHandler), ownerType);
            SelectedItemsProperty = DependencyPropertyManager.Register("SelectedItems", typeof(IList), ownerType, new PropertyMetadata(null, (d, e) => ((DataControlBase) d).OnSelectedItemsChanged((IList) e.OldValue)));
            SelectedItemProperty = DependencyPropertyManager.Register("SelectedItem", typeof(object), ownerType, new FrameworkPropertyMetadata(null, FrameworkPropertyMetadataOptions.BindsTwoWayByDefault, (d, e) => ((DataControlBase) d).OnSelectedItemChanged(e.OldValue)));
            SelectionModeProperty = DependencyPropertyManager.Register("SelectionMode", typeof(MultiSelectMode), ownerType, new PropertyMetadata(MultiSelectMode.None, (d, e) => ((DataControlBase) d).OnSelectionModeChanged((MultiSelectMode) e.OldValue)));
            AllowUpdateTwoWayBoundPropertiesOnSynchronizationProperty = DependencyPropertyManager.Register("AllowUpdateTwoWayBoundPropertiesOnSynchronization", typeof(bool), ownerType, new FrameworkPropertyMetadata(true));
            ImplyNullLikeEmptyStringWhenFilteringProperty = DependencyPropertyManager.Register("ImplyNullLikeEmptyStringWhenFiltering", typeof(bool), ownerType, new FrameworkPropertyMetadata(false));
            UseFieldNameForSerializationProperty = DependencyPropertyManager.Register("UseFieldNameForSerialization", typeof(bool), ownerType, new FrameworkPropertyMetadata(true, (d, e) => ((DataControlBase) d).OnUseFieldNameForSerializationChanged()));
            ClipboardCopyModeProperty = DependencyPropertyManager.Register("ClipboardCopyMode", typeof(DevExpress.Xpf.Grid.ClipboardCopyMode), ownerType, new PropertyMetadata(DevExpress.Xpf.Grid.ClipboardCopyMode.Default));
            PastingFromClipboardEvent = EventManager.RegisterRoutedEvent("PastingFromClipboard", RoutingStrategy.Direct, typeof(PastingFromClipboardEventHandler), ownerType);
            AllowInitiallyFocusedRowProperty = DependencyPropertyManager.Register("AllowInitiallyFocusedRow", typeof(bool), ownerType, new PropertyMetadata(true));
            DetectNestedPropertyChangesProperty = DetectNestedPropertyChangesProperty = DependencyPropertyManager.Register("DetectNestedPropertyChanges", typeof(bool), ownerType, new FrameworkPropertyMetadata(false, (d, e) => ((DataControlBase) d).OnAllowComplexPropertyUpdatesChanged()));
            EventManager.RegisterClassHandler(ownerType, DXSerializer.ClearCollectionEvent, (s, e) => ((DataControlBase) s).OnDeserializeClearCollection(e));
            EventManager.RegisterClassHandler(ownerType, DXSerializer.CreateCollectionItemEvent, (s, e) => ((DataControlBase) s).OnDeserializeCreateCollectionItem(e));
            EventManager.RegisterClassHandler(ownerType, DXSerializer.FindCollectionItemEvent, (s, e) => ((DataControlBase) s).OnDeserializeFindCollectionItem(e));
            EventManager.RegisterClassHandler(ownerType, DXSerializer.StartDeserializingEvent, (s, e) => ((DataControlBase) s).OnDeserializeStart(e));
            EventManager.RegisterClassHandler(ownerType, DXSerializer.EndDeserializingEvent, (s, e) => ((DataControlBase) s).OnDeserializeEnd(e));
            EventManager.RegisterClassHandler(ownerType, DXSerializer.AllowPropertyEvent, (s, e) => ((DataControlBase) s).OnDeserializeAllowPropertyInternal(e));
            EventManager.RegisterClassHandler(ownerType, DXSerializer.CustomShouldSerializePropertyEvent, (s, e) => ((DataControlBase) s).OnCustomShouldSerializeProperty(e));
            DependencyPropertyKey[] knownKeys = new DependencyPropertyKey[] { OwnerDetailDescriptorPropertyKey };
            CloneDetailHelper.RegisterKnownPropertyKeys(ownerType, knownKeys);
            DXSerializer.SerializationProviderProperty.OverrideMetadata(ownerType, new UIPropertyMetadata(new DataControlSerializationProvider()));
        }

        protected DataControlBase(IDataControlOriginationElement dataControlOriginationElement)
        {
            this.dataControlOriginationElement = dataControlOriginationElement;
            this.namePropertyChangeListener = NamePropertyChangeListener.CreateDesignTimeOnly(this, () => this.DesignTimeAdorner.UpdateDesignTimeInfo());
            this.MRUFiltersInternal = new ObservableCollectionCore<CriteriaOperatorInfo>();
            this.MRUFilters = new ReadOnlyObservableCollection<CriteriaOperatorInfo>(this.MRUFiltersInternal);
            this.rePopulateColumnsPostponedAction = new EndInitPostponedAction(() => this.IsLoading);
            this.rebuildSortInfoPostponedAction = new EndInitPostponedAction(() => this.IsLoading);
            this.actualSortInfoCore = new ObservableCollectionCore<GridSortInfo>();
            this.actualSortInfo = new ReadOnlyGridSortInfoCollection(this.actualSortInfoCore);
            this.sortInfoCore = this.CreateSortInfo();
            this.totalSummary = this.CreateSummariesCollection(SummaryItemCollectionType.Total);
            this.groupSummary = this.CreateSummariesCollection(SummaryItemCollectionType.Group);
            this.updateFocusedRowDataposponedAction = new LockedPostponedAction();
            this.internalNotificationManager = new NotificationManager(this);
            this.ColumnsCore.CollectionChanged += new NotifyCollectionChangedEventHandler(this.OnColumnsCollectionChanged);
            this.SortInfoCore.CollectionChanged += new NotifyCollectionChangedEventHandler(this.OnSortInfoChanged);
            this.TotalSummaryCore.CollectionChanged += new NotifyCollectionChangedEventHandler(this.OnTotalSummaryCollectionChanged);
            base.Loaded += new RoutedEventHandler(this.OnLoaded);
            base.Unloaded += new RoutedEventHandler(this.OnUnloaded);
            DataViewBase.SetIsFocusedCell(this, false);
            DataViewBase.SetIsFocusedRow(this, false);
            this.NeedSynchronize = false;
            this.FilteredComponent = new DataControlFilteredComponent(this);
            this.eventArgsConverter = new EventArgsConverter(this);
        }

        internal void AcceptChanges()
        {
            Func<System.Data.DataView, DataTable> evaluator = <>c.<>9__967_0;
            if (<>c.<>9__967_0 == null)
            {
                Func<System.Data.DataView, DataTable> local1 = <>c.<>9__967_0;
                evaluator = <>c.<>9__967_0 = dv => dv.Table;
            }
            Action<DataTable> action = <>c.<>9__967_1;
            if (<>c.<>9__967_1 == null)
            {
                Action<DataTable> local2 = <>c.<>9__967_1;
                action = <>c.<>9__967_1 = dt => dt.AcceptChanges();
            }
            (this.ItemsSource as System.Data.DataView).With<System.Data.DataView, DataTable>(evaluator).Do<DataTable>(action);
        }

        protected internal void AddChild(FrameworkContentElement child)
        {
            if (this.BandsLayoutCore != null)
            {
                Func<bool> fallback = <>c.<>9__611_1;
                if (<>c.<>9__611_1 == null)
                {
                    Func<bool> local1 = <>c.<>9__611_1;
                    fallback = <>c.<>9__611_1 = () => false;
                }
                if (!this.DataView.Return<DataViewBase, bool>(x => ReferenceEquals(x.CheckBoxSelectorColumn, child), fallback))
                {
                    goto TR_0002;
                }
            }
            base.AddLogicalChild(child);
        TR_0002:
            if (child is ColumnBase)
            {
                this.OnAddColumn((ColumnBase) child);
            }
        }

        public void AddMRUFilter(CriteriaOperator filterCriteria)
        {
            this.ForceCreateView();
            CriteriaOperatorInfo filter = new CriteriaOperatorInfo(filterCriteria, this.DataView.GetFilterOperatorCustomText(filterCriteria));
            this.AddMRUFilter(filter);
        }

        internal void AddMRUFilter(CriteriaOperatorInfo filter)
        {
            if (filter != null)
            {
                if (this.MRUFiltersInternal.Contains(filter))
                {
                    this.MRUFiltersInternal.Remove(filter);
                }
                this.MRUFiltersInternal.Insert(0, filter);
                if (this.MRUFiltersInternal.Count > this.MRUFilterListCount)
                {
                    this.MRUFiltersInternal.RemoveAt(this.MRUFilterListCount);
                }
            }
        }

        protected virtual bool AllowMasterDetailPropertySync(DependencyProperty property) => 
            true;

        internal void ApplyColumnAttributes(IModelItem dataControl, IModelItem columnModel, bool ignoreSmartProperty = true, DevExpress.Xpf.Data.DataProviderBase dataProvider = null)
        {
            dataProvider ??= this.DataProviderBase;
            GenerateBandWrapper bandWrapper = this.CreateGenerateBandWrapper(dataProvider);
            this.CreateGenerateColumnMerger(bandWrapper, false, false, false).FillColumn(dataControl, columnModel, ignoreSmartProperty);
        }

        internal void ApplyColumnSmartProperties(ColumnBase column)
        {
            if (column.IsSmart && (!column.IsAutoGenerated && !string.IsNullOrEmpty(column.FieldName)))
            {
                this.ApplyColumnAttributes(new RuntimeEditingContext(this, null).GetRoot(), new RuntimeEditingContext(column, null).GetRoot(), false, null);
            }
        }

        protected internal void ApplyColumnSortIndex(ColumnBase column)
        {
            this.ApplyGroupSortIndexIfNotLoading(column, new Action<ColumnBase>(this.ApplyColumnSortIndexWithoutLoadingCheck), new Action<ColumnBase>(this.ClearSortInfoForCorrespondingColumn));
        }

        internal void ApplyColumnSortIndexWithoutLoadingCheck(ColumnBase column)
        {
            this.ApplyGroupSortIndexCore(column, col => this.SortByCore(col, GetActualSortOrder(col.SortOrder), col.SortIndex));
        }

        internal void ApplyColumnSorting(ColumnBase column)
        {
            if (column.GroupIndexCore >= 0)
            {
                this.ApplyGroupSortIndexIfNotLoadingCore(column);
            }
            else if (column.SortIndex >= 0)
            {
                this.ApplyGroupSortIndexIfNotLoading(column, new Action<ColumnBase>(this.ApplyColumnSortIndex), null);
            }
            else if (column.SortOrder != ColumnSortOrder.None)
            {
                this.ApplyGroupSortIndexIfNotLoading(column, new Action<ColumnBase>(this.ApplyColumnSortOrder), null);
            }
        }

        protected internal void ApplyColumnSortOrder(ColumnBase column)
        {
            this.UpdateDefaultSorting();
            this.ApplyGroupSortIndexIfNotLoading(column, new Action<ColumnBase>(this.ApplyColumnSortOrderWithoutLoadingCheck), null);
        }

        private void ApplyColumnSortOrderCore(ColumnBase column)
        {
            if (column.GroupIndexCore >= 0)
            {
                this.GroupByCore(column);
            }
            else if (column.SortIndex >= 0)
            {
                this.SortByCore(column, column.SortOrder, column.SortIndex);
            }
            else
            {
                this.SortByCore(column, column.SortOrder);
            }
        }

        internal void ApplyColumnSortOrderWithoutLoadingCheck(ColumnBase column)
        {
            this.ApplyGroupSortIndexCore(column, new Action<ColumnBase>(this.ApplyColumnSortOrderCore));
        }

        internal void ApplyDesignTimeColumnAttributes(IModelItem dataControl, IModelItem columnModel)
        {
            GenerateBandWrapper bandRootWrapper = this.CreateGenerateBandWrapper(this.DataProviderBase);
            new DesignTimeColumnsPopulator(dataControl, this.ColumnType, this.BandType, bandRootWrapper, true).ExpandColumnProperties(columnModel);
        }

        protected internal virtual void ApplyFilter(bool checkFilterEnabled, bool skipIfFilterEquals = false)
        {
            if (!this.IsLoading && (!this.IsDeserializing && !this.IsFilterSortEventLocked))
            {
                FilterGroupSortChangingEventArgs filterSortArgs = this.CreateFilterGroupSortChangingEventArgs();
                this.filterSortEventLocker.DoLockedActionIfNotLocked(() => this.RaiseFilterGroupSortChangingEventAndCheckChanges(filterSortArgs));
                this.ApplyFilter(checkFilterEnabled ? this.GetActualFilterCriteria() : this.FilterCriteria, filterSortArgs, skipIfFilterEquals);
            }
        }

        protected internal virtual void ApplyFilter(CriteriaOperator op, FilterGroupSortChangingEventArgs filterSortArgs, bool skipIfFilterEquals)
        {
            CriteriaOperator filterCriteria = this.DataProviderBase.FilterCriteria;
            CriteriaOperator filterCriteriaForDataProvider = this.GetFilterCriteriaForDataProvider(op);
            if (!skipIfFilterEquals || filterSortArgs.FilterChanged)
            {
                this.dataResetLocker.DoLockedActionIfNotLocked(delegate {
                    this.DestroyFilterData();
                    if (op != null)
                    {
                        this.SetCurrentValue(IsFilterEnabledProperty, true);
                    }
                    object row = null;
                    if (!this.AllowInitiallyFocusedRow && ((this.DataView != null) && (this.DataView.FocusedRowHandle != -2147483648)))
                    {
                        row = this.GetRow(this.DataView.FocusedRowHandle);
                    }
                    if (this.DataProviderBase.IsVirtualSource)
                    {
                        this.DataProviderBase.VirtualSourceAccess.Apply(null, new CriteriaOperatorValue?(this.CreateVirtualSourceFilter(filterCriteriaForDataProvider)), null);
                    }
                    else
                    {
                        this.DataProviderBase.FilterCriteria = filterCriteriaForDataProvider;
                    }
                    if (!this.DataProviderBase.IsUpdateLocked)
                    {
                        this.UpdateRowsCore(false, true);
                        this.InitiallyFocusedRowAfterFiltering(row);
                        this.UpdateTotalSummaryCore();
                        if (this.DataView != null)
                        {
                            if (this.DataView.DataPresenter != null)
                            {
                                this.DataView.ImmediateActionsManager.EnqueueAction(new ScrollRowsAfterApplyFilterAction(this.DataView));
                            }
                            if (this.DataView is ITableView)
                            {
                                ((ITableView) this.DataView).ScrollBarAnnotationsManager.ScrollBarAnnotationGeneration();
                            }
                            this.DataView.UpdateIsCheckedForHeaderColumns();
                        }
                    }
                });
                if (this._FilteringContext == null)
                {
                    FilteringUIContext local1 = this._FilteringContext;
                }
                else
                {
                    this._FilteringContext.NotifyFilterChanged();
                }
                if (!ReferenceEquals(filterCriteria, this.DataProviderBase.FilterCriteria))
                {
                    this.RaiseFilterChanged();
                }
                DataViewBase dataView = this.DataView;
                if (dataView == null)
                {
                    DataViewBase local2 = dataView;
                }
                else
                {
                    dataView.UpdateFilterGrid();
                }
            }
        }

        internal void ApplyGroupSortIndexCore(ColumnBase column, Action<ColumnBase> columnAction)
        {
            if (!this.updateSortIndexesLocker.IsLocked && !this.ColumnsCore.IsLockUpdate)
            {
                this.updateSortIndexesLocker.Lock();
                try
                {
                    columnAction(column);
                }
                finally
                {
                    this.updateSortIndexesLocker.Unlock();
                }
            }
        }

        protected void ApplyGroupSortIndexIfNotLoading(ColumnBase column, Action<ColumnBase> columnAction, Action<ColumnBase> columnActionWhenLoading = null)
        {
            this.rebuildSortInfoPostponedAction.PerformIfNotLoading(() => columnAction(column), delegate {
                if (columnActionWhenLoading != null)
                {
                    columnActionWhenLoading(column);
                }
            });
        }

        internal virtual void ApplyGroupSortIndexIfNotLoadingCore(ColumnBase column)
        {
        }

        protected virtual void ApplyNewView()
        {
            SetActiveView(this, this.DataView);
            this.OnDataChanged(false, true, false, false);
            this.UpdateMasterDetailProvider();
        }

        internal virtual void AttachToFormatConditions(FormatConditionChangeType changeType)
        {
            if (changeType.HasFlag(FormatConditionChangeType.UnboundColumn))
            {
                this.OnColumnUnboundChangedPosponed();
            }
            else if (changeType.HasFlag(FormatConditionChangeType.Summary))
            {
                throw new NotSupportedException();
            }
        }

        private void BandsCore_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.ValidateMasterDetailConsistency();
            Func<BandsLayoutBase> createBandsLayout = null;
            if (this.GetOriginationDataControl().BandsCore.Count > 0)
            {
                if (this.BandsLayoutCore == null)
                {
                    createBandsLayout = () => this.CreateBandsLayout();
                }
            }
            else
            {
                Func<BandsLayoutBase> func2 = <>c.<>9__805_1;
                if (<>c.<>9__805_1 == null)
                {
                    Func<BandsLayoutBase> local1 = <>c.<>9__805_1;
                    func2 = <>c.<>9__805_1 = (Func<BandsLayoutBase>) (() => null);
                }
                createBandsLayout = func2;
            }
            Action notifyBandsLayout = delegate {
                Action<BandsLayoutBase> <>9__3;
                Action<BandsLayoutBase> action = <>9__3;
                if (<>9__3 == null)
                {
                    Action<BandsLayoutBase> local1 = <>9__3;
                    action = <>9__3 = x => x.OnGridControlBandsChanged(e);
                }
                this.BandsLayoutCore.Do<BandsLayoutBase>(action);
            };
            if (createBandsLayout == null)
            {
                notifyBandsLayout();
            }
            else
            {
                this.GetOriginationDataControl().syncPropertyLocker.DoLockedAction(delegate {
                    notifyBandsLayout();
                    this.SetBandsLayout(createBandsLayout());
                });
                Func<DataControlBase, IList> getCollection = <>c.<>9__805_5;
                if (<>c.<>9__805_5 == null)
                {
                    Func<DataControlBase, IList> local2 = <>c.<>9__805_5;
                    getCollection = <>c.<>9__805_5 = dc => dc.BandsCore;
                }
                this.GetDataControlOriginationElement().NotifyCollectionChanged(this, getCollection, <>c.<>9__805_6 ??= band => BandsLayoutBase.CloneBand((BandBase) band), e);
            }
            ItemsAttachedBehaviorExtendedLock<DataControlBase, BandBase> behavior = (ItemsAttachedBehaviorExtendedLock<DataControlBase, BandBase>) base.GetValue(BandsItemsAttachedBehaviorProperty);
            if ((behavior != null) && ((this.BandsSource is IList) && (((IList) this.BandsSource).Count != this.bandsCore.Count)))
            {
                this.lockBandsSourceUpdate.DoIfNotLocked(delegate {
                    behavior.SetLockSynchronization(true);
                    Func<object, object> convertItemAction = <>c.<>9__805_8;
                    if (<>c.<>9__805_8 == null)
                    {
                        Func<object, object> local1 = <>c.<>9__805_8;
                        convertItemAction = <>c.<>9__805_8 = source => DependencyObjectExtensions.GetDataContext((DependencyObject) source);
                    }
                    SyncCollectionHelper.SyncCollection(e, (IList) this.BandsSource, this.bandsCore, convertItemAction, null, null, null);
                    behavior.SetLockSynchronization(false);
                    foreach (object obj2 in this.BandsCore)
                    {
                        ((BandBase) obj2).RefreshSource();
                    }
                });
            }
        }

        protected internal virtual void BeforeColumnMove(BaseColumn column, HeaderPresenterType moveFrom)
        {
        }

        public void BeginDataUpdate()
        {
            this.DataProviderBase.BeginUpdate();
            Func<int> getChangedVisibleIndex = <>c.<>9__439_0;
            if (<>c.<>9__439_0 == null)
            {
                Func<int> local1 = <>c.<>9__439_0;
                getChangedVisibleIndex = <>c.<>9__439_0 = () => -1;
            }
            this.BeginRestoreOffset(getChangedVisibleIndex);
            Action<BindingListAdapterBase> action = <>c.<>9__439_1;
            if (<>c.<>9__439_1 == null)
            {
                Action<BindingListAdapterBase> local2 = <>c.<>9__439_1;
                action = <>c.<>9__439_1 = x => x.RaisesItemChangedEvents = false;
            }
            this.DataProviderBase.BindingListAdapter.Do<BindingListAdapterBase>(action);
        }

        internal virtual void BeginDesignColumnMoverApply()
        {
            this.designColumnMoverLocker.Lock();
        }

        public override void BeginInit()
        {
            Func<DataControlBase, ISupportInitialize> getTarget = <>c.<>9__457_0;
            if (<>c.<>9__457_0 == null)
            {
                Func<DataControlBase, ISupportInitialize> local1 = <>c.<>9__457_0;
                getTarget = <>c.<>9__457_0 = dataControl => dataControl;
            }
            this.GetDataControlOriginationElement().NotifyBeginInit(this, getTarget);
            this.loadingCount++;
            base.BeginInit();
        }

        protected internal virtual void BeginRestoreOffset(Func<int> getChangedVisibleIndex)
        {
            if (this.CanAdjustScrollOffset)
            {
                if (this.DataProviderBase.IsUpdateLocked || ((this.DataView.RootNodeContainer == null) || ((this.DataView.RootNodeContainer.Items.Count <= 0) || (!(this.DataView.RootNodeContainer.Items[0] is DataRowNode) || (((DataRowNode) this.DataView.RootNodeContainer.Items[0]).Row != null)))))
                {
                    this.nodeDefinitions = this.SaveNodeDefinitions(this.DataView.RootNodeContainer, getChangedVisibleIndex());
                }
                else
                {
                    this.scrollOffsetIsImmediate = true;
                    this.DataView.ImmediateActionsManager.EnqueueAction(() => this.nodeDefinitions = this.SaveNodeDefinitions(this.DataView.RootNodeContainer, getChangedVisibleIndex()));
                }
            }
        }

        public void BeginSelection()
        {
            Action<DataViewBase> action = <>c.<>9__707_0;
            if (<>c.<>9__707_0 == null)
            {
                Action<DataViewBase> local1 = <>c.<>9__707_0;
                action = <>c.<>9__707_0 = view => view.BeginSelectionCore();
            }
            this.DataView.Do<DataViewBase>(action);
        }

        protected virtual void BeginUpdateGroupSummary()
        {
        }

        protected internal CriteriaOperator CalcColumnFilterCriteriaByValue(ColumnBase column, object columnValue) => 
            this.DataProviderBase.CalcColumnFilterCriteriaByValue(column, columnValue);

        internal int CalcTotalLevel(int visibleIndex) => 
            this.CalcTotalLevelByRowHandle(this.GetRowHandleByVisibleIndexCore(visibleIndex));

        internal int CalcTotalLevelByRowHandle(int rowHandle)
        {
            int num = this.DataControlParent.CalcTotalLevel();
            if (this.DataView.AllowFixedGroupsCore)
            {
                num += this.DataProviderBase.GetRowLevelByControllerRow(rowHandle);
            }
            if ((rowHandle == -2147483647) && this.DataView.IsNewItemRowVisible)
            {
                num--;
            }
            return num;
        }

        private bool CanAssignDetailDescriptorOwner(DetailDescriptorBase detailDescriptor) => 
            (detailDescriptor != null) && detailDescriptor.Owner.CanAssignTo(this);

        internal bool CanCancelRow(object row)
        {
            IEditableCollectionView dataSource = this.DataProviderBase.DataSource as IEditableCollectionView;
            return (((dataSource == null) || (!dataSource.IsEditingItem || !dataSource.CanCancelEdit)) ? (row is IEditableObject) : true);
        }

        private bool CanNotifyChanges(int rowHandle, string fieldName)
        {
            object rowValue = this.DataProviderBase.GetRowValue(rowHandle);
            return ((rowValue is INotifyPropertyChanged) ? (((this.ColumnsCore[fieldName] == null) || !this.ColumnsCore[fieldName].IsUnbound) ? (!(rowValue is IEditableObject) || ((rowHandle != this.DataView.FocusedRowHandle) || !this.DataProviderBase.IsCurrentRowEditing)) : false) : false);
        }

        internal bool CanSelectAllCore() => 
            !this.DataProviderBase.IsVirtualSource || this.DataProviderBase.IsPagedSource;

        private void ChangeMasterRowExpanded(int handle)
        {
            this.MasterDetailProvider.ChangeMasterRowExpanded(handle);
        }

        internal void ChangeMasterRowExpanded(object parameter)
        {
            int? nullable = this.ObjectToInt(parameter);
            if (nullable == null)
            {
                nullable = new int?(this.FindRow(parameter));
            }
            this.ChangeMasterRowExpanded(nullable.Value);
        }

        internal void CheckIsOriginationDataControl()
        {
        }

        protected virtual void ClearAndNotify()
        {
            this.OnClearAndNotifyBase();
            if (!this.needsDataReset)
            {
                this.dataResetLocker.DoIfNotLocked(delegate {
                    if (this.DataView != null)
                    {
                        this.DataView.PerformDataResetAction();
                    }
                });
            }
            else
            {
                this.needsDataReset = false;
                this.dataResetLocker.DoIfNotLocked(delegate {
                    if (this.DataView != null)
                    {
                        this.DataView.OnDataReset();
                    }
                });
            }
        }

        internal void ClearAutoGeneratedColumns()
        {
            IList list = (this.BandsCore.Count == 0) ? ((IList) this.ColumnsCore) : ((IList) ((BandBase) this.BandsCore[0]).ColumnsCore);
            ColumnBase[] array = new ColumnBase[list.Count];
            list.CopyTo(array, 0);
            foreach (ColumnBase base2 in array)
            {
                if (base2.IsAutoGenerated)
                {
                    list.Remove(base2);
                }
            }
        }

        private void ClearClonedDetails()
        {
            if ((this.DetailDescriptorCore != null) && ((this.DataView == null) || this.DataView.IsRootView))
            {
                Action<DataControlBase> updateMethod = <>c.<>9__557_0;
                if (<>c.<>9__557_0 == null)
                {
                    Action<DataControlBase> local1 = <>c.<>9__557_0;
                    updateMethod = <>c.<>9__557_0 = delegate (DataControlBase dataControl) {
                        foreach (DataControlBase base2 in dataControl.DetailClones)
                        {
                            if (base2 != null)
                            {
                                DataViewBase dataView = base2.DataView;
                                if (dataView == null)
                                {
                                    DataViewBase local1 = dataView;
                                    continue;
                                }
                                DataControlPopupMenu dataControlMenu = dataView.DataControlMenu;
                                if (dataControlMenu == null)
                                {
                                    DataControlPopupMenu local2 = dataControlMenu;
                                    continue;
                                }
                                dataControlMenu.Destroy();
                            }
                        }
                        dataControl.DetailClones.Clear();
                    };
                }
                this.UpdateAllOriginationDataControls(updateMethod);
            }
        }

        public void ClearColumnFilter(ColumnBase column)
        {
            this.ClearColumnFilter(column.FieldName);
        }

        public void ClearColumnFilter(string fieldName)
        {
            IDictionary<OperandProperty, CriteriaOperator> dictionary = CriteriaColumnAffinityResolver.SplitByColumnsWithOptionalLegacyFallback(this.FilterCriteria);
            dictionary.Remove(new OperandProperty(fieldName));
            this.FilterCriteria = CriteriaOperator.And(dictionary.Values);
        }

        protected internal virtual void ClearGroupSummarySortInfo()
        {
        }

        internal void ClearMasterDetailSelection()
        {
            Action<DataControlBase> updateOpenDetailMethod = <>c.<>9__833_0 ??= delegate (DataControlBase detail) {
                if (detail.SelectionMode != MultiSelectMode.MultipleRow)
                {
                    detail.UnselectAll();
                }
            };
            this.UpdateAllDetailDataControls(updateOpenDetailMethod, updateOpenDetailMethod);
        }

        public void ClearMRUFilter()
        {
            this.MRUFiltersInternal.Clear();
        }

        private void ClearSortInfoForCorrespondingColumn(ColumnBase column)
        {
            if (column.SortIndex == -1)
            {
                this.SortInfoCore.Remove(this.SortInfoCore[column.FieldName]);
            }
        }

        public void ClearSorting()
        {
            this.SortInfoCore.ClearSorting();
        }

        internal DataControlBase CloneDetail(MasterNodeContainer masterNodeContainer, MasterRowsContainer masterRowsContainer, object dataContext, BindingBase itemsSourceBinding, DataControlDetailInfo parent, bool cloneColumns = true, bool addToClones = true)
        {
            this.ForceCreateView();
            this.dataControlOriginationElement ??= new DataControlOriginationElement(this);
            DataControlBase clone = null;
            this.syncPropertyLocker.DoLockedAction(delegate {
                Action<DataControlBase> <>9__1;
                object[] args = new object[] { this.dataControlOriginationElement };
                clone = CloneDetailHelper.CreateElement<DataControlBase>(this, args);
                parent.DataControl = clone;
                parent.ForceCreateContainers();
                Action<DataControlBase> innerCloneAction = <>9__1;
                if (<>9__1 == null)
                {
                    Action<DataControlBase> local1 = <>9__1;
                    innerCloneAction = <>9__1 = delegate (DataControlBase dataControl) {
                        if (cloneColumns)
                        {
                            if ((this.BandsCore.Count > 0) && (this.BandsSource == null))
                            {
                                this.BandsLayoutCore.CloneBandsCollection(dataControl.BandsCore);
                            }
                            else
                            {
                                CloneDetailHelper.CloneCollection<BaseColumn>(this.ColumnsCore, dataControl.ColumnsCore);
                            }
                        }
                        CloneDetailHelper.CloneCollection<DevExpress.Xpf.Grid.SummaryItemBase>(this.TotalSummaryCore, dataControl.TotalSummaryCore);
                        CloneDetailHelper.CloneCollection<DevExpress.Xpf.Grid.SummaryItemBase>(this.GroupSummaryCore, dataControl.GroupSummaryCore);
                        object[] objArray1 = new object[] { masterNodeContainer, masterRowsContainer, this.DataControlOwner };
                        dataControl.DataView = CloneDetailHelper.CloneElement<DataViewBase>(this.DataView, null, null, objArray1);
                        dataControl.DataContext = dataContext;
                        dataControl.DataControlParent = parent;
                        if (itemsSourceBinding != null)
                        {
                            dataControl.SetBinding(ItemsSourceProperty, itemsSourceBinding);
                        }
                    };
                }
                CloneDetailHelper.CloneElement<DataControlBase>(this, clone, innerCloneAction, <>c.<>9__901_2 ??= dataControl => dataControl.CloneDetailLocker);
            });
            clone.viewCore.UpdateUseLightweightTemplates();
            clone.FinalizeClonedDetail();
            if (addToClones)
            {
                this.detailClones.Add(clone);
            }
            this.UpdateAllDetailViewIndents();
            return clone;
        }

        internal DataControlBase CloneDetailForPrint(MasterNodeContainer masterNodeContainer, MasterRowsContainer masterRowsContainer)
        {
            this.ForceCreateView();
            this.dataControlOriginationElement ??= new DataControlOriginationElement(this);
            DataControlBase clone = null;
            DataControlBase result = null;
            this.syncPropertyLocker.DoLockedAction(delegate {
                Action<DataControlBase> <>9__1;
                object[] args = new object[] { this.dataControlOriginationElement };
                clone = CloneDetailHelper.CreateElement<DataControlBase>(this, args);
                Action<DataControlBase> innerCloneAction = <>9__1;
                if (<>9__1 == null)
                {
                    Action<DataControlBase> local1 = <>9__1;
                    innerCloneAction = <>9__1 = delegate (DataControlBase dataControl) {
                        CloneDetailHelper.CloneCollection<DevExpress.Xpf.Grid.SummaryItemBase>(this.TotalSummaryCore, dataControl.TotalSummaryCore);
                        CloneDetailHelper.CloneCollection<DevExpress.Xpf.Grid.SummaryItemBase>(this.GroupSummaryCore, dataControl.GroupSummaryCore);
                        object[] objArray1 = new object[] { masterNodeContainer, masterRowsContainer, this.DataControlOwner };
                        dataControl.DataView = CloneDetailHelper.CloneElement<DataViewBase>(this.DataView, null, null, objArray1);
                        result = dataControl;
                    };
                }
                CloneDetailHelper.CloneElement<DataControlBase>(this, clone, innerCloneAction, <>c.<>9__902_2 ??= dataControl => dataControl.CloneDetailLocker);
            });
            clone.FinalizeClonedDetail();
            return result;
        }

        protected virtual void CloneGroupSummarySortInfo(DataControlBase dataControl)
        {
        }

        private ColumnBase CoerceCurrentColumn(ColumnBase newValue) => 
            (this.DataView != null) ? ((this.DataView.EditFormManager.IsEditFormVisible || !this.DataView.RequestUIUpdate()) ? ((ColumnBase) this.GetCoerceOldValue(CurrentColumnProperty)) : newValue) : newValue;

        private object CoerceCurrentItem(object newValue)
        {
            if ((newValue != this.CurrentItem) && ((this.DataView != null) && (this.DataView.FocusedRowHandle != -2147483647)))
            {
                this.DataView.HideEditor(false);
            }
            return newValue;
        }

        private int CoerceDesignTimeDataSourceRowCount(int baseValue) => 
            Math.Max(Math.Min(baseValue, 100), 0);

        private object CoerceFilterCriteria(CriteriaOperator newValue) => 
            ((this.DataView == null) || this.DataView.CommitEditing()) ? newValue : DependencyObjectHelper.GetCoerceValue(this, FilterCriteriaProperty);

        private static object CoerceFilterCriteria(DependencyObject d, object value) => 
            ((DataControlBase) d).CoerceFilterCriteria((CriteriaOperator) value);

        private object CoerceFilterString(string newValue) => 
            ((this.DataView == null) || this.DataView.RequestUIUpdate()) ? newValue : DependencyObjectHelper.GetCoerceValue(this, FilterStringProperty);

        private static object CoerceFilterString(DependencyObject d, object value) => 
            ((DataControlBase) d).CoerceFilterString((string) value);

        private object CoerceFixedFilter(CriteriaOperator newValue) => 
            ((this.DataView == null) || this.DataView.CommitEditing()) ? newValue : DependencyObjectHelper.GetCoerceValue(this, FixedFilterProperty);

        private static object CoerceFixedFilter(DependencyObject d, object value) => 
            ((DataControlBase) d).CoerceFixedFilter((CriteriaOperator) value);

        private object CoerceIsFilterEnabled(bool newValue) => 
            ((this.DataView == null) || this.DataView.RequestUIUpdate()) ? newValue : DependencyObjectHelper.GetCoerceValue(this, IsFilterEnabledProperty);

        private static object CoerceIsFilterEnabled(DependencyObject d, object value) => 
            ((DataControlBase) d).CoerceIsFilterEnabled((bool) value);

        private void CollectionViewCurrentChanged(object sender, EventArgs e)
        {
            if (this.DataProviderBase.CollectionViewSource != null)
            {
                this.CollectionViewSyncCurrentItem(this.DataProviderBase.CollectionViewSource);
            }
        }

        internal void CollectionViewSyncCurrentItem(ICollectionView source)
        {
            if ((this.DataView != null) && (this.DataView.IsSynchronizedWithCurrentItem && (this.DataView.FocusedRowHandle != -2147483647)))
            {
                if (source.CurrentItem == CollectionView.NewItemPlaceholder)
                {
                    this.DataView.SetFocusedRowHandle(-2147483647);
                }
                else if (!this.DataView.FocusedRowHandleChangedLocker.IsLocked)
                {
                    this.SetCurrentItemCore(source.CurrentItem);
                }
            }
        }

        internal void CollectParentFixedRowsScrollIndexes(int visibleIndex, List<int> scrollIndexes)
        {
            if (this.DataView.AllowFixedGroupsCore)
            {
                int rowHandleByVisibleIndexCore = this.GetRowHandleByVisibleIndexCore(visibleIndex);
                int rowHandle = rowHandleByVisibleIndexCore;
                if ((this.DataProviderBase.IsGroupRowHandle(rowHandleByVisibleIndexCore) && !this.DataProviderBase.IsGroupRowExpanded(rowHandleByVisibleIndexCore)) || !this.DataProviderBase.IsGroupRowHandle(rowHandle))
                {
                    rowHandle = this.DataProviderBase.GetParentRowHandle(rowHandleByVisibleIndexCore);
                }
                while (rowHandle != -2147483648)
                {
                    scrollIndexes.Add(this.DataView.ConvertVisibleIndexToScrollIndex(this.GetRowVisibleIndexByHandleCore(rowHandle)));
                    rowHandle = this.DataProviderBase.GetParentRowHandle(rowHandle);
                }
            }
            this.DataControlParent.CollectParentFixedRowsScrollIndexes(scrollIndexes);
        }

        internal void CollectViewVisibleIndexChain(List<KeyValuePair<DataViewBase, int>> chain)
        {
            this.DataControlParent.CollectViewVisibleIndexChain(chain);
        }

        protected internal virtual IList<SortDefinition> ConvertSortInfoToList(SortInfoCollectionBase sortInfoCore, out int groupCount)
        {
            groupCount = sortInfoCore.GroupCountInternal;
            List<SortDefinition> list = new List<SortDefinition>();
            foreach (GridSortInfo info in sortInfoCore)
            {
                list.Add(new SortDefinition(info.FieldName, info.SortOrder));
            }
            return list;
        }

        public void CopyCurrentItemToClipboard()
        {
            Action<DataViewBase> action = <>c.<>9__701_0;
            if (<>c.<>9__701_0 == null)
            {
                Action<DataViewBase> local1 = <>c.<>9__701_0;
                action = <>c.<>9__701_0 = view => view.CopyFocusedRowToClipboardCore();
            }
            this.DataView.Do<DataViewBase>(action);
        }

        public void CopyRangeToClipboard(int startRowHandle, int endRowHandle)
        {
            this.DataView.Do<DataViewBase>(view => view.CopyRangeToClipboardCore(startRowHandle, endRowHandle));
        }

        public void CopyRowsToClipboard(IEnumerable<int> rows)
        {
            this.DataView.Do<DataViewBase>(view => view.CopyRowsToClipboardCore(rows));
        }

        public void CopySelectedItemsToClipboard()
        {
            Action<DataViewBase> action = <>c.<>9__700_0;
            if (<>c.<>9__700_0 == null)
            {
                Action<DataViewBase> local1 = <>c.<>9__700_0;
                action = <>c.<>9__700_0 = view => view.CopySelectedRowsToClipboardCore();
            }
            this.DataView.Do<DataViewBase>(action);
        }

        public void CopyToClipboard()
        {
            Action<DataViewBase> action = <>c.<>9__704_0;
            if (<>c.<>9__704_0 == null)
            {
                Action<DataViewBase> local1 = <>c.<>9__704_0;
                action = <>c.<>9__704_0 = view => view.SelectionStrategy.CopyToClipboard();
            }
            this.DataView.Do<DataViewBase>(action);
        }

        internal void CopyToDetail(DataControlBase clone)
        {
            <>c__DisplayClass904_0 class_;
            this.syncPropertyLocker.DoLockedAction(delegate {
                CloneDetailHelper.CopyToElement<DataControlBase>(this, clone, delegate (DataControlBase dataControl) {
                    if (class_.BandsCore.Count > 0)
                    {
                        class_.BandsLayoutCore.CopyBandCollection(dataControl.BandsCore);
                    }
                    else
                    {
                        CloneDetailHelper.CopyToCollection<BaseColumn>(class_.ColumnsCore, dataControl.ColumnsCore);
                    }
                    CloneDetailHelper.CopyToCollection<DevExpress.Xpf.Grid.SummaryItemBase>(class_.TotalSummaryCore, dataControl.TotalSummaryCore);
                    CloneDetailHelper.CopyToCollection<DevExpress.Xpf.Grid.SummaryItemBase>(class_.GroupSummaryCore, dataControl.GroupSummaryCore);
                    class_.DataView.ViewBehavior.CopyToDetail(dataControl);
                    CloneDetailHelper.CopyToElement<DataViewBase>(class_.DataView, dataControl.DataView, null);
                });
                this.CloneGroupSummarySortInfo(clone);
            });
        }

        public void CorrectOffsetIfNeeded()
        {
            this.CorrectOffsetIfNeeded(this.nodeDefinitions);
        }

        private bool CorrectOffsetIfNeeded(IList<NodeDefinition> nodes)
        {
            bool flag;
            if (nodes == null)
            {
                return false;
            }
            using (IEnumerator<NodeDefinition> enumerator = nodes.GetEnumerator())
            {
                while (true)
                {
                    if (enumerator.MoveNext())
                    {
                        NodeDefinition current = enumerator.Current;
                        int rowHandle = (current.Row != null) ? current.DataControl.FindRow(current.Row) : current.DataControl.FindRow(current.RowDirty);
                        if (rowHandle == -2147483648)
                        {
                            if (!this.CorrectOffsetIfNeeded(current.Nodes))
                            {
                                continue;
                            }
                            flag = true;
                        }
                        else
                        {
                            while (true)
                            {
                                if (current.Level < current.DataControl.DataProviderBase.GetRowLevelByControllerRow(rowHandle))
                                {
                                    int parentRowHandle = current.DataControl.DataProviderBase.GetParentRowHandle(rowHandle);
                                    if (current.DataControl.GetRow(parentRowHandle) == current.Row)
                                    {
                                        rowHandle = parentRowHandle;
                                        continue;
                                    }
                                }
                                int rowVisibleIndexByHandleCore = current.DataControl.GetRowVisibleIndexByHandleCore(rowHandle);
                                int num3 = (this.DataView.ConvertVisibleIndexToScrollIndex(rowVisibleIndexByHandleCore) - current.ScrollIndex) - this.offsetCorrection;
                                if (num3 != 0)
                                {
                                    this.DataView.DataPresenter.SetDefineScrollOffset(this.DataView.RootDataPresenter.ActualScrollOffset + num3, true);
                                    this.offsetCorrection += num3;
                                }
                                this.CorrectOffsetIfNeeded(current.Nodes);
                                flag = true;
                                break;
                            }
                        }
                    }
                    else
                    {
                        return false;
                    }
                    break;
                }
            }
            return flag;
        }

        protected internal abstract BandBase CreateBand();
        protected abstract IBandsCollection CreateBands();
        protected abstract BandsLayoutBase CreateBandsLayout();
        protected internal ColumnBase CreateColumn() => 
            (ColumnBase) Activator.CreateInstance(this.ColumnType);

        protected internal virtual ColumnBase CreateColumnFromColumnGenerator(PropertyDescriptor item) => 
            ItemsAttachedBehaviorCore<DataControlBase, ColumnBase>.CreateItem(this, ColumnsItemsAttachedBehaviorProperty, new ColumnGeneratorItemContext(this, item));

        internal abstract IColumnCollection CreateColumns();
        private static ColumnValuesArguments CreateColumnValuesArgs(string name, FilteringUIContext context, CriteriaOperator filter, bool forceIsColumnFiltered, bool roundDateTimeFilter)
        {
            bool flag = !context.GetFilter(name).ReferenceEqualsNull();
            return ColumnValuesArgumentsHelper.GetColumnValuesArgs((forceIsColumnFiltered | flag) ? filter : null, forceIsColumnFiltered | flag, roundDateTimeFilter, true);
        }

        protected abstract DevExpress.Xpf.Data.DataProviderBase CreateDataProvider();
        protected internal abstract ColumnFilterInfoBase CreateDateColumnFilterInfo(ColumnBase column);
        protected internal abstract DataViewBase CreateDefaultView();
        internal static DisplayCriteriaHelperClient CreateDisplayCriteriaHelperClient(DataViewBase view) => 
            new DisplayCriteriaHelperClient(delegate (string name) {
                ColumnBase column = view.ColumnsCore[name];
                return (column != null) ? new DisplayCriteriaColumnTraits(column.HeaderCaption, column.ColumnFilterMode, column.ActualEditSettings, column.RoundDateDisplayFormat, val => view.GetColumnDisplayText(val, column, null)) : null;
            }, new Func<bool>(view.HasCustomColumnDisplayTextSubscription), delegate {
                IEnumerable<FormatConditionFilter> formatConditionFilters;
                if (view != null)
                {
                    formatConditionFilters = view.DataControl.GetFormatConditionFilters();
                }
                else
                {
                    DataViewBase local1 = view;
                    formatConditionFilters = null;
                }
                IEnumerable<FormatConditionFilter> local2 = formatConditionFilters;
                IEnumerable<FormatConditionFilter> enumerable2 = local2;
                if (local2 == null)
                {
                    IEnumerable<FormatConditionFilter> local3 = local2;
                    enumerable2 = Enumerable.Empty<FormatConditionFilter>();
                }
                return enumerable2;
            });

        protected virtual FilterGroupSortChangingEventArgs CreateFilterGroupSortChangingEventArgs()
        {
            int num;
            IList<SortDefinition> sortInfo = this.ConvertSortInfoToList(this.SortInfoCore, out num);
            FilterGroupSortChangingEventArgs args1 = new FilterGroupSortChangingEventArgs(this, sortInfo, num);
            args1.RoutedEvent = FilterGroupSortChangingEvent;
            return args1;
        }

        internal virtual DataTemplate CreateFilterHeaderTemplate(ColumnBase column) => 
            column.FilterEditorHeaderTemplate;

        private FilteringColumn CreateFilteringColumn(string fieldName, Func<ColumnBase> getColumn, bool useGroupFields = true)
        {
            <>c__DisplayClass992_0 class_;
            ColumnFilterMode columnFilterMode;
            DataColumnInfo dataColumnInfo = this.DataProviderBase.Columns[fieldName];
            if (dataColumnInfo == null)
            {
                return null;
            }
            Func<bool> getRoundDateTimeFilter = delegate {
                ColumnBase local1 = getColumn();
                if (local1 != null)
                {
                    return local1.RoundDateTimeForColumnFilter;
                }
                ColumnBase local2 = local1;
                return true;
            };
            ColumnBase local1 = getColumn();
            if (local1 != null)
            {
                columnFilterMode = local1.ColumnFilterMode;
            }
            else
            {
                ColumnBase local2 = local1;
                columnFilterMode = ColumnFilterMode.Value;
            }
            return new FilteringColumn(dataColumnInfo.Name, dataColumnInfo.Type, columnFilterMode, true, delegate {
                ColumnBase local1 = getColumn();
                if (local1 != null)
                {
                    return local1.ActualEditSettings;
                }
                ColumnBase local2 = local1;
                return null;
            }, getRoundDateTimeFilter, value => DisplayCriteriaHelper.GetColumnDisplayText(CreateDisplayCriteriaHelperClient(this.viewCore), dataColumnInfo.Name, getRoundDateTimeFilter(), value), () => this.CreateFilterRestrictions(getColumn()), delegate {
                if (useGroupFields)
                {
                    ColumnBase local1 = getColumn();
                    if (local1 != null)
                    {
                        return local1.FilterPopupGroupFields;
                    }
                    ColumnBase local2 = local1;
                }
                return null;
            }, delegate (CriteriaOperator filter, bool forceIsColumnFiltered, CountsIncludeMode countsIncludeMode, FilterValuesThrottleMode throttleMode) {
                <>c__DisplayClass992_0.<<CreateFilteringColumn>b__5>d local;
                local.<>4__this = class_;
                local.filter = filter;
                local.forceIsColumnFiltered = forceIsColumnFiltered;
                local.countsIncludeMode = countsIncludeMode;
                local.throttleMode = throttleMode;
                local.<>t__builder = AsyncTaskMethodBuilder<UniqueValues>.Create();
                local.<>1__state = -1;
                local.<>t__builder.Start<<>c__DisplayClass992_0.<<CreateFilteringColumn>b__5>d>(ref local);
                return local.<>t__builder.Task;
            }, delegate {
                ColumnBase local1 = getColumn();
                if (local1 != null)
                {
                    return local1.GetShowAllTableValuesInFilterPopup();
                }
                ColumnBase local2 = local1;
                return this.ShowAllTableValuesInFilterPopup;
            }, delegate (SummaryFilterInfo[] summaries) {
                Func<SummaryFilterInfo, object> <>9__9;
                if (this.DataProviderBase.IsServerMode || (this.DataProviderBase.IsAsyncServerMode || this.DataProviderBase.IsVirtualSource))
                {
                    return null;
                }
                Func<SummaryFilterInfo, object> selector = <>9__9;
                if (<>9__9 == null)
                {
                    Func<SummaryFilterInfo, object> local1 = <>9__9;
                    selector = <>9__9 = x => this.DataProviderBase.GetSummaryValue(dataColumnInfo.Name, x.SummaryType, ColumnValuesArgumentsHelper.GetColumnValuesArgs(x.Filter, true, true, true), true);
                }
                return summaries.Select<SummaryFilterInfo, object>(selector).ToArray<object>();
            }, delegate {
                ColumnBase local1 = getColumn();
                if (local1 != null)
                {
                    return local1.PredefinedFilters;
                }
                ColumnBase local2 = local1;
                return null;
            });
        }

        private FilteringUIContextClient CreateFilteringUIContextClient() => 
            new FilteringUIContextClient(() => this.FilterCriteria, delegate (CriteriaOperator x) {
                this.FilterCriteria = x;
            }, new Func<CriteriaOperator, CriteriaOperator>(this.SubstituteFilterInternal), propertyName => this.CreateFilteringColumn(propertyName, () => this.ColumnsCore[propertyName], true), delegate (ColumnForestFilterMode filterMode) {
                Func<ColumnBase, HeaderAppearance> func1 = <>c.<>9__991_5;
                if (<>c.<>9__991_5 == null)
                {
                    Func<ColumnBase, HeaderAppearance> local1 = <>c.<>9__991_5;
                    func1 = <>c.<>9__991_5 = delegate (ColumnBase column) {
                        Func<DataTemplate, ActualTemplateSelectorWrapper> evaluator = <>c.<>9__991_6;
                        if (<>c.<>9__991_6 == null)
                        {
                            Func<DataTemplate, ActualTemplateSelectorWrapper> local1 = <>c.<>9__991_6;
                            evaluator = <>c.<>9__991_6 = x => new ActualTemplateSelectorWrapper(null, x);
                        }
                        ActualTemplateSelectorWrapper local2 = column.FilterEditorHeaderTemplate.With<DataTemplate, ActualTemplateSelectorWrapper>(evaluator);
                        ActualTemplateSelectorWrapper selector = local2;
                        if (local2 == null)
                        {
                            ActualTemplateSelectorWrapper local3 = local2;
                            selector = (ActualTemplateSelectorWrapper) column.ActualHeaderTemplateSelector;
                        }
                        return new HeaderAppearance(column.HeaderCaption, selector);
                    };
                }
                Func<ColumnBase, HeaderAppearance> getHeaderAppearance = func1;
                Func<IEnumerable<ColumnBase>, IList<Tree<VisualFilteringColumn, HeaderAppearanceAccessor>>> gridColumnsToContainers = delegate (IEnumerable<ColumnBase> columns) {
                    Func<ColumnBase, VisualFilteringColumn> <>9__10;
                    Func<ColumnBase, bool> <>9__8;
                    Func<ColumnBase, bool> predicate = <>9__8;
                    if (<>9__8 == null)
                    {
                        Func<ColumnBase, bool> local1 = <>9__8;
                        predicate = <>9__8 = c => (filterMode == ColumnForestFilterMode.All) || c.ActualAllowFilterEditor;
                    }
                    Func<ColumnBase, int> keySelector = <>c.<>9__991_9;
                    if (<>c.<>9__991_9 == null)
                    {
                        Func<ColumnBase, int> local2 = <>c.<>9__991_9;
                        keySelector = <>c.<>9__991_9 = c => c.ActualVisibleIndex;
                    }
                    Func<ColumnBase, VisualFilteringColumn> selector = <>9__10;
                    if (<>9__10 == null)
                    {
                        Func<ColumnBase, VisualFilteringColumn> local3 = <>9__10;
                        selector = <>9__10 = c => new VisualFilteringColumn(c.FieldName, () => getHeaderAppearance(c));
                    }
                    return columns.Where<ColumnBase>(predicate).OrderBy<ColumnBase, int>(keySelector).Select<ColumnBase, VisualFilteringColumn>(selector).Select<VisualFilteringColumn, Tree<VisualFilteringColumn, HeaderAppearanceAccessor>>(new Func<VisualFilteringColumn, Tree<VisualFilteringColumn, HeaderAppearanceAccessor>>(Tree<VisualFilteringColumn, HeaderAppearanceAccessor>.CreateLeaf)).ToArray<Tree<VisualFilteringColumn, HeaderAppearanceAccessor>>();
                };
                Func<IEnumerable<BandBase>, IList<Tree<VisualFilteringColumn, HeaderAppearanceAccessor>>> func = gridBandsToContainersRecursive => delegate (IEnumerable<BandBase> bands) {
                    Func<BandBase, int> keySelector = <>c.<>9__991_14;
                    if (<>c.<>9__991_14 == null)
                    {
                        Func<BandBase, int> local1 = <>c.<>9__991_14;
                        keySelector = <>c.<>9__991_14 = c => c.ActualVisibleIndex;
                    }
                    return bands.OrderBy<BandBase, int>(keySelector).SelectMany<BandBase, Tree<VisualFilteringColumn, HeaderAppearanceAccessor>>(delegate (BandBase b) {
                        IList<Tree<VisualFilteringColumn, HeaderAppearanceAccessor>> children = (b.ColumnsCore.Count > 0) ? gridColumnsToContainers(b.ColumnsCore.Cast<ColumnBase>()) : gridBandsToContainersRecursive.Value(b.BandsCore.Cast<BandBase>());
                        return (b.OverlayHeaderByChildren ? children : Tree<VisualFilteringColumn, HeaderAppearanceAccessor>.CreateGroup(() => new HeaderAppearance(b.HeaderCaption, b.ActualHeaderTemplateSelector), children).Yield<Tree<VisualFilteringColumn, HeaderAppearanceAccessor>>());
                    }).ToArray<Tree<VisualFilteringColumn, HeaderAppearanceAccessor>>();
                }.WithReturnValue<Func<IEnumerable<BandBase>, IList<Tree<VisualFilteringColumn, HeaderAppearanceAccessor>>>>();
                return (this.BandsCore.Count == 0) ? ((IEnumerable<Tree<VisualFilteringColumn, HeaderAppearanceAccessor>>) gridColumnsToContainers(this.ColumnsCore.Cast<ColumnBase>())) : ((IEnumerable<Tree<VisualFilteringColumn, HeaderAppearanceAccessor>>) func(this.BandsCore.Cast<BandBase>()));
            }, delegate {
                DevExpress.Xpf.Editors.Filtering.AllowedGroupFilters? allowedGroupFilters;
                DataViewBase dataView = this.DataView;
                if (dataView != null)
                {
                    allowedGroupFilters = dataView.AllowedGroupFilters;
                }
                else
                {
                    DataViewBase local1 = dataView;
                    allowedGroupFilters = null;
                }
                DevExpress.Xpf.Editors.Filtering.AllowedGroupFilters? nullable = allowedGroupFilters;
                return ((nullable != null) ? nullable.GetValueOrDefault() : DevExpress.Xpf.Editors.Filtering.AllowedGroupFilters.All).ToCoreFilters();
            }, () => !this.DataProviderBase.IsVirtualSource, new Func<IEnumerable<FormatConditionFilter>>(this.GetFormatConditionFilters), new Func<FormatConditionFilterInfo, CriteriaOperator>(this.SubstituteTopBottomFilter));

        private unsafe FilterRestrictions CreateFilterRestrictions(ColumnBase c)
        {
            AllowedDataAnalysisFilters? nullable8;
            AllowedDataAnalysisFilters? nullable1;
            AllowedDataAnalysisFilters? nullable14;
            DevExpress.Xpf.Core.FilteringUI.AllowedAnyOfFilters? nullable15;
            DevExpress.Xpf.Core.FilteringUI.AllowedUnaryFilters? nullable16;
            DevExpress.Xpf.Core.FilteringUI.AllowedDateTimeFilters? nullable17;
            DevExpress.Xpf.Core.FilteringUI.AllowedBinaryFilters? nullable18;
            DevExpress.Xpf.Core.FilteringUI.AllowedBetweenFilters? nullable19;
            AllowedDataAnalysisFilters? nullable20;
            FilterRestrictions restrictions = this.DataProviderBase.IsVirtualSource ? FilterRestrictions.None() : FilterRestrictions.All();
            DevExpress.Xpf.Core.FilteringUI.AllowedAnyOfFilters? nullable = null;
            DevExpress.Xpf.Core.FilteringUI.AllowedUnaryFilters? nullable2 = null;
            DevExpress.Xpf.Core.FilteringUI.AllowedDateTimeFilters? nullable3 = null;
            DevExpress.Xpf.Core.FilteringUI.AllowedBinaryFilters? nullable4 = null;
            DevExpress.Xpf.Core.FilteringUI.AllowedBetweenFilters? nullable5 = null;
            AllowedCustomDateFilters? customDate = null;
            AllowedDataAnalysisFilters allowedDataAnalysisFilters = restrictions.AllowedDataAnalysisFilters;
            DataViewBase dataView = this.DataView;
            if (dataView != null)
            {
                nullable1 = restrictions.GetAllowedDataAnalysisFilters(c);
            }
            else
            {
                FilterRestrictions* local1 = &restrictions;
                nullable8 = null;
                nullable1 = nullable8;
            }
            AllowedDataAnalysisFilters? nullable7 = nullable1;
            if (nullable7 != null)
            {
                nullable14 = new AllowedDataAnalysisFilters?(allowedDataAnalysisFilters & ((AllowedDataAnalysisFilters) nullable7.GetValueOrDefault()));
            }
            else
            {
                nullable8 = null;
                nullable14 = nullable8;
            }
            restrictions = dataView.Update((DevExpress.Xpf.Core.FilteringUI.AllowedAnyOfFilters?) customDate, (DevExpress.Xpf.Core.FilteringUI.AllowedUnaryFilters?) nullable5, (DevExpress.Xpf.Core.FilteringUI.AllowedDateTimeFilters?) nullable4, (DevExpress.Xpf.Core.FilteringUI.AllowedBinaryFilters?) nullable3, (DevExpress.Xpf.Core.FilteringUI.AllowedBetweenFilters?) nullable2, (AllowedCustomDateFilters?) nullable, nullable14);
            if (c == null)
            {
                return restrictions;
            }
            DevExpress.Xpf.Grid.AllowedAnyOfFilters?* nullablePtr1 = &c.AllowedAnyOfFilters;
            if (nullablePtr1 != null)
            {
                nullable15 = new DevExpress.Xpf.Core.FilteringUI.AllowedAnyOfFilters?(nullablePtr1.GetValueOrDefault().ToCoreFilters());
            }
            else
            {
                DevExpress.Xpf.Grid.AllowedAnyOfFilters?* local2 = nullablePtr1;
                nullable = null;
                nullable15 = nullable;
            }
            DevExpress.Xpf.Grid.AllowedUnaryFilters?* nullablePtr2 = &c.AllowedUnaryFilters;
            if (nullablePtr2 != null)
            {
                nullable16 = new DevExpress.Xpf.Core.FilteringUI.AllowedUnaryFilters?(nullablePtr2.GetValueOrDefault().ToCoreFilters());
            }
            else
            {
                DevExpress.Xpf.Grid.AllowedUnaryFilters?* local3 = nullablePtr2;
                nullable2 = null;
                nullable16 = nullable2;
            }
            DevExpress.Xpf.Grid.AllowedDateTimeFilters?* nullablePtr3 = &c.AllowedDateTimeFilters;
            if (nullablePtr3 != null)
            {
                nullable17 = new DevExpress.Xpf.Core.FilteringUI.AllowedDateTimeFilters?(nullablePtr3.GetValueOrDefault().ToCoreFilters());
            }
            else
            {
                DevExpress.Xpf.Grid.AllowedDateTimeFilters?* local4 = nullablePtr3;
                nullable3 = null;
                nullable17 = nullable3;
            }
            DevExpress.Xpf.Grid.AllowedBinaryFilters?* nullablePtr4 = &c.AllowedBinaryFilters;
            if (nullablePtr4 != null)
            {
                nullable18 = new DevExpress.Xpf.Core.FilteringUI.AllowedBinaryFilters?(nullablePtr4.GetValueOrDefault().ToCoreFilters());
            }
            else
            {
                DevExpress.Xpf.Grid.AllowedBinaryFilters?* local5 = nullablePtr4;
                nullable4 = null;
                nullable18 = nullable4;
            }
            DevExpress.Xpf.Grid.AllowedBetweenFilters?* nullablePtr5 = &c.AllowedBetweenFilters;
            if (nullablePtr5 != null)
            {
                nullable19 = new DevExpress.Xpf.Core.FilteringUI.AllowedBetweenFilters?(nullablePtr5.GetValueOrDefault().ToCoreFilters());
            }
            else
            {
                DevExpress.Xpf.Grid.AllowedBetweenFilters?* local6 = nullablePtr5;
                nullable5 = null;
                nullable19 = nullable5;
            }
            customDate = null;
            nullable7 = c.AllowedDataAnalysisFilters;
            allowedDataAnalysisFilters = restrictions.AllowedDataAnalysisFilters;
            if (nullable7 != null)
            {
                nullable20 = new AllowedDataAnalysisFilters?(((AllowedDataAnalysisFilters) nullable7.GetValueOrDefault()) & allowedDataAnalysisFilters);
            }
            else
            {
                nullable8 = null;
                nullable20 = nullable8;
            }
            return restrictions.Update(nullable15, nullable16, nullable17, nullable18, nullable19, customDate, nullable20);
        }

        protected virtual FormatConditionFilter CreateFormatConditionFilter(FormatConditionBase conditionBase)
        {
            Type type;
            FormatCondition source = conditionBase as FormatCondition;
            if ((source == null) || (source.ValueRule == ConditionRule.None))
            {
                return null;
            }
            DataColumnInfo info1 = this.DataProviderBase.Columns[source.FieldName];
            if (info1 != null)
            {
                type = info1.Type;
            }
            else
            {
                DataColumnInfo local1 = info1;
                type = null;
            }
            Type targetType = type;
            Func<object, object> func = x => ((x == null) || (targetType == null)) ? x : TypeCastHelper.TryCast(x, targetType);
            object obj2 = func(source.Value1);
            object obj3 = func(source.Value2);
            CriteriaOperator filter = FormatDisplayInfoHelper.GetCriteria(source.ValueRule, source.Expression, source.FieldName, obj2, obj3);
            return new FormatConditionFilter(source, () => filter, () => this.viewCore.GetFilterOperatorCustomText_NoSubstitute(filter), source.Format, new FormatConditionFilterInfo(source.FieldName, source.ValueRule.ToFilterType(), (source.ValueRule == ConditionRule.Expression) ? source.Expression : obj2, obj3), source.ApplyToRow);
        }

        private GenerateBandWrapper CreateGenerateBandWrapper(DevExpress.Xpf.Data.DataProviderBase dataProvider)
        {
            GenerateBandWrapper generator = new GenerateBandWrapper(null, bandWrapper => this.GetGenerateEditorsWrapper(bandWrapper));
            LayoutGroupInfo rootGroupInfo = new LayoutGroupInfo(null, 0, 0);
            Func<DataColumnInfo, bool> predicate = <>c.<>9__752_1;
            if (<>c.<>9__752_1 == null)
            {
                Func<DataColumnInfo, bool> local1 = <>c.<>9__752_1;
                predicate = <>c.<>9__752_1 = x => x.Visible && !x.Unbound;
            }
            Func<DataColumnInfo, PropertyDescriptor> selector = <>c.<>9__752_2;
            if (<>c.<>9__752_2 == null)
            {
                Func<DataColumnInfo, PropertyDescriptor> local2 = <>c.<>9__752_2;
                selector = <>c.<>9__752_2 = x => x.PropertyDescriptor;
            }
            EditorsSource.GenerateEditors(rootGroupInfo, ((IEntityProperties) new ReflectionEntityProperties(dataProvider.Columns.Cast<DataColumnInfo>().Where<DataColumnInfo>(predicate).ToArray<DataColumnInfo>().Select<DataColumnInfo, PropertyDescriptor>(selector), this.DataProviderBase.ItemType, true, null)).AllProperties, generator, null, GenerateEditorOptions.ForGridRuntime(), false, true, null, true);
            generator.MoveColumnWrappersDown();
            return generator;
        }

        protected GenerateColumnMerger CreateGenerateColumnMerger(GenerateBandWrapper bandWrapper, bool forceClearOldColumns, bool forcePopulateColumns, bool ignoreKeepOld) => 
            new GenerateColumnMerger(this, bandWrapper, forceClearOldColumns, forcePopulateColumns, ignoreKeepOld);

        protected internal virtual GridFilterColumn CreateGridFilterColumn(ColumnBase column, bool ignoreColumnFilterMode = false)
        {
            if (column == null)
            {
                return null;
            }
            GridFilterColumn column2 = this.DataView.CreateFilterColumn(column, this.SupportDomainDataSource, this.IsWcfSource());
            column2.FieldName = column.FieldName;
            column2.ColumnType = ((column.ColumnFilterMode != ColumnFilterMode.DisplayText) || ignoreColumnFilterMode) ? ((this.DataProviderBase.Columns[column.FieldName] != null) ? this.DataProviderBase.Columns[column.FieldName].Type : (this.GetDesignTimeFilterColumnType(column) ?? typeof(string))) : typeof(string);
            return column2;
        }

        protected abstract PeerCacheBase CreatePeerCache();
        internal abstract SortInfoCollectionBase CreateSortInfo();
        internal abstract ISummaryItemOwner CreateSummariesCollection(SummaryItemCollectionType collectionType);
        internal abstract DevExpress.Xpf.Grid.SummaryItemBase CreateSummaryItem();
        internal CriteriaOperatorValue CreateVirtualSourceFilter(CriteriaOperator filterCriteriaForDataProvider) => 
            new CriteriaOperatorValue(this.SubstituteFilterInternal(filterCriteriaForDataProvider));

        protected internal virtual void DestroyFilterData()
        {
        }

        void INotificationManager.AcceptNotification(DependencyObject sender, NotificationType notification)
        {
            if (!this.IsLoading)
            {
                this.internalNotificationManager.AcceptNotification(sender, notification);
            }
        }

        void INotificationManager.SubscribeRequireMeasure(NotificationType notification, NotificationEventHandler eventHandler)
        {
            this.internalNotificationManager.SubscribeRequireMeasure(notification, eventHandler);
        }

        void INotificationManager.UnsubscribeRequireMeasure(NotificationType notification, NotificationEventHandler eventHandler)
        {
            this.internalNotificationManager.UnsubscribeRequireMeasure(notification, eventHandler);
        }

        bool IValidationAttributeOwner.CalculateValidationAttribute(string columnName, int controllerRow)
        {
            ColumnBase base2 = this.ColumnsCore[columnName];
            return ((base2 != null) && base2.ActualShowValidationAttributeErrors);
        }

        void IDataControllerOwner.Update()
        {
            if (!this.DataSourceChangingLocker.IsLocked)
            {
                this.DataProviderBase.DoRefresh();
            }
        }

        void ICollectionOwner.OnInsertItem(object item)
        {
            base.AddLogicalChild(item);
        }

        void ICollectionOwner.OnRemoveItem(object item)
        {
            base.RemoveLogicalChild(item);
        }

        void IDispalyMemberBindingClient.UpdateColumns()
        {
            this.UpdateColumnsUnboundType();
        }

        void IDispalyMemberBindingClient.UpdateSimpleBinding()
        {
            this.UpdateSimpleBinding();
        }

        protected virtual void DoUpdateRow(int rowHandle)
        {
            this.UpdateRowCore(rowHandle);
        }

        public void EndDataUpdate()
        {
            this.EndDataUpdateCore();
            this.NotifyEndDataUpdate();
        }

        private void EndDataUpdateCore()
        {
            Action<BindingListAdapterBase> action = <>c.<>9__441_0;
            if (<>c.<>9__441_0 == null)
            {
                Action<BindingListAdapterBase> local1 = <>c.<>9__441_0;
                action = <>c.<>9__441_0 = x => x.RaisesItemChangedEvents = true;
            }
            this.DataProviderBase.BindingListAdapter.Do<BindingListAdapterBase>(action);
            IRefreshable refreshableSource = this.DataProviderBase.RefreshableSource;
            if (refreshableSource == null)
            {
                IRefreshable local2 = refreshableSource;
            }
            else
            {
                refreshableSource.Refresh();
            }
            this.DataProviderBase.EndUpdate();
        }

        internal virtual void EndDesignColumnMoverApply()
        {
            this.designColumnMoverLocker.Unlock();
        }

        public override void EndInit()
        {
            this.UpdateUnboundColumnsType();
            Func<DataControlBase, ISupportInitialize> getTarget = <>c.<>9__459_0;
            if (<>c.<>9__459_0 == null)
            {
                Func<DataControlBase, ISupportInitialize> local1 = <>c.<>9__459_0;
                getTarget = <>c.<>9__459_0 = dataControl => dataControl;
            }
            this.GetDataControlOriginationElement().NotifyEndInit(this, getTarget);
            this.rebuildSortInfoPostponedAction.PerformActionOnEndInitIfNeeded(new Action(this.RebuildSortInfo));
            this.loadingCount--;
            this.rePopulateColumnsPostponedAction.PerformActionOnEndInitIfNeeded(new Action(this.OnColumnUnboundChanged));
            this.endInitLocker.DoLockedAction(delegate {
                if (base.IsInitialized)
                {
                    this.OnInitialized(EventArgs.Empty);
                }
                base.EndInit();
            });
            if (!ReferenceEquals(this.DataView.Parent, this))
            {
                base.AddLogicalChild(this.DataView);
            }
            this.OnDataChanged(true, true, false, false);
            this.InitializeSelection();
        }

        protected internal virtual void EndRestoreOffset()
        {
            if (this.scrollOffsetIsImmediate)
            {
                this.scrollOffsetIsImmediate = false;
                this.DataView.ImmediateActionsManager.EnqueueAction(() => this.EndRestoreOffsetCore());
            }
            else if ((this.nodeDefinitions != null) && ((this.nodeDefinitions.Count > 0) && (this.nodeDefinitions[0].Row == null)))
            {
                this.DataView.ImmediateActionsManager.EnqueueAction(() => this.EndRestoreOffsetCore());
            }
            else
            {
                this.EndRestoreOffsetCore();
            }
        }

        protected internal virtual void EndRestoreOffsetCore()
        {
            if ((this.nodeDefinitions != null) && (this.CanAdjustScrollOffset && (this.DataView != null)))
            {
                this.CorrectOffsetIfNeeded();
                this.nodeDefinitions = null;
            }
        }

        public void EndSelection()
        {
            Action<DataViewBase> action = <>c.<>9__708_0;
            if (<>c.<>9__708_0 == null)
            {
                Action<DataViewBase> local1 = <>c.<>9__708_0;
                action = <>c.<>9__708_0 = view => view.EndSelectionCore();
            }
            this.DataView.Do<DataViewBase>(action);
        }

        protected virtual void EndUpdateGroupSummary()
        {
        }

        internal void EnumerateThisAndOwnerDataControls(Action<DataControlBase> action)
        {
            action(this);
            this.DataControlOwner.EnumerateOwnerDataControls(action);
        }

        internal void EnumerateThisAndOwnerDetailDescriptor(Action<DetailDescriptorBase> action)
        {
            this.DataControlOwner.EnumerateOwnerDetailDescriptors(action);
        }

        internal void EnumerateThisAndParentDataControls(Action<DataControlBase> action)
        {
            this.EnumerateThisAndParentDataControls((dataControl, index) => action(dataControl), -1);
        }

        internal void EnumerateThisAndParentDataControls(Action<DataControlBase, int> action, int visibleIndex)
        {
            action(this, visibleIndex);
            this.DataControlParent.EnumerateParentDataControls(action);
        }

        private void FinalizeClonedDetail()
        {
            this.DataView.FinalizeClonedDetail();
        }

        internal static DataViewBase FindCurrentView(DependencyObject d) => 
            FindElementWithAttachedPropertyValue<DataViewBase>(d, CurrentViewProperty);

        internal static T FindElementWithAttachedPropertyValue<T>(DependencyObject d, DependencyProperty attachedProperty) where T: class
        {
            DependencyObject obj2 = LayoutHelper.FindLayoutOrVisualParentObject(d, element => element.GetValue(attachedProperty) != null, false, null);
            if (obj2 != null)
            {
                return (T) obj2.GetValue(attachedProperty);
            }
            return default(T);
        }

        internal int FindFirstInnerChildScrollIndex()
        {
            int scrollIndexWithDetails = 0;
            this.DataControlParent.EnumerateParentDataControls(delegate (DataControlBase dataControl, int index) {
                int scrollIndex = dataControl.DataProviderBase.ConvertVisibleIndexToScrollIndex(index, dataControl.DataView.AllowFixedGroupsCore);
                scrollIndexWithDetails += scrollIndex;
                scrollIndexWithDetails += dataControl.MasterDetailProvider.CalcVisibleDetailRowsCountBeforeRow(scrollIndex);
            });
            return scrollIndexWithDetails;
        }

        internal int FindFirstInnerChildScrollIndex(int visibleIndex)
        {
            int rowHandleByVisibleIndexCore = this.GetRowHandleByVisibleIndexCore(visibleIndex);
            if (this.DataView.AllowFixedGroupsCore)
            {
                while ((visibleIndex < (this.VisibleRowCount - 1)) && (this.DataProviderBase.IsGroupRowHandle(rowHandleByVisibleIndexCore) && this.DataProviderBase.IsGroupRowExpanded(rowHandleByVisibleIndexCore)))
                {
                    visibleIndex++;
                    rowHandleByVisibleIndexCore = this.GetRowHandleByVisibleIndexCore(visibleIndex);
                }
            }
            return (this.DataView.ConvertVisibleIndexToScrollIndex(visibleIndex) - this.MasterDetailProvider.CalcVisibleDetailRowsCountForRow(rowHandleByVisibleIndexCore));
        }

        internal DataControlBase FindFirstOriginationDataControl(Func<DataControlBase, bool> condition)
        {
            DataControlBase found = null;
            this.UpdateAllOriginationDataControls(delegate (DataControlBase x) {
                if ((found == null) && condition(x))
                {
                    found = x;
                }
            });
            return found;
        }

        internal DataViewBase FindLastInnerDetailView()
        {
            if ((this.VisibleRowCount == 0) && !this.DataView.IsNewItemRowVisible)
            {
                return null;
            }
            DataViewBase base2 = this.MasterDetailProvider.FindLastInnerDetailView(this.VisibleRowCount - 1);
            return this.DataView;
        }

        internal bool FindNextOuterMasterRow(int visibleIndex, out DataViewBase targetView, out int targetVisibleIndex)
        {
            if (visibleIndex >= (this.VisibleRowCount - 1))
            {
                return this.DataControlParent.FindNextOuterMasterRow(out targetView, out targetVisibleIndex);
            }
            targetView = this.DataView;
            targetVisibleIndex = visibleIndex + 1;
            return true;
        }

        public int FindRow(object value) => 
            this.DataProviderBase.FindRowByRowValue(value);

        public int FindRowByValue(ColumnBase column, object value) => 
            this.FindRowByValue(column.FieldName, value);

        public int FindRowByValue(string fieldName, object value) => 
            this.DataProviderBase.FindRowByValue(fieldName, value, new OperationCompleted[0]);

        internal DataViewBase FindTargetView(object source) => 
            this.MasterDetailProvider.FindTargetView(this.DataView, source);

        internal KeyValuePair<DataViewBase, int> FindViewAndVisibleIndexByCommonVisibleIndex(int commonVisibleIndex) => 
            this.GetRootDataControl().FindViewAndVisibleIndexByCommonVisibleIndexCore(commonVisibleIndex);

        private KeyValuePair<DataViewBase, int> FindViewAndVisibleIndexByCommonVisibleIndexCore(int commonVisibleIndex)
        {
            MasterRowNavigationInfo info = this.MasterDetailProvider.CalcMasterRowNavigationInfo(commonVisibleIndex);
            if (info == null)
            {
                return new KeyValuePair<DataViewBase, int>();
            }
            if (info.IsDetail)
            {
                int rowHandleByVisibleIndexCore = this.GetRowHandleByVisibleIndexCore(info.StartVisibleIndex);
                return this.MasterDetailProvider.FindVisibleDetailDataControl(rowHandleByVisibleIndexCore).FindViewAndVisibleIndexByCommonVisibleIndexCore(info.DetailStartVisibleIndex);
            }
            int startVisibleIndex = info.StartVisibleIndex;
            if (this.DataView.IsNewItemRowVisible)
            {
                startVisibleIndex--;
            }
            return new KeyValuePair<DataViewBase, int>(this.DataView, startVisibleIndex);
        }

        internal bool FindViewAndVisibleIndexByScrollIndex(int scrollIndex, bool forwardIfServiceRow, out DataViewBase targetView, out int targetVisibleIndex) => 
            this.GetRootDataControl().FindViewAndVisibleIndexByScrollIndexCore(scrollIndex, forwardIfServiceRow, out targetView, out targetVisibleIndex);

        internal bool FindViewAndVisibleIndexByScrollIndexCore(int commonScrollIndex, bool forwardIfServiceRow, out DataViewBase targetView, out int targetVisibleIndex)
        {
            MasterRowScrollInfo info = this.MasterDetailProvider.CalcMasterRowScrollInfo(commonScrollIndex);
            if (info == null)
            {
                targetView = null;
                targetVisibleIndex = -1;
                return false;
            }
            int visibleIndex = this.DataProviderBase.ConvertScrollIndexToVisibleIndex(info.StartScrollIndex, this.DataView.AllowFixedGroupsCore);
            if (info.WholeDetailScrolledOut)
            {
                targetView = this.DataView;
                targetVisibleIndex = visibleIndex;
                return true;
            }
            if (!this.MasterDetailProvider.FindViewAndVisibleIndexByScrollIndex(info.DetailStartScrollIndex, visibleIndex, forwardIfServiceRow, out targetView, out targetVisibleIndex))
            {
                targetView = this.DataView;
                if (!forwardIfServiceRow)
                {
                    targetVisibleIndex = visibleIndex;
                }
                else
                {
                    if (visibleIndex == (this.VisibleRowCount - 1))
                    {
                        targetView = null;
                        targetVisibleIndex = -1;
                        return false;
                    }
                    targetVisibleIndex = visibleIndex + 1;
                }
            }
            return true;
        }

        internal void ForceCreateView()
        {
            this.DataView ??= this.CreateDefaultView();
        }

        internal void ForceLoad()
        {
            if (!this.isLoaded)
            {
                this.OnDataChanged(false, true, false, false);
                this.isLoaded = true;
            }
        }

        public static DataViewBase GetActiveView(DependencyObject element)
        {
            if (element == null)
            {
                throw new ArgumentNullException("element");
            }
            return (DataViewBase) element.GetValue(ActiveViewProperty);
        }

        internal CriteriaOperator GetActualFilterCriteria() => 
            this.IsFilterEnabled ? this.FilterCriteria : null;

        internal static ColumnSortOrder GetActualSortOrder(ColumnSortOrder columnSortOrder) => 
            (columnSortOrder == ColumnSortOrder.None) ? ColumnSortOrder.Ascending : columnSortOrder;

        protected internal abstract bool GetAddNewColumns();
        protected internal bool GetAllowInitiallyFocusedRow() => 
            !this.AllowInitiallyFocusedRow ? ((this.DataProviderBase != null) ? ((this.DataProviderBase.CurrentControllerRow != -2147483648) || (this.restoreLayoutLocker.IsLocked && ((this.restoreLayoutCurrentRowIsNull != null) && !this.restoreLayoutCurrentRowIsNull.Value))) : true) : true;

        public string GetCellDisplayText(int rowHandle, string fieldName) => 
            this.GetCellDisplayTextCore(rowHandle, this.ColumnsCore[fieldName]);

        protected string GetCellDisplayTextCore(int rowHandle, ColumnBase column) => 
            this.viewCore.GetColumnDisplayText(this.GetCellValue(rowHandle, column.FieldName), column, new int?(rowHandle));

        protected internal virtual object GetCellValue(RowData rowData, string fieldName) => 
            this.DataProviderBase.GetRowValue(rowData.RowHandleCore.Value, (!rowData.GetIsVisible() || !rowData.IsReady) ? null : rowData.Row, fieldName);

        public object GetCellValue(int rowHandle, string fieldName) => 
            this.GetCellValueCore(rowHandle, fieldName);

        internal object GetCellValueCore(int rowHandle, ColumnBase column) => 
            this.GetCellValue(rowHandle, column.FieldName);

        internal virtual object GetCellValueCore(int rowHandle, string fieldName) => 
            this.DataProviderBase.GetRowValue(rowHandle, fieldName);

        public CriteriaOperator GetColumnFilterCriteria(ColumnBase column)
        {
            bool flag;
            return this.GetColumnFilterCriteriaCore(column, out flag, true);
        }

        public CriteriaOperator GetColumnFilterCriteria(string fieldName) => 
            (fieldName != null) ? ((fieldName != string.Empty) ? this.FilteringContext.GetFilter(fieldName) : this.FilterCriteria) : null;

        protected internal CriteriaOperator GetColumnFilterCriteriaCore(ColumnBase column, out bool isFiltered, bool useGroupFields = true)
        {
            if (column == null)
            {
                isFiltered = false;
                return null;
            }
            if (useGroupFields)
            {
                FilteringColumn column2 = this.CreateFilteringColumn(column.FieldName, () => column, useGroupFields);
                CriteriaOperator @operator = this.FilteringContext.GetFilter(column2, column.FieldName);
                isFiltered = @operator != null;
                return @operator;
            }
            FilteringColumn column3 = this.CreateFilteringColumn(column.FieldName, () => column, false);
            CriteriaOperator filter = this.FilteringContext.GetFilter(column3, column.FieldName);
            isFiltered = filter != null;
            if (!isFiltered && !string.IsNullOrEmpty(column.FilterPopupGroupFields))
            {
                FilteringColumn column4 = this.CreateFilteringColumn(column.FieldName, () => column, true);
                CriteriaOperator operator3 = this.FilteringContext.GetFilter(column4, column.FieldName);
                isFiltered = operator3 != null;
            }
            return filter;
        }

        public string GetColumnFilterString(ColumnBase column) => 
            CriteriaOperator.ToString(this.GetColumnFilterCriteria(column));

        public string GetColumnFilterString(string fieldName) => 
            CriteriaOperator.ToString(this.GetColumnFilterCriteria(fieldName));

        internal int GetCommonVisibleIndex(int rowHandle)
        {
            int rowVisibleIndexByHandleCore = this.GetRowVisibleIndexByHandleCore(rowHandle);
            int commonVisibleIndex = 0;
            if (this.DataView.IsNewItemRowVisible && (rowHandle == -2147483647))
            {
                rowVisibleIndexByHandleCore = 0;
                commonVisibleIndex = -1;
            }
            this.EnumerateThisAndParentDataControls(delegate (DataControlBase dataControl, int index) {
                int num;
                commonVisibleIndex += dataControl.MasterDetailProvider.CalcDetailRowsCountBeforeRow(index);
                commonVisibleIndex += index;
                if (dataControl.DataView.IsNewItemRowVisible)
                {
                    num = commonVisibleIndex;
                    commonVisibleIndex = num + 1;
                }
                if (!ReferenceEquals(dataControl, this))
                {
                    num = commonVisibleIndex;
                    commonVisibleIndex = num + 1;
                }
            }, rowVisibleIndexByHandleCore);
            return commonVisibleIndex;
        }

        private CriteriaOperator GetCriteriaOperator(XtraPropertyInfo xtraPropertyInfo)
        {
            XtraPropertyInfo info = xtraPropertyInfo.ChildProperties["FilterOperator"];
            return ((info != null) ? (info.ValueToObject(typeof(CriteriaOperator)) as CriteriaOperator) : CriteriaOperator.Parse(xtraPropertyInfo.ChildProperties["FilterString"].ValueToObject(typeof(string)) as string, new object[0]));
        }

        public static DataViewBase GetCurrentView(DependencyObject element)
        {
            if (element == null)
            {
                throw new ArgumentNullException("element");
            }
            return (DataViewBase) element.GetValue(CurrentViewProperty);
        }

        public static INotifyCurrentViewChanged GetCurrentViewChangedListener(DependencyObject element)
        {
            if (element == null)
            {
                throw new ArgumentNullException("element");
            }
            return (INotifyCurrentViewChanged) element.GetValue(CurrentViewChangedListenerProperty);
        }

        internal IDataControlOriginationElement GetDataControlOriginationElement() => 
            this.dataControlOriginationElement ?? NullDataControlOriginationElement.Instance;

        protected virtual Type GetDesignTimeFilterColumnType(ColumnBase column) => 
            DesignerProperties.GetIsInDesignMode(this) ? this.DesignTimeAdorner.GetDefaultColumnType(column) : null;

        protected internal virtual IList GetDragDropItemsSource()
        {
            if ((this.DataProviderBase != null) && this.DataProviderBase.IsVirtualSource)
            {
                throw new NotSupportedException("The GridControl bound to the Virtual data source does not support the drag-and-drop feature.");
            }
            return (!(this.ItemsSource is System.Data.DataView) ? (this.ItemsSource as IList) : new DataTableDragDropAdapter((System.Data.DataView) this.ItemsSource));
        }

        protected internal virtual FilterColumn GetFilterColumnFromGridColumn(ColumnBase column, bool getUniqueColumnValues = true, bool useFilterClauseHelper = true, bool ignoreColumnFilterMode = false)
        {
            if (column == null)
            {
                return null;
            }
            GridFilterColumn column2 = this.CreateGridFilterColumn(column, ignoreColumnFilterMode);
            column2.ColumnCaption = column.HeaderCaption;
            DataTemplate template = (column.Image == null) ? column.FilterEditorHeaderTemplate : this.CreateFilterHeaderTemplate(column);
            if (template != null)
            {
                column2.HeaderTemplate = template;
            }
            else
            {
                column2.HeaderTemplateSelector = column.ActualHeaderTemplateSelector;
            }
            if ((column.ColumnFilterMode != ColumnFilterMode.DisplayText) || ignoreColumnFilterMode)
            {
                BaseEditSettings actualEditSettings = column.ActualEditSettings;
                if (!ColumnFilterInfoHelper.CanUseEditSettingsInFilterEditor(actualEditSettings))
                {
                    actualEditSettings = new TextEditSettings();
                }
                column2.EditSettings = actualEditSettings;
            }
            else
            {
                ComboBoxEditSettings settings = new ComboBoxEditSettings {
                    IsTextEditable = true,
                    AutoComplete = true
                };
                if (getUniqueColumnValues)
                {
                    settings.ItemsSource = this.DataProviderBase.GetUniqueColumnValues(column, true, false, false, null);
                }
                column2.EditSettings = settings;
            }
            column2.UseFilterClauseHelper = useFilterClauseHelper;
            return column2;
        }

        protected CriteriaOperator GetFilterCriteriaForDataProvider(CriteriaOperator op)
        {
            CriteriaOperator[] operands = new CriteriaOperator[] { op, this.ExtraFilter, this.FixedFilter };
            return CriteriaOperator.And(operands);
        }

        internal IEnumerable<FormatConditionFilter> GetFormatConditionFilters()
        {
            ITableView viewCore = this.viewCore as ITableView;
            if (viewCore == null)
            {
                return Enumerable.Empty<FormatConditionFilter>();
            }
            Func<FormatConditionFilter, bool> predicate = <>c.<>9__995_1;
            if (<>c.<>9__995_1 == null)
            {
                Func<FormatConditionFilter, bool> local1 = <>c.<>9__995_1;
                predicate = <>c.<>9__995_1 = x => x != null;
            }
            return viewCore.FormatConditions.Select<FormatConditionBase, FormatConditionFilter>(delegate (FormatConditionBase conditionBase) {
                if (conditionBase.IsEnabled)
                {
                    bool flag1;
                    ColumnBase base1 = this.ColumnsCore[conditionBase.FieldName];
                    if (base1 != null)
                    {
                        flag1 = base1.ColumnFilterMode == ColumnFilterMode.DisplayText;
                    }
                    else
                    {
                        ColumnBase local1 = base1;
                        flag1 = false;
                    }
                    if (!flag1 && (conditionBase.Info.FormatCore != null))
                    {
                        return this.CreateFormatConditionFilter(conditionBase);
                    }
                }
                return null;
            }).Where<FormatConditionFilter>(predicate);
        }

        internal virtual object GetFormatConditionSummary(string fieldName, ConditionalFormatSummaryType type, TopBottomFilterKind filterKind) => 
            null;

        protected abstract EditorsGeneratorBase GetGenerateEditorsWrapper(GenerateBandWrapper bandWrapper);
        protected internal abstract IList<DevExpress.Xpf.Grid.SummaryItemBase> GetGroupSummaries();
        internal abstract object GetGroupSummaryValue(int rowHandle, int summaryItemIndex);
        internal CriteriaOperatorInfo GetInfoFromCriteriaOperator(CriteriaOperator criteriaOperator)
        {
            Func<CriteriaOperator, object> raiseCustomDisplayCriteria = <>c.<>9__639_0;
            if (<>c.<>9__639_0 == null)
            {
                Func<CriteriaOperator, object> local1 = <>c.<>9__639_0;
                raiseCustomDisplayCriteria = <>c.<>9__639_0 = x => x;
            }
            return new CriteriaOperatorInfo(criteriaOperator, DisplayCriteriaHelper.GetFilterDisplayText(criteriaOperator, CreateDisplayCriteriaHelperClient(this.DataView), false, raiseCustomDisplayCriteria));
        }

        internal virtual bool GetIsExpandButtonVisible() => 
            false;

        protected virtual object GetItemsSource() => 
            this.ItemsSource;

        protected internal DataControlBase GetMasterGridCore()
        {
            DataViewBase base2 = this.DataControlParent.FindMasterView();
            return base2?.DataControl;
        }

        internal virtual int GetMasterRowHandleInternal() => 
            -2147483648;

        internal DataControlBase GetOriginationDataControl() => 
            this.GetDataControlOriginationElement().GetOriginationControl(this);

        internal List<int> GetParentFixedRowsScrollIndexes(int visibleIndex)
        {
            List<int> scrollIndexes = new List<int>();
            this.CollectParentFixedRowsScrollIndexes(visibleIndex, scrollIndexes);
            return scrollIndexes;
        }

        internal DataDependentEntity GetPropertyChangeDependency(string changedPropertyName) => 
            this.PropertySchemeController.DataDependentEntityGraph.GetPropertyChangeDependency(changedPropertyName);

        internal virtual int[] GetRecursiveSelectedRowHandles() => 
            this.GetSelectedRowHandles();

        protected internal abstract bool GetRemoveOldColumns();
        internal DataControlBase GetRootDataControl()
        {
            DataControlBase originationDataControl = this.GetOriginationDataControl();
            DataControlBase rootDataControl = null;
            originationDataControl.EnumerateThisAndOwnerDataControls(delegate (DataControlBase dataControl) {
                rootDataControl = dataControl;
            });
            return rootDataControl;
        }

        public object GetRow(int rowHandle) => 
            this.DataProviderBase.GetRowValue(rowHandle);

        internal int GetRowHandleByVisibleIndexCore(int visibleIndex) => 
            (!this.viewCore.ShouldDisplayLoadingRow || (visibleIndex != (this.VisibleRowCount - 1))) ? ((!this.viewCore.ShouldDisplayBottomRow || (visibleIndex != (this.VisibleRowCount - 1))) ? this.DataProviderBase.GetControllerRow(visibleIndex) : -2147483647) : -2147483646;

        public DependencyObject GetRowState(int rowHandle, bool createNewIfNotExist) => 
            this.DataView.ViewBehavior.GetRowState(rowHandle) ?? this.DataProviderBase.GetRowState(rowHandle, createNewIfNotExist);

        internal int GetRowVisibleIndexByHandleCore(int rowHandle)
        {
            if ((this.DataView == null) || ((!this.DataView.ShouldDisplayLoadingRow || (rowHandle != -2147483646)) && (!this.DataView.ShouldDisplayBottomRow || !this.DataView.IsNewItemRowHandle(rowHandle))))
            {
                return this.DataProviderBase.GetRowVisibleIndexByHandle(rowHandle);
            }
            return (this.VisibleRowCount - 1);
        }

        public int[] GetSelectedRowHandles()
        {
            Func<DataViewBase, int[]> evaluator = <>c.<>9__715_0;
            if (<>c.<>9__715_0 == null)
            {
                Func<DataViewBase, int[]> local1 = <>c.<>9__715_0;
                evaluator = <>c.<>9__715_0 = view => view.GetSelectedRowHandlesCore();
            }
            return this.DataView.Return<DataViewBase, int[]>(evaluator, null);
        }

        protected abstract string GetSerializationAppName();
        internal static IEnumerator GetSingleObjectEnumerator(object obj)
        {
            object[] objArray2;
            if (obj == null)
            {
                objArray2 = new object[0];
            }
            else
            {
                objArray2 = new object[] { obj };
            }
            return objArray2.GetEnumerator();
        }

        public object GetTotalSummaryValue(DevExpress.Xpf.Grid.SummaryItemBase item) => 
            this.DataProviderBase.GetTotalSummaryValue(item);

        protected internal object[] GetUniqueColumnValues(ColumnBase column, bool includeFilteredOut, bool roundDateTime, CriteriaOperator columnFilter, bool? implyNullLikeEmptyStringWhenFiltering = new bool?(), CriteriaOperator remainingFilter = null)
        {
            System.Func<Either<ValueAndCount[], object[]>, Func<object[]>, object[]> func1 = <>c.<>9__501_0;
            if (<>c.<>9__501_0 == null)
            {
                System.Func<Either<ValueAndCount[], object[]>, Func<object[]>, object[]> local1 = <>c.<>9__501_0;
                func1 = <>c.<>9__501_0 = delegate (Either<ValueAndCount[], object[]> uniqueValues, Func<object[]> defaultResult) {
                    if (uniqueValues == null)
                    {
                        return defaultResult();
                    }
                    Func<ValueAndCount[], object[]> left = <>c.<>9__501_1;
                    if (<>c.<>9__501_1 == null)
                    {
                        Func<ValueAndCount[], object[]> local1 = <>c.<>9__501_1;
                        left = <>c.<>9__501_1 = delegate (ValueAndCount[] left) {
                            Func<ValueAndCount, object> selector = <>c.<>9__501_2;
                            if (<>c.<>9__501_2 == null)
                            {
                                Func<ValueAndCount, object> local1 = <>c.<>9__501_2;
                                selector = <>c.<>9__501_2 = x => x.Value;
                            }
                            return left.Select<ValueAndCount, object>(selector).ToArray<object>();
                        };
                    }
                    return uniqueValues.Match<object[]>(left, <>c.<>9__501_3 ??= right => right);
                };
            }
            System.Func<Either<ValueAndCount[], object[]>, Func<object[]>, object[]> uniqueValuesToArray = func1;
            Action<object[]> callback = delegate (object[] values) {
                column.ColumnFilterInfo.UpdateCurrentPopupData(values);
            };
            CustomUniqueValuesEventArgs args = this.RaiseCustomUniqueValuesEvent(column, includeFilteredOut, roundDateTime, columnFilter, delegate (object valuesObject) {
                callback(valuesObject as object[]);
            });
            if (!args.Handled)
            {
                bool? nullable = implyNullLikeEmptyStringWhenFiltering;
                return this.DataProviderBase.GetUniqueColumnValues(column, includeFilteredOut, roundDateTime, (nullable != null) ? nullable.GetValueOrDefault() : this.ImplyNullLikeEmptyStringWhenFiltering, CriteriaOperator.And(this.FixedFilter, remainingFilter));
            }
            System.Threading.Tasks.Task<Either<ValueAndCount[], object[]>> uniqueValuesAsync = args.GetUniqueValuesAsync();
            if (uniqueValuesAsync.Status != TaskStatus.RanToCompletion)
            {
                uniqueValuesAsync.ContinueWith(delegate (System.Threading.Tasks.Task<Either<ValueAndCount[], object[]>> t) {
                    if (t.Status == TaskStatus.Faulted)
                    {
                        throw t.Exception;
                    }
                    Func<object[]> func1 = <>c.<>9__501_8;
                    if (<>c.<>9__501_8 == null)
                    {
                        Func<object[]> local1 = <>c.<>9__501_8;
                        func1 = <>c.<>9__501_8 = () => new object[0];
                    }
                    callback(uniqueValuesToArray(t.Result, func1));
                }, CancellationToken.None, TaskContinuationOptions.None, TaskScheduler.FromCurrentSynchronizationContext());
                return new object[] { AsyncServerModeDataController.NoValue };
            }
            Func<object[]> func2 = <>c.<>9__501_6;
            if (<>c.<>9__501_6 == null)
            {
                Func<object[]> local2 = <>c.<>9__501_6;
                func2 = <>c.<>9__501_6 = () => new object[] { AsyncServerModeDataController.NoValue };
            }
            return uniqueValuesToArray(uniqueValuesAsync.Result, func2);
        }

        protected internal virtual string GetValidationAttributesErrorText(object value, string columnName, int rowHandle) => 
            this.DataProviderBase?.GetValidationAttributesErrorText(value, rowHandle, columnName);

        internal List<KeyValuePair<DataViewBase, int>> GetViewVisibleIndexChain(int innerVisibleIndex)
        {
            List<KeyValuePair<DataViewBase, int>> chain = new List<KeyValuePair<DataViewBase, int>>(3);
            if (innerVisibleIndex >= 0)
            {
                chain.Insert(0, new KeyValuePair<DataViewBase, int>(this.DataView, innerVisibleIndex));
            }
            this.CollectViewVisibleIndexChain(chain);
            return chain;
        }

        protected virtual void GroupByColumn(ColumnBase column)
        {
        }

        internal virtual void GroupByCore(ColumnBase column)
        {
        }

        internal bool HasColumnWithAllowedTotalSummary()
        {
            for (int i = 0; i < this.ColumnsCore.Count; i++)
            {
                if (this.ColumnsCore[i].ActualAllowTotalSummary())
                {
                    return true;
                }
            }
            return false;
        }

        internal void InitializeCurrentColumn()
        {
            if (!this.HasValue(CurrentColumnProperty) && (this.DataView.NavigationStyle == GridViewNavigationStyle.Cell))
            {
                foreach (ColumnBase base2 in this.DataView.VisibleColumnsCore)
                {
                    if (base2.AllowFocus)
                    {
                        this.CurrentColumn = base2;
                        break;
                    }
                }
            }
        }

        private void InitializeSelection()
        {
            if (!this.endInitLocker.IsLocked)
            {
                List<DataControlBase> list1 = new List<DataControlBase>();
                list1.Add(this);
                IEnumerable<DataControlBase> source = list1;
                if (this.IsOriginationDataControl())
                {
                    Func<DataControlBase, bool> predicate = <>c.<>9__626_0;
                    if (<>c.<>9__626_0 == null)
                    {
                        Func<DataControlBase, bool> local1 = <>c.<>9__626_0;
                        predicate = <>c.<>9__626_0 = delegate (DataControlBase x) {
                            Func<DataControlBase, bool> func1 = <>c.<>9__626_1;
                            if (<>c.<>9__626_1 == null)
                            {
                                Func<DataControlBase, bool> local1 = <>c.<>9__626_1;
                                func1 = <>c.<>9__626_1 = owner => owner.IsSync;
                            }
                            return x.GetThisAndOwnerDataControls().All<DataControlBase>(func1);
                        };
                    }
                    source = this.GetAllOriginationDataControls().Where<DataControlBase>(predicate);
                }
                Action<DataControlBase> action = <>c.<>9__626_2;
                if (<>c.<>9__626_2 == null)
                {
                    Action<DataControlBase> local2 = <>c.<>9__626_2;
                    action = <>c.<>9__626_2 = delegate (DataControlBase dataControl) {
                        dataControl.IsSelectionInitialized = true;
                        if (dataControl.IsOriginationDataControl())
                        {
                            dataControl.SynchronizeCurrentItem();
                        }
                        dataControl.DataView.SelectionStrategy.OnDataControlInitialized();
                    };
                }
                source.ForEach<DataControlBase>(action);
            }
        }

        protected virtual void InitiallyFocusedRowAfterFiltering(object row)
        {
            if (!this.AllowInitiallyFocusedRow && ((row != null) && ((this.DataView != null) && ((this.DataView.FocusedRowHandle != -2147483648) && (this.GetRow(this.DataView.FocusedRowHandle) != row)))))
            {
                this.DataProviderBase.CurrentControllerRow = -2147483648;
            }
        }

        internal void InvalidateDesignTimeDataSource()
        {
            this.OnItemsSourceChanged(this.ItemsSource, this.ItemsSource);
        }

        private void InvalidateDesignTimeDataSourceCore()
        {
            if (!this.updateDataSourceLocker.IsLocked)
            {
                this.updateDataSourceLocker.Lock();
                base.Dispatcher.BeginInvoke(delegate {
                    this.DesignTimeAdorner.InvalidateDataSource();
                    this.updateDataSourceLocker.Unlock();
                }, new object[0]);
            }
        }

        internal void InvalidateDetailScrollInfoCache(bool updateVisibleIndicesCache = false)
        {
            this.EnumerateThisAndParentDataControls(delegate (DataControlBase dataControl) {
                dataControl.MasterDetailProvider.InvalidateDetailScrollInfoCache();
                if (updateVisibleIndicesCache)
                {
                    dataControl.DataProviderBase.InvalidateVisibleIndicesCache();
                }
            });
        }

        private bool IsContainsSmartColumns()
        {
            bool flag;
            using (IEnumerator enumerator = this.ColumnsCore.GetEnumerator())
            {
                while (true)
                {
                    if (enumerator.MoveNext())
                    {
                        ColumnBase current = (ColumnBase) enumerator.Current;
                        if (!current.IsSmart)
                        {
                            continue;
                        }
                        flag = true;
                    }
                    else
                    {
                        return false;
                    }
                    break;
                }
            }
            return flag;
        }

        internal bool IsDissalowSortingColumn(ColumnBase column) => 
            column.IsUnbound && ((this.DataProviderBase != null) && this.DataProviderBase.IsICollectionView);

        internal bool IsExpandedFixedRow(int visibleIndex)
        {
            int rowHandleByVisibleIndexCore = this.GetRowHandleByVisibleIndexCore(visibleIndex);
            return (!this.DataProviderBase.IsGroupRowHandle(rowHandleByVisibleIndexCore) ? this.MasterDetailProvider.IsMasterRowExpanded(rowHandleByVisibleIndexCore, null) : (this.DataView.AllowFixedGroupsCore && this.DataProviderBase.IsGroupRowExpanded(rowHandleByVisibleIndexCore)));
        }

        protected internal bool IsFirst(int index) => 
            (index == 0) || ((this.viewCore != null) && (this.viewCore.FirstVisibleIndexOnPage == index));

        internal bool IsGroupRowHandleCore(int rowHandle) => 
            this.DataProviderBase.IsGroupRowHandle(rowHandle);

        protected internal bool IsLast(int index) => 
            index == this.LastRowIndex;

        private bool IsMultiRowSelection(MultiSelectMode selectionMode) => 
            (selectionMode == MultiSelectMode.MultipleRow) || (selectionMode == MultiSelectMode.Row);

        private bool IsObsoleteProperty(PropertyDescriptor p) => 
            p.Attributes[typeof(ObsoleteAttribute)] != null;

        internal bool IsOriginationDataControl() => 
            ReferenceEquals(this, this.GetOriginationDataControl());

        internal bool IsOriginationDataControlCore() => 
            this.IsOriginationDataControl() && !ReferenceEquals(this.GetRootDataControl(), this);

        protected internal virtual bool IsRowUpdateEnqueued(object row) => 
            false;

        internal bool IsRowVisibleCore(int rowHandle) => 
            this.DataProviderBase.IsRowVisible(rowHandle);

        protected virtual bool IsSortInfoChanged(IList<SortDefinition> newSortInfo, int newGroupCount)
        {
            int num;
            IList<SortDefinition> list = this.ConvertSortInfoToList(this.SortInfoCore, out num);
            return ((num == newGroupCount) ? !list.SafeListsEqual<SortDefinition>(newSortInfo) : true);
        }

        private bool IsSpecificSerializationProperty(AllowPropertyEventArgs e) => 
            (e != null) ? ((e.Source is BandBase) && (!ReferenceEquals(e.DependencyProperty, BaseColumn.HeaderProperty) ? e.Allow : false)) : false;

        internal bool IsValidRowHandleCore(int rowHandle) => 
            this.DataProviderBase.IsValidRowHandle(rowHandle);

        internal bool IsWcfSource()
        {
            if (this.ItemsSource != null)
            {
                Type type = this.ItemsSource.GetType();
                foreach (string str in this.WcfSources)
                {
                    if (type.Name == str)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public void MergeColumnFilters(CriteriaOperator filterCriteria)
        {
            Dictionary<OperandProperty, CriteriaOperator> dictionary = new Dictionary<OperandProperty, CriteriaOperator>(CriteriaColumnAffinityResolver.SplitByColumnsWithOptionalLegacyFallback(this.FilterCriteria));
            foreach (KeyValuePair<OperandProperty, CriteriaOperator> pair in CriteriaColumnAffinityResolver.SplitByColumnsWithOptionalLegacyFallback(filterCriteria))
            {
                dictionary[pair.Key] = pair.Value;
            }
            this.FilterCriteria = CriteriaOperator.And(dictionary.Values);
        }

        public void MergeColumnFilters(string filterString)
        {
            this.MergeColumnFilters(CriteriaOperator.TryParse(filterString, new object[0]));
        }

        private void MRUFilterListCountChanged()
        {
            if (this.MRUFiltersInternal.Count > this.MRUFilterListCount)
            {
                for (int i = this.MRUFilterListCount; i < this.MRUFiltersInternal.Count; i++)
                {
                    this.MRUFiltersInternal.RemoveAt(this.MRUFilterListCount);
                }
            }
        }

        internal bool NavigateToFirstChildDetailCell(bool isTabNavigation)
        {
            DataViewBase base2 = this.MasterDetailProvider.FindFirstDetailView(this.DataProviderBase.CurrentIndex);
            if (base2 == null)
            {
                return false;
            }
            base2.NavigateToFirstRow();
            base2.MoveFirstNavigationIndex(isTabNavigation);
            return true;
        }

        internal bool NavigateToFirstChildDetailRow()
        {
            DataViewBase base2 = this.MasterDetailProvider.FindFirstDetailView(this.DataProviderBase.CurrentIndex);
            if (base2 == null)
            {
                return false;
            }
            base2.NavigateToFirstRow();
            return true;
        }

        internal void NavigateToFirstMasterRow()
        {
            DataViewBase base2 = this.DataControlParent.FindMasterView();
            if (base2 != null)
            {
                base2.MoveFocusedRow(0);
            }
        }

        internal void NavigateToLastMasterRow()
        {
            DataViewBase base2 = this.DataControlParent.FindMasterView();
            if (base2 != null)
            {
                base2.MoveFocusedRow(base2.DataControl.VisibleRowCount - 1);
            }
        }

        internal void NavigateToMasterCell(bool isTabNavigation)
        {
            DataViewBase targetView = null;
            int targetVisibleIndex = -1;
            if (this.DataControlParent.FindMasterRow(out targetView, out targetVisibleIndex))
            {
                targetView.MoveFocusedRow(targetVisibleIndex);
                targetView.MoveLastNavigationIndex(isTabNavigation);
            }
        }

        internal void NavigateToMasterRow()
        {
            DataViewBase targetView = null;
            int targetVisibleIndex = -1;
            if (this.DataControlParent.FindMasterRow(out targetView, out targetVisibleIndex))
            {
                targetView.MoveFocusedRow(targetVisibleIndex);
            }
        }

        internal void NavigateToNextOuterMasterCell(bool isTabNavigation)
        {
            DataViewBase targetView = null;
            int targetVisibleIndex = -1;
            if (this.DataControlParent.FindNextOuterMasterRow(out targetView, out targetVisibleIndex))
            {
                targetView.MoveFocusedRow(targetVisibleIndex);
                targetView.MoveFirstNavigationIndex(isTabNavigation);
            }
        }

        internal void NavigateToNextOuterMasterRow()
        {
            DataViewBase targetView = null;
            int targetVisibleIndex = -1;
            if (this.DataControlParent.FindNextOuterMasterRow(out targetView, out targetVisibleIndex))
            {
                targetView.MoveFocusedRow(targetVisibleIndex);
            }
        }

        internal bool NavigateToPreviousInnerDetailCell(bool isTabNavigation)
        {
            if (this.DataProviderBase.CurrentIndex == 0)
            {
                return false;
            }
            DataViewBase base2 = this.MasterDetailProvider.FindLastInnerDetailView(this.DataProviderBase.CurrentIndex - 1);
            if (base2 == null)
            {
                return false;
            }
            base2.NavigateToLastRow();
            base2.MoveLastNavigationIndex(isTabNavigation);
            return true;
        }

        internal bool NavigateToPreviousInnerDetailRow()
        {
            if (this.DataProviderBase.CurrentIndex == 0)
            {
                return false;
            }
            DataViewBase base2 = this.MasterDetailProvider.FindLastInnerDetailView(this.DataProviderBase.CurrentIndex - 1);
            if (base2 == null)
            {
                return false;
            }
            base2.NavigateToLastRow();
            return true;
        }

        private bool NeedCalculateSummaries(ISummaryItemOwner summaries)
        {
            if (summaries == null)
            {
                return false;
            }
            if (this.ColumnsCore.Count > 0)
            {
                return true;
            }
            Func<DevExpress.Xpf.Grid.SummaryItemBase, bool> predicate = <>c.<>9__591_0;
            if (<>c.<>9__591_0 == null)
            {
                Func<DevExpress.Xpf.Grid.SummaryItemBase, bool> local1 = <>c.<>9__591_0;
                predicate = <>c.<>9__591_0 = summaryItem => (summaryItem.SummaryType == SummaryItemType.Count) && (summaryItem.Alignment != GridSummaryItemAlignment.Default);
            }
            return (summaries.FirstOrDefault<DevExpress.Xpf.Grid.SummaryItemBase>(predicate) != null);
        }

        private void NotifyBandsLayoutChanged()
        {
            if (this.DataView != null)
            {
                this.DataView.ViewBehavior.NotifyBandsLayoutChanged();
            }
        }

        private void NotifyColumnAddedRemoved(IList items)
        {
            if (this._FilteringContext == null)
            {
                FilteringUIContext local1 = this._FilteringContext;
            }
            else
            {
                string fieldName;
                ColumnBase local2 = items.OfType<ColumnBase>().FirstOrDefault<ColumnBase>();
                if (local2 != null)
                {
                    fieldName = local2.FieldName;
                }
                else
                {
                    ColumnBase local3 = local2;
                    fieldName = null;
                }
                this._FilteringContext.NotifyColumnAddedRemoved(fieldName);
            }
        }

        private void NotifyColumnsReset()
        {
            this.DataSourceChangingLocker.DoIfNotLocked(delegate {
                if (this._FilteringContext == null)
                {
                    FilteringUIContext local1 = this._FilteringContext;
                }
                else
                {
                    this._FilteringContext.NotifyColumnsReset();
                }
            });
        }

        internal void NotifyEditSettingsChanged(string fieldName)
        {
            if (this._FilteringContext == null)
            {
                FilteringUIContext local1 = this._FilteringContext;
            }
            else
            {
                this._FilteringContext.NotifyEditSettingsChanged(fieldName);
            }
        }

        private void NotifyEndDataUpdate()
        {
            if (this._FilteringContext == null)
            {
                FilteringUIContext local1 = this._FilteringContext;
            }
            else
            {
                this._FilteringContext.NotifyEndDataUpdate();
            }
        }

        internal void NotifyFilteringContext(ListChangedEventArgs e)
        {
            if (!this.DataProviderBase.IsUpdateLocked)
            {
                if (this._FilteringContext == null)
                {
                    FilteringUIContext local1 = this._FilteringContext;
                }
                else
                {
                    this._FilteringContext.NotifyListChanged(e);
                }
            }
        }

        internal void NotifyFormatConditionsChanged()
        {
            if (this._FilteringContext == null)
            {
                FilteringUIContext local1 = this._FilteringContext;
            }
            else
            {
                this._FilteringContext.NotifyFormatConditionsChanged();
            }
        }

        internal void NotifyGroupFieldsChanged(string fieldName)
        {
            if (this._FilteringContext == null)
            {
                FilteringUIContext local1 = this._FilteringContext;
            }
            else
            {
                this._FilteringContext.NotifyGroupFieldsChanged(fieldName);
            }
        }

        internal void NotifyRoundDateChanged(string fieldName)
        {
            if (this._FilteringContext == null)
            {
                FilteringUIContext local1 = this._FilteringContext;
            }
            else
            {
                this._FilteringContext.NotifyRoundDateChanged(fieldName);
            }
        }

        private int? ObjectToInt(object obj)
        {
            int result = 0;
            if (int.TryParse(obj.ToString(), out result))
            {
                return new int?(result);
            }
            return null;
        }

        private void OnAddColumn(ColumnBase column)
        {
            bool? oldAllowColumnFiltering = null;
            this.UpdateColumnFilteringCounters(new bool?(column.ActualAllowFilterEditor), oldAllowColumnFiltering);
            oldAllowColumnFiltering = null;
            this.UpdateColumnCellMergeCounter(oldAllowColumnFiltering, column.AllowCellMerge);
            if (column.IsAsyncLookupBusy)
            {
                this.UpdateColumnInstantFeedbackCounter(true);
            }
        }

        private void OnAllowComplexPropertyUpdatesChanged()
        {
            if (this.viewCore != null)
            {
                this.UpdatePropertySchemeController();
                this.viewCore.OnAllowComplexPropertyUpdatesChanged();
                this.UpatePropertyChangeSubscriptionMode();
            }
        }

        protected virtual void OnAllowLiveDataShapingChanged()
        {
            this.AllowLiveDataShapingCore = this.AllowLiveDataShaping;
            if (!this.DataProviderBase.IsSelfManagedItemsSource)
            {
                this.DataProviderBase.OnDataSourceChanged();
                this.UpatePropertyChangeSubscriptionMode();
            }
        }

        public override void OnApplyTemplate()
        {
            if (this.themeLoader != null)
            {
                this.themeLoader.Content = null;
            }
            this.themeLoader = base.GetTemplateChild("PART_ThemesLoader") as ContentControl;
            Binding binding = new Binding("View");
            binding.Source = this;
            this.themeLoader.SetBinding(ContentControl.ContentProperty, binding);
            base.OnApplyTemplate();
        }

        protected virtual void OnAutoGenerateColumnsChanged()
        {
            base.SetCurrentValue(AutoPopulateColumnsProperty, this.AutoGenerateColumns != AutoGenerateColumnsMode.None);
            this.InvalidateDesignTimeDataSourceCore();
        }

        protected virtual void OnAutoPopulateColumnsChanged()
        {
            this.SetCurrentValue(AutoGenerateColumnsProperty, ((bool) base.GetValue(AutoPopulateColumnsProperty)) ? ((this.AutoGenerateColumns == AutoGenerateColumnsMode.None) ? ((object) 1) : ((object) this.AutoGenerateColumns)) : ((object) 0));
        }

        private static void OnBandsItemsGeneratorTemplatePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            ((DataControlBase) d).BandsSourceChangedLocker.DoLockedAction(() => ItemsAttachedBehaviorCore<DataControlBase, BandBase>.OnItemsGeneratorTemplatePropertyChanged(d, e, BandsItemsAttachedBehaviorProperty));
            foreach (object obj2 in ((DataControlBase) d).BandsCore)
            {
                ((BandBase) obj2).RefreshSource();
            }
        }

        protected void OnBandsLayoutChanged(BandsLayoutBase oldValue, BandsLayoutBase newValue)
        {
            this.bandsLayoutCore = newValue;
            Action<DataViewBase> action = <>c.<>9__808_0;
            if (<>c.<>9__808_0 == null)
            {
                Action<DataViewBase> local1 = <>c.<>9__808_0;
                action = <>c.<>9__808_0 = x => x.ViewBehavior.OnBandsLayoutChanged();
            }
            this.DataView.Do<DataViewBase>(action);
            this.ColumnsCore.BeginUpdate();
            if (oldValue != null)
            {
                oldValue.DataControl = null;
            }
            if (newValue != null)
            {
                newValue.DataControl = this;
            }
            this.ColumnsCore.EndUpdate();
            this.UpdateBandsLayoutInLogicalTree(oldValue, newValue);
            this.UpdateViewActualColumnChooserTemplate();
            this.UpdateBandsLayoutProperties();
            this.NotifyBandsLayoutChanged();
        }

        private static void OnBandsSourceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            DataControlBase base2 = (DataControlBase) d;
            base2.ColumnsCore.BeginUpdate();
            base2.lockBandsSourceUpdate.DoLockedAction(delegate {
                Func<DataControlBase, IList> getTargetFunction = <>c.<>9__84_1;
                if (<>c.<>9__84_1 == null)
                {
                    Func<DataControlBase, IList> local1 = <>c.<>9__84_1;
                    getTargetFunction = <>c.<>9__84_1 = grid => grid.BandsCore;
                }
                ItemsAttachedBehaviorExtendedLock<DataControlBase, BandBase>.OnItemsSourceExtLockPropertyChanged(d, e, BandsItemsAttachedBehaviorProperty, BandGeneratorTemplateProperty, BandGeneratorTemplateSelectorProperty, BandGeneratorStyleProperty, getTargetFunction, <>c.<>9__84_2 ??= grid => grid.CreateBand(), null, null, null, null, true, true, null, false);
                if ((e.NewValue == null) && (((DataControlBase) d).ColumnsSource != null))
                {
                    Func<DataControlBase, IList> func2 = <>c.<>9__84_3;
                    if (<>c.<>9__84_3 == null)
                    {
                        Func<DataControlBase, IList> local3 = <>c.<>9__84_3;
                        func2 = <>c.<>9__84_3 = grid => grid.ColumnsCore;
                    }
                    ItemsAttachedBehaviorCore<DataControlBase, ColumnBase>.OnItemsSourcePropertyChanged(d, e, ColumnsItemsAttachedBehaviorProperty, ColumnGeneratorTemplateProperty, ColumnGeneratorTemplateSelectorProperty, ColumnGeneratorStyleProperty, func2, <>c.<>9__84_4 ??= grid => grid.CreateColumn(), null, null, null, null, true, true, null, false);
                }
            });
            base2.ColumnsCore.EndUpdate();
            if (base2.BandsLayoutCore != null)
            {
                ((IBandsOwner) base2.BandsLayoutCore).OnColumnsChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset));
            }
        }

        protected virtual void OnClearAndNotifyBase()
        {
            if (this.AutomationPeer != null)
            {
                this.AutomationPeer.ClearLogicalPeerCache();
            }
        }

        protected static object OnCoerceView(DependencyObject d, object baseValue) => 
            baseValue ?? ((DataControlBase) d).CreateDefaultView();

        protected internal void OnColumnAdded(ColumnBase column)
        {
            this.ApplyColumnSmartProperties(column);
            this.UpdateSortingFromInvalidSortCache(column);
            this.UpdateGroupingFromInvalidGroupCache(column);
            this.OnUnboundColumnAddedOrRemoved(column);
            if (column != null)
            {
                column.OwnerAddedColumn();
            }
        }

        protected internal void OnColumnAdding(ColumnBase column)
        {
            this.ApplyColumnSorting(column);
            if ((column.VisibleIndex >= 0) && ((this.DataView != null) && (!this.IsLoading && !this.ColumnsCore.IsLockUpdate)))
            {
                this.DataView.ApplyColumnVisibleIndex(column, -1);
            }
            if (column.ColumnFilterMode == ColumnFilterMode.DisplayText)
            {
                this.DestroyFilterData();
            }
        }

        protected internal void OnColumnCollectionEndUpdate()
        {
            this.PopulateUnboundColumnsIfNeeded();
            if (!this.IsDeserializing && ((this.viewCore == null) || (!this.GetDataControlOriginationElement().ColumnsChangedLocker.IsLocked && !this.syncronizationLocker.IsLocked)))
            {
                this.syncronizationLocker.DoLockedAction(new Action(this.RebuildSortInfo));
                this.OnDataChanged(true, true, false, false);
            }
            else
            {
                Action<DataViewBase> action = <>c.<>9__671_0;
                if (<>c.<>9__671_0 == null)
                {
                    Action<DataViewBase> local1 = <>c.<>9__671_0;
                    action = <>c.<>9__671_0 = view => view.RebuildColumns();
                }
                this.DataView.Do<DataViewBase>(action);
            }
        }

        protected internal void OnColumnRemoved(ColumnBase column)
        {
            this.OnUnboundColumnAddedOrRemoved(column);
            if (this.DataView != null)
            {
                this.DataView.SelectionStrategy.UnselectCellsByColumn(column);
            }
        }

        internal virtual void OnColumnsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (!this.GetDataControlOriginationElement().ColumnsChangedLocker.IsLocked)
            {
                this.UpdatePropertySchemeController();
                this.UpdateColumnSummaries(e.Action);
                this.UpdateDefaultSorting();
                this.InvalidateDesignTimeDataSourceCore();
                this.DesignTimeAdorner.UpdateDesignTimeInfo();
                if (e.OldItems != null)
                {
                    foreach (ColumnBase base2 in e.OldItems)
                    {
                        this.ClearColumnFilter(base2);
                    }
                }
                if (this.DataView != null)
                {
                    this.DataView.ApplySearchColumns();
                }
                this.GetDataControlOriginationElement().SynchronizationLocker.DoLockedAction(() => this.OnDataCollectionChanged(sender, e));
                if (this.BandsLayoutCore == null)
                {
                    Func<DataControlBase, IList> getCollection = <>c.<>9__585_1;
                    if (<>c.<>9__585_1 == null)
                    {
                        Func<DataControlBase, IList> local1 = <>c.<>9__585_1;
                        getCollection = <>c.<>9__585_1 = dataControl => dataControl.ColumnsCore;
                    }
                    this.GetDataControlOriginationElement().NotifyCollectionChanged(this, getCollection, <>c.<>9__585_2 ??= column => CloneDetailHelper.CloneElement<BaseColumn>((ColumnBase) column, (Action<BaseColumn>) null, (Func<BaseColumn, Locker>) null, (object[]) null), e);
                }
                if (e.Action == NotifyCollectionChangedAction.Add)
                {
                    this.NotifyColumnAddedRemoved(e.NewItems);
                }
                if (e.Action == NotifyCollectionChangedAction.Remove)
                {
                    this.NotifyColumnAddedRemoved(e.OldItems);
                }
                if (e.Action == NotifyCollectionChangedAction.Replace)
                {
                    this.NotifyColumnAddedRemoved(e.OldItems);
                    this.NotifyColumnAddedRemoved(e.NewItems);
                }
                if (e.Action == NotifyCollectionChangedAction.Reset)
                {
                    this.NotifyColumnsReset();
                }
            }
        }

        private static void OnColumnsItemsGeneratorTemplatePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            ItemsAttachedBehaviorCore<DataControlBase, ColumnBase>.OnItemsGeneratorTemplatePropertyChanged(d, e, ColumnsItemsAttachedBehaviorProperty);
            foreach (object obj2 in ((DataControlBase) d).BandsCore)
            {
                ((BandBase) obj2).RefreshSource();
            }
        }

        private static void OnColumnsSourceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (((DataControlBase) d).BandsSource == null)
            {
                Func<DataControlBase, IList> getTargetFunction = <>c.<>9__99_0;
                if (<>c.<>9__99_0 == null)
                {
                    Func<DataControlBase, IList> local1 = <>c.<>9__99_0;
                    getTargetFunction = <>c.<>9__99_0 = grid => grid.ColumnsCore;
                }
                ItemsAttachedBehaviorCore<DataControlBase, ColumnBase>.OnItemsSourcePropertyChanged(d, e, ColumnsItemsAttachedBehaviorProperty, ColumnGeneratorTemplateProperty, ColumnGeneratorTemplateSelectorProperty, ColumnGeneratorStyleProperty, getTargetFunction, <>c.<>9__99_1 ??= grid => grid.CreateColumn(), null, null, null, null, true, true, null, false);
            }
        }

        protected internal virtual void OnColumnUnboundChanged()
        {
            this.RepopuateColumnLocker.DoLockedAction(new Action(this.OnColumnUnboundChangedCore));
        }

        private void OnColumnUnboundChangedCore()
        {
            if (this.LockRepopulateColumnsOnUnboundChanged)
            {
                this.NeedRepopulateColumnsOnUnboundChanged = true;
            }
            else
            {
                this.BeginDataUpdate();
                try
                {
                    this.DataProviderBase.RePopulateColumns();
                    if ((this.DataView != null) && !this.IsDeserializing)
                    {
                        this.SynchronizeDataProvider(false);
                    }
                    if (this._FilteringContext == null)
                    {
                        FilteringUIContext local1 = this._FilteringContext;
                    }
                    else
                    {
                        this._FilteringContext.NotifyColumnUnboundChanged();
                    }
                }
                finally
                {
                    this.EndDataUpdateCore();
                }
                this.UpdateSimpleBinding();
            }
        }

        protected internal void OnColumnUnboundChangedPosponed()
        {
            this.OnColumnUnboundChangedPosponed(this.ColumnsCore.IsLockUpdate);
        }

        private void OnColumnUnboundChangedPosponed(bool isLocked)
        {
            if (isLocked)
            {
                this.doUnboundChangedOnColumnsEndUpdate = true;
            }
            else
            {
                this.rePopulateColumnsPostponedAction.PerformIfNotLoading(new Action(this.OnColumnUnboundChanged), null);
            }
        }

        private void OnCurrentColumnChanged(GridColumnBase oldValue, GridColumnBase newValue)
        {
            this.CurrentColumnCore = newValue;
            if (this.DataView != null)
            {
                if (!ReferenceEquals(this.CurrentColumn, (ColumnBase) this.DataView.GetValue(this.DataView.GetFocusedColumnProperty())))
                {
                    this.DataView.SetValue(this.DataView.GetFocusedColumnProperty(), this.CurrentColumn);
                }
                this.DataView.CurrentColumnChanged(oldValue);
                this.UpdateCurrentCellValue();
            }
            this.RaiseCurrentColumnChanged(oldValue, newValue);
        }

        private void OnCurrentItemChanged(object oldValue, bool raiseEvent)
        {
            if (this.IsOriginationDataControlCore())
            {
                this.CurrentItemChangedLocker.DoLockedActionIfNotLocked(() => this.SetCurrentItemInOriginationGrid());
            }
            else
            {
                if (this.DataView != null)
                {
                    if (this.CurrentItem != this.DataView.GetValue(DataViewBase.FocusedRowProperty))
                    {
                        this.DataView.SetValue(DataViewBase.FocusedRowProperty, this.CurrentItem);
                    }
                    this.CurrentItemChangedLocker.DoLockedActionIfNotLocked(() => this.DataView.SetFocusOnCurrentItem());
                    if (this.IsServerMode)
                    {
                        this.DataView.SelectionStrategy.UpdateSelectedItem();
                    }
                }
                this.UpdateCurrentCellValue();
                if (!this.CurrentItemChangedLocker.IsLocked & raiseEvent)
                {
                    this.RaiseCurrentItemChanged(oldValue, this.CurrentItem);
                }
            }
        }

        private static void OnCurrentViewChanged(DependencyObject dObject, DependencyPropertyChangedEventArgs e)
        {
            INotifyCurrentViewChanged currentViewChangedListener = dObject as INotifyCurrentViewChanged;
            if (currentViewChangedListener != null)
            {
                currentViewChangedListener.OnCurrentViewChanged(dObject);
            }
            else
            {
                currentViewChangedListener = GetCurrentViewChangedListener(dObject);
                if (currentViewChangedListener != null)
                {
                    currentViewChangedListener.OnCurrentViewChanged(dObject);
                }
            }
        }

        private static void OnCurrentViewChangedListenerChanged(DependencyObject dObject, DependencyPropertyChangedEventArgs e)
        {
            INotifyCurrentViewChanged currentViewChangedListener = GetCurrentViewChangedListener(dObject);
            if ((GetCurrentView(dObject) != null) && (currentViewChangedListener != null))
            {
                currentViewChangedListener.OnCurrentViewChanged(dObject);
            }
        }

        protected virtual void OnCustomShouldSerializeProperty(CustomShouldSerializePropertyEventArgs e)
        {
            string name = e.Property.Name;
            if (name == "Columns")
            {
                e.CustomShouldSerialize = new bool?(ReferenceEquals(this.BandsLayoutCore, null));
            }
            else if (name == "Bands")
            {
                e.CustomShouldSerialize = new bool?(this.BandsLayoutCore != null);
            }
            else if (name == "UseFieldNameForSerialization")
            {
                e.CustomShouldSerialize = true;
            }
        }

        private void OnDataChanged(bool synchronize = false, bool rebuildVisibleColumns = true, bool sortUpdate = false, bool updateColumnsDataPropertiesOnly = false)
        {
            if ((this.IsActive & synchronize) && (this.DataView != null))
            {
                this.SynchronizeDataProvider(sortUpdate);
            }
            if (this.DataView != null)
            {
                this.DataView.OnDataChanged(rebuildVisibleColumns, updateColumnsDataPropertiesOnly);
            }
        }

        internal void OnDataCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (!this.ColumnsCore.IsLockUpdate)
            {
                if (this.DataView != null)
                {
                    this.DataView.OnColumnCollectionChanged(e);
                }
                this.OnDataChanged(this.NeedSynchronize || this.ShouldSynchronizeAfterAddColumns(e.NewItems), true, this.SortUpdateLocker.IsLocked, false);
                this.NeedSynchronize = false;
            }
        }

        protected static void OnDataSourceChanged(DependencyObject dObject, DependencyPropertyChangedEventArgs e)
        {
            ((DataControlBase) dObject).OnItemsSourceChanged(e.OldValue, e.NewValue);
        }

        internal void OnDataSourceExtracted(BindingListAdapter bindingAdapter)
        {
            this.PropertySchemeController.OnDataSourceExtracted(bindingAdapter);
        }

        protected virtual void OnDefaultSortingChanged()
        {
            this.UpdateDefaultSorting();
        }

        protected internal virtual bool OnDeserializeAllowProperty(AllowPropertyEventArgs e)
        {
            if ((e.DependencyProperty != null) && e.DependencyProperty.ReadOnly)
            {
                return false;
            }
            StoreLayoutMode storeLayoutMode = DXSerializer.GetStoreLayoutMode(this);
            return ((storeLayoutMode == StoreLayoutMode.UI) ? ((!e.IsSerializing || !this.IsObsoleteProperty(e.Property)) ? (!this.IsSpecificSerializationProperty(e) ? ((e.PropertyId == 1) || (e.IsSerializing && (e.PropertyId == 2))) : true) : false) : (storeLayoutMode != StoreLayoutMode.None));
        }

        private void OnDeserializeAllowPropertyInternal(AllowPropertyEventArgs e)
        {
            e.Allow = this.OnDeserializeAllowProperty(e);
        }

        protected virtual void OnDeserializeClearCollection(XtraItemRoutedEventArgs e)
        {
            string name = e.Item.Name;
            if ((name != "Columns") && (name != "Bands"))
            {
                if (name == "MRUFilters")
                {
                    this.MRUFiltersInternal.Clear();
                }
            }
            else if (!this.GetAddNewColumns())
            {
                this.BandSerializationHelper.ClearCollection(e);
            }
        }

        internal void OnDeserializeCreateBand(XtraCreateCollectionItemEventArgs e)
        {
            IList collection = e.Collection as IList;
            if (collection != null)
            {
                BandBase base2 = this.CreateBand();
                collection.Add(base2);
                if (e.Owner != this)
                {
                    base2.Owner = e.Owner as IBandsOwner;
                }
                else
                {
                    if (this.BandsLayoutCore == null)
                    {
                        this.SetBandsLayout(this.CreateBandsLayout());
                    }
                    base2.Owner = this.BandsLayoutCore;
                }
                e.CollectionItem = base2;
            }
        }

        protected virtual void OnDeserializeCreateCollectionItem(XtraCreateCollectionItemEventArgs e)
        {
            string collectionName = e.CollectionName;
            if (collectionName == "MRUFilters")
            {
                CriteriaOperatorInfo item = new CriteriaOperatorInfo(this.GetCriteriaOperator(e.Item), e.Item.ChildProperties["FilterText"].Value.ToString());
                e.CollectionItem = item;
                this.MRUFiltersInternal.Add(item);
            }
            else if (collectionName == "TotalSummary")
            {
                DevExpress.Xpf.Grid.SummaryItemBase item = this.CreateSummaryItem();
                e.CollectionItem = item;
                this.TotalSummaryCore.Add(item);
            }
            else if (collectionName == "SortInfo")
            {
                GridSortInfo item = new GridSortInfo();
                e.CollectionItem = item;
                this.SortInfoCore.Add(item);
            }
            else if (collectionName == "Columns")
            {
                if (!this.GetRemoveOldColumns())
                {
                    this.OnDeserializeCreateColumn(e);
                }
            }
            else if ((collectionName == "Bands") && !this.GetRemoveOldColumns())
            {
                this.OnDeserializeCreateBand(e);
            }
        }

        internal void OnDeserializeCreateColumn(XtraCreateCollectionItemEventArgs e)
        {
            IList collection = e.Collection as IList;
            if (collection != null)
            {
                ColumnBase base2 = this.CreateColumn();
                XtraPropertyInfo info = e.Item.ChildProperties["FieldName"];
                if (info != null)
                {
                    base2.FieldName = info.Value as string;
                }
                collection.Add(base2);
                if (!this.ColumnsCore.Contains(base2))
                {
                    this.ColumnsCore.Add(base2);
                }
                e.CollectionItem = base2;
            }
        }

        protected virtual void OnDeserializeEnd(EndDeserializingEventArgs e)
        {
            this.DataView.UpdateFilterOnDeserializationLock();
            for (int i = this.SortInfoCore.Count - 1; i >= 0; i--)
            {
                GridSortInfo info = this.SortInfoCore[i];
                if (this.ColumnsCore[info.FieldName] == null)
                {
                    this.OnDeserializeEndBeforeRemoveSummary(i);
                    this.SortInfoCore.RemoveAt(i);
                }
            }
            this.PopulateUnboundColumnsIfNeeded();
            this.TotalSummaryCore.EndUpdate();
            this.EndUpdateGroupSummary();
            this.SortInfoCore.EndUpdate();
            this.BandsCore.EndUpdate();
            if (this.BandsLayoutCore != null)
            {
                this.BandsLayoutCore.FillColumns();
            }
            else
            {
                foreach (ColumnBase base2 in this.ColumnsCore)
                {
                    if (base2.ParentBand != null)
                    {
                        ((ICollectionOwner) base2.ParentBand).OnRemoveItem(base2);
                    }
                    base2.ParentBand = null;
                }
            }
            this.ColumnsCore.EndUpdate();
            this.IsDeserializing = false;
            this.MRUFiltersInternal.EndUpdate();
            this.DataView.EndUpdateColumnsLayout();
            this.BandSerializationHelper = null;
            if (this.BandsLayoutCore != null)
            {
                this.BandsLayoutCore.UpdateBandsLayout();
            }
            this.UpdateFilter();
            this.EndDataUpdate();
            this.RestoreUseFieldNameForSerializationPropertyValue();
            this.DataView.UpdateFilterOnDeserializationUnlock(true);
            this.DataView.OnDataControlDeserializeEnd();
        }

        protected virtual void OnDeserializeEndBeforeRemoveSummary(int summaryIndex)
        {
        }

        protected virtual void OnDeserializeFindCollectionItem(XtraFindCollectionItemEventArgs e)
        {
            string collectionName = e.CollectionName;
            if (collectionName == "Columns")
            {
                this.BandsCore.Clear();
                this.BandSerializationHelper.FindColumn(e);
            }
            else if (collectionName == "Bands")
            {
                this.BandSerializationHelper.FindBand(e, this.BandsLayoutCore);
            }
        }

        protected virtual void OnDeserializeStart(StartDeserializingEventArgs e)
        {
            if ((this.DataView != null) && this.DataView.IsEditing)
            {
                this.DataView.CommitAndCleanEditor();
            }
            this.BeginDataUpdate();
            this.SaveUseFieldNameForSerializationPropertyValue();
            this.DataView.BeginUpdateColumnsLayout();
            this.ColumnsCore.BeginUpdate();
            this.BandsCore.BeginUpdate();
            this.SortInfoCore.BeginUpdate();
            this.BeginUpdateGroupSummary();
            this.TotalSummaryCore.BeginUpdate();
            this.MRUFiltersInternal.BeginUpdate();
            this.ClearMRUFilter();
            this.BandSerializationHelper = new BandedViewSerializationHelper(this);
            this.IsDeserializing = true;
        }

        private void OnDesignTimePropertyChanged()
        {
            this.InvalidateDesignTimeDataSourceCore();
        }

        private static void OnDesignTimePropertyChanged(DependencyObject dObject, DependencyPropertyChangedEventArgs e)
        {
            ((DataControlBase) dObject).OnDesignTimePropertyChanged();
        }

        protected void OnDetailDescriptorChanged(DetailDescriptorBase oldValue)
        {
            if (this.CanAssignDetailDescriptorOwner(oldValue))
            {
                base.RemoveLogicalChild(oldValue);
                oldValue.Owner = null;
            }
            if (this.CanAssignDetailDescriptorOwner(this.DetailDescriptorCore))
            {
                base.AddLogicalChild(this.DetailDescriptorCore);
            }
            this.UpdateMasterDetailProvider();
            this.UpdateDetailContainers(oldValue);
            this.UpdateHasDetailViews();
            if (this.DataView != null)
            {
                this.DataView.RootView.OnDataReset();
            }
        }

        protected virtual void OnEnableSmartColumnsGenerationChanged()
        {
            this.InvalidateDesignTimeDataSourceCore();
        }

        private void OnFilterCriteriaChanged()
        {
            this.FilterCriteriaChangedLocker.DoLockedAction(delegate {
                if (this._FilteringContext == null)
                {
                    FilteringUIContext local1 = this._FilteringContext;
                }
                else
                {
                    this._FilteringContext.SetFilter();
                }
                this.UpdateHasConditionFormatFilters();
                CriteriaOperator @operator = CriteriaOperator.TryParse(this.FilterString, new object[0]);
                string str = (this.FilterCriteria != null) ? this.FilterCriteria.ToString() : string.Empty;
                if (((@operator == null) || !@operator.Equals(this.FilterCriteria)) && (str != this.FilterString))
                {
                    this.FilterString = str;
                }
                this.ApplyFilter(false, false);
                foreach (ColumnBase base2 in this.ColumnsCore)
                {
                    base2.UpdateAutoFilterValueCore();
                }
                if (this.DataView != null)
                {
                    this.DataView.UpdateFilterPanel();
                    this.DataView.UpdateFilterGrid();
                }
                this.UpdatePropertySchemeController();
            });
        }

        private static void OnFilterCriteriaChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            ((DataControlBase) d).OnFilterCriteriaChanged();
        }

        private void OnFilterStringChanged()
        {
            if (this.FilterCriteria == null)
            {
                if (this.FilterString == string.Empty)
                {
                    this.RaisePropertyChanged(FilterStringProperty.Name);
                    return;
                }
            }
            else if (this.FilterCriteria.ToString() == this.FilterString)
            {
                this.RaisePropertyChanged(FilterStringProperty.Name);
                return;
            }
            this.FilterCriteria = CriteriaOperator.TryParse(this.FilterString, new object[0]);
            this.RaisePropertyChanged(FilterStringProperty.Name);
        }

        private static void OnFilterStringChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            ((DataControlBase) d).OnFilterStringChanged();
        }

        private void OnFixedFilterChanged()
        {
            this.ApplyFilter(false, false);
        }

        private static void OnFixedFilterChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            ((DataControlBase) d).OnFixedFilterChanged();
        }

        internal void OnGroupSummaryCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnSummaryCollectionChanged(sender as ISummaryItemOwner, e, SummaryItemCollectionType.Group);
        }

        protected override void OnInitialized(EventArgs e)
        {
            base.OnInitialized(e);
            this.UpdatePropertySchemeController();
            this.ForceCreateView();
            this.SetDataSource();
            this.IsSync = true;
            if (this.DataProviderBase.CollectionViewSource != null)
            {
                this.CollectionViewSyncCurrentItem(this.DataProviderBase.CollectionViewSource);
            }
            this.DataView.RebuildColumns();
            this.InitializeSelection();
        }

        internal void OnIsFilterEnabledChanged()
        {
            this.UpdateHasConditionFormatFilters();
            this.UpdateFilter();
        }

        private static void OnIsFilterEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            ((DataControlBase) d).OnIsFilterEnabledChanged();
        }

        protected override void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e)
        {
            base.OnIsKeyboardFocusWithinChanged(e);
            this.ProcessSearchControlFocus();
            this.DataView.MasterRootRowsContainer.FocusedView.ProcessIsKeyboardFocusWithinChanged();
        }

        internal void OnItemsGenerated()
        {
            this.offsetCorrection = 0;
        }

        protected virtual void OnItemsSourceChanged(object oldValue, object newValue)
        {
            this.DataSourceChangingLocker.DoLockedAction(() => this.updateFocusedRowDataposponedAction.PerformLockedAction(delegate {
                if (!this.IsLoading)
                {
                    if (this.DataView != null)
                    {
                        this.DataView.CommitAndCleanEditor();
                        this.DataView.ValidationError = null;
                    }
                    this.DestroyFilterData();
                    this.ClearClonedDetails();
                    this.SetDataSource();
                    if (this.DataView != null)
                    {
                        this.DataView.OnDataSourceReset();
                        this.DataView.UpdateContentLayout();
                        if (this.DataProviderBase != null)
                        {
                            this.DataProviderBase.EndUpdateBase(this.DataView);
                        }
                    }
                }
            }));
            ICollectionView newSource = newValue as ICollectionView;
            this.SubscribeCollectionViewCurrentItem(oldValue as ICollectionView, newSource);
            this.UpdateUnboundColumnsAllowSorting(newSource);
            this.ReturnCurrentItem();
            if ((this.DataView != null) && (this.DataView.DataProviderBase.DataController != null))
            {
                this.DataView.DataProviderBase.DataController.SummariesIgnoreNullValues = this.DataView.SummariesIgnoreNullValues;
            }
            this.RaiseItemsSourceChanged(oldValue, newValue);
            if (this.DataView != null)
            {
                this.DataView.InvalidateVirtualDataSource();
            }
            if (this._FilteringContext == null)
            {
                FilteringUIContext local1 = this._FilteringContext;
            }
            else
            {
                this._FilteringContext.NotifyItemsSourceChanged();
            }
            if (this.ItemsSource == null)
            {
                this.RaiseVisibleRowCountChanged();
            }
        }

        protected virtual void OnLoaded(object sender, RoutedEventArgs e)
        {
            this.ForceLoad();
            this.InitializeCurrentColumn();
            if (this.DataView != null)
            {
                this.DataView.UpdateVisibleGroupPanel();
                this.DataView.InitMenu();
                this.DataView.UpdateIsKeyboardFocusWithinView();
                this.DataView.ErrorWatch.GridLoaded = true;
                this.DataView.UpdateWatchErrors();
                ITableView dataView = this.DataView as ITableView;
                if ((dataView != null) && this.DataView.IsRootView)
                {
                    dataView.ScrollBarAnnotationsManager.GridLoaded = true;
                    dataView.ScrollBarAnnotationsManager.ScrollBarAnnotationGeneration();
                }
                foreach (ColumnBase base2 in this.ColumnsCore)
                {
                    base2.AutoFilterCriteriaUpdate();
                }
            }
            if (this.AutomationPeer != null)
            {
                this.AutomationPeer.ResetDataPanelPeerCache();
            }
        }

        private static void OnMRUFilterListCountChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            ((DataControlBase) d).MRUFilterListCountChanged();
        }

        protected override void OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs e)
        {
            base.OnPreviewLostKeyboardFocus(e);
            this.DataView.MasterRootRowsContainer.FocusedView.ProcessPreviewLostKeyboardFocus(e);
        }

        protected override void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e)
        {
            base.OnPreviewMouseLeftButtonDown(e);
            this.DataView.ProcessMouseLeftButtonDown(e);
        }

        protected override void OnPreviewMouseLeftButtonUp(MouseButtonEventArgs e)
        {
            base.OnPreviewMouseLeftButtonUp(e);
            this.FindTargetView(e.OriginalSource).ViewBehavior.ProcessMouseLeftButtonUp(e);
        }

        protected override void OnPreviewMouseRightButtonDown(MouseButtonEventArgs e)
        {
            base.OnPreviewMouseRightButtonDown(e);
            this.DataView.ProcessMouseRightButtonDown(e);
        }

        protected override void OnPropertyChanged(DependencyPropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            Func<DataControlBase, DependencyObject> getTarget = <>c.<>9__937_0;
            if (<>c.<>9__937_0 == null)
            {
                Func<DataControlBase, DependencyObject> local1 = <>c.<>9__937_0;
                getTarget = <>c.<>9__937_0 = dataControl => dataControl;
            }
            this.GetDataControlOriginationElement().NotifyPropertyChanged(this, e.Property, getTarget, typeof(DataControlBase));
            if (ReferenceEquals(e.Property, FrameworkElement.LanguageProperty))
            {
                this.UpdateLanguage();
            }
        }

        private void OnRemoveColumn(ColumnBase column)
        {
            bool? newAllowColumnFiltering = null;
            this.UpdateColumnFilteringCounters(newAllowColumnFiltering, new bool?(column.ActualAllowFilterEditor));
            newAllowColumnFiltering = null;
            this.UpdateColumnCellMergeCounter(column.AllowCellMerge, newAllowColumnFiltering);
            if (column.IsAsyncLookupBusy)
            {
                this.UpdateColumnInstantFeedbackCounter(false);
            }
            if (((ItemsAttachedBehaviorExtendedLock<DataControlBase, BandBase>) base.GetValue(BandsItemsAttachedBehaviorProperty)) == null)
            {
                DependencyObjectExtensions.SetDataContext(column, null);
            }
        }

        protected internal virtual void OnRowUpdated(int rowHandle)
        {
        }

        private void OnSelectedItemChanged(object oldValue)
        {
            if (this.DataView != null)
            {
                this.DataView.SelectionStrategy.OnSelectedItemChanged(oldValue);
            }
        }

        private void OnSelectedItemsChanged(IList oldValue)
        {
            switch (oldValue)
            {
                case (INotifyCollectionChanged _):
                    ((INotifyCollectionChanged) oldValue).CollectionChanged -= this.CollectionChangedHandler.Handler;
                    break;

                case (IBindingList _):
                    ((IBindingList) oldValue).ListChanged -= this.ListChangedHandler.Handler;
                    break;
            }
            if (this.SelectedItems is INotifyCollectionChanged)
            {
                ((INotifyCollectionChanged) this.SelectedItems).CollectionChanged += this.CollectionChangedHandler.Handler;
            }
            else if (this.SelectedItems is IBindingList)
            {
                ((IBindingList) this.SelectedItems).ListChanged += this.ListChangedHandler.Handler;
            }
            this.ProcessSelectedItemsChanged();
        }

        private void OnSelectedItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (this.DataView != null)
            {
                this.DataView.SelectionStrategy.OnSelectedItemsChanged(e);
            }
        }

        private void OnSelectedItemsListChanged(object sender, ListChangedEventArgs e)
        {
            NotifyCollectionChangedEventArgs args = null;
            switch (e.ListChangedType)
            {
                case ListChangedType.Reset:
                case ListChangedType.ItemDeleted:
                case ListChangedType.ItemChanged:
                    args = new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset);
                    break;

                case ListChangedType.ItemAdded:
                    args = new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, this.SelectedItems[e.NewIndex], e.NewIndex);
                    break;

                default:
                    break;
            }
            this.OnSelectedItemsCollectionChanged(this, args);
        }

        private void OnSelectionModeChanged(MultiSelectMode oldSelectionMode)
        {
            if ((this.DataView != null) && (!this.IsMultiRowSelection(oldSelectionMode) || !this.IsMultiRowSelection(this.SelectionMode)))
            {
                this.DataView.OnMultiSelectModeChanged();
            }
        }

        internal virtual void OnSortInfoChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.UpdatePropertySchemeController();
            this.syncronizationLocker.DoIfNotLocked(delegate {
                if (this.ColumnsCore.IsLockUpdate)
                {
                    this.NeedSynchronize = true;
                }
                else
                {
                    if (sender == this.SortInfoCore)
                    {
                        this.ClearGroupSummarySortInfo();
                    }
                    if (this.HasCustomRowFilter)
                    {
                        this.OnDataChanged(true, true, e.Action == NotifyCollectionChangedAction.Add, true);
                    }
                    else
                    {
                        this.OnDataChanged(true, true, true, true);
                    }
                }
            });
        }

        private void OnSummaryChanged()
        {
            this.PerformDataResetLockedActionCore(delegate {
                this.SynchronizeSummaryIfAcitve();
                if (this.DataView != null)
                {
                    this.DataView.OnSummaryDataChanged();
                }
            });
        }

        protected internal void OnSummaryCollectionChanged(ISummaryItemOwner summaries, NotifyCollectionChangedEventArgs e, SummaryItemCollectionType collectionType)
        {
            this.UpdateColumnSummaries(summaries, e.Action, collectionType);
            this.OnSummaryChanged();
            this.UpdatePropertySchemeController();
        }

        protected virtual void OnSynchronizeDataProviderException(Exception e)
        {
            if (this.IsDesignMode)
            {
                throw e;
            }
            MessageBox.Show(e.ToString());
        }

        private void OnTotalSummaryCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnSummaryCollectionChanged(sender as ISummaryItemOwner, e, SummaryItemCollectionType.Total);
        }

        private static void OnTotalSummaryItemsGeneratorTemplatePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            ItemsAttachedBehaviorCore<DataControlBase, DevExpress.Xpf.Grid.SummaryItemBase>.OnItemsGeneratorTemplatePropertyChanged(d, e, TotalSummaryItemsAttachedBehaviorProperty);
        }

        private void OnUnboundColumnAddedOrRemoved(ColumnBase column)
        {
            this.UpdateUnboundColumnAllowSorting(column);
            if (column.ShouldRepopulateColumns)
            {
                this.OnColumnUnboundChangedPosponed();
            }
        }

        private void OnUnloaded(object sender, RoutedEventArgs e)
        {
            if (this.DataView != null)
            {
                this.DataView.ForceDestroyColumnChooser();
                this.ResetMenus();
            }
        }

        protected internal virtual void OnUpdateRowsCore()
        {
            if (this.AutomationPeer != null)
            {
                this.AutomationPeer.ClearLogicalPeerCache();
                this.AutomationPeer.ResetDataPanelPeer();
            }
            if (this.viewCore != null)
            {
                this.viewCore.OnUpdateRowsCore();
            }
        }

        private void OnUseFieldNameForSerializationChanged()
        {
            if (this.IsDeserializing)
            {
                this.shouldRestoreUseFieldNameForSerialization = false;
            }
        }

        protected internal virtual void OnViewChanged(DataViewBase oldValue, DataViewBase newValue)
        {
            if (newValue == null)
            {
                this.DataView = newValue = this.DesignTimeAdorner.GetDefaultView(this);
            }
            this.viewCore = newValue;
            this.ValidateMasterDetailConsistency();
            this.ValidateDataProvider(newValue);
            if (newValue != null)
            {
                this.DestroyFilterData();
                if (newValue.Parent is DataControlBase)
                {
                    ((DataControlBase) newValue.Parent).DataView = null;
                }
                newValue.DataControl = this;
                this.UpdateViewActualColumnChooserTemplate();
                this.UpdateBandsLayoutProperties();
                this.SynchronizeCurrentColumn();
                if (!this.IsLoading)
                {
                    newValue.DataProviderBase.DataSource = this.ActualItemsSource;
                }
                if (((newValue != null) && newValue.ViewBehavior.GetServiceUnboundColumns().Any<IColumnInfo>()) || ((oldValue != null) && oldValue.ViewBehavior.GetServiceUnboundColumns().Any<IColumnInfo>()))
                {
                    this.AttachToFormatConditions(FormatConditionChangeType.All);
                }
            }
            foreach (ColumnBase base2 in this.ColumnsCore)
            {
                base2.ChangeOwner();
            }
            this.ApplyNewView();
            if (newValue != null)
            {
                if (!this.IsLoading)
                {
                    base.AddLogicalChild(newValue);
                }
                newValue.InitMenu();
            }
            if (oldValue != null)
            {
                oldValue.ResetMenu();
                oldValue.DataControl = null;
                oldValue.ResetDataProvider();
                base.RemoveLogicalChild(oldValue);
            }
            this.UpdateSearchPanel(oldValue, newValue);
            this.DesignTimeAdorner.UpdateDesignTimeInfo();
            this.UpdateColumnSummaries(NotifyCollectionChangedAction.Reset);
            this.UpdateTotalSummary();
            this.UpdateAllowPartialGrouping();
            this.UpdateHasDetailViews();
        }

        protected static void OnViewChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            ((DataControlBase) d).OnViewChanged((DataViewBase) e.OldValue, (DataViewBase) e.NewValue);
        }

        internal void PerformDataResetLockedActionCore(Action action)
        {
            this.dataResetLocker.DoLockedAction(action);
        }

        public void PopulateColumns()
        {
            this.PopulateColumns(true, true, true, null);
        }

        internal void PopulateColumns(bool forceClearOldColumns, bool forcePopulateColumns, bool ignoreKeepOld, DevExpress.Xpf.Data.DataProviderBase dataProvider = null)
        {
            IEditingContext context = new RuntimeEditingContext(this, null);
            this.PopulateColumnsAndApplyAttributes(context.GetRoot(), forceClearOldColumns, forcePopulateColumns, ignoreKeepOld, dataProvider);
        }

        internal void PopulateColumnsAndApplyAttributes(IModelItem dataControl, bool forceClearOldColumns, bool forcePopulateColumns, bool ignoreKeepOld, DevExpress.Xpf.Data.DataProviderBase dataProvider = null)
        {
            this.PopulateColumnsAndApplyAttributesCore(dataControl, wrapper => this.CreateGenerateColumnMerger(wrapper, forceClearOldColumns, forcePopulateColumns, ignoreKeepOld).FillColumns(dataControl), dataProvider);
        }

        internal void PopulateColumnsAndApplyAttributesCore(IModelItem dataControl, Action<GenerateBandWrapper> generateAction, DevExpress.Xpf.Data.DataProviderBase dataProvider = null)
        {
            dataProvider ??= this.DataProviderBase;
            if ((base.GetValue(ColumnsItemsAttachedBehaviorProperty) == null) && ((base.GetValue(ColumnGeneratorTemplateProperty) != null) || ((base.GetValue(ColumnGeneratorStyleProperty) != null) || (base.GetValue(ColumnGeneratorTemplateSelectorProperty) != null))))
            {
                DependencyPropertyChangedEventArgs e = new DependencyPropertyChangedEventArgs();
                Func<DataControlBase, IList> getTargetFunction = <>c.<>9__755_0;
                if (<>c.<>9__755_0 == null)
                {
                    Func<DataControlBase, IList> local1 = <>c.<>9__755_0;
                    getTargetFunction = <>c.<>9__755_0 = (Func<DataControlBase, IList>) (grid => null);
                }
                ItemsAttachedBehaviorCore<DataControlBase, ColumnBase>.OnItemsSourcePropertyChanged(this, e, ColumnsItemsAttachedBehaviorProperty, ColumnGeneratorTemplateProperty, ColumnGeneratorTemplateSelectorProperty, ColumnGeneratorStyleProperty, getTargetFunction, <>c.<>9__755_1 ??= grid => grid.CreateColumn(), null, null, null, null, true, true, null, false);
            }
            this.ColumnsCore.BeginUpdate();
            try
            {
                this.RemoveAutoGeneratedBands();
                IModelItemCollection collection = ((this.BandsCore.Count == null) ? dataControl : dataControl.Properties["Bands"].Collection[0]).Properties["Columns"].Collection;
                dataProvider.RePopulateColumns();
                if (dataProvider.IsReady)
                {
                    Func<DataColumnInfo, bool> predicate = <>c.<>9__755_2;
                    if (<>c.<>9__755_2 == null)
                    {
                        Func<DataColumnInfo, bool> local3 = <>c.<>9__755_2;
                        predicate = <>c.<>9__755_2 = x => x.Visible && !x.Unbound;
                    }
                    DataColumnInfo[] infoArray = dataProvider.Columns.Cast<DataColumnInfo>().Where<DataColumnInfo>(predicate).ToArray<DataColumnInfo>();
                    GenerateBandWrapper generator = new GenerateBandWrapper(null, bandWrapper => this.GetGenerateEditorsWrapper(bandWrapper));
                    LayoutGroupInfo rootGroupInfo = new LayoutGroupInfo(null, 0, 0);
                    Func<DataColumnInfo, bool> func2 = <>c.<>9__755_4;
                    if (<>c.<>9__755_4 == null)
                    {
                        Func<DataColumnInfo, bool> local4 = <>c.<>9__755_4;
                        func2 = <>c.<>9__755_4 = x => x.Visible && !x.Unbound;
                    }
                    Func<DataColumnInfo, PropertyDescriptor> selector = <>c.<>9__755_5;
                    if (<>c.<>9__755_5 == null)
                    {
                        Func<DataColumnInfo, PropertyDescriptor> local5 = <>c.<>9__755_5;
                        selector = <>c.<>9__755_5 = x => x.PropertyDescriptor;
                    }
                    EditorsSource.GenerateEditors(rootGroupInfo, ((IEntityProperties) new ReflectionEntityProperties(dataProvider.Columns.Cast<DataColumnInfo>().Where<DataColumnInfo>(func2).ToArray<DataColumnInfo>().Select<DataColumnInfo, PropertyDescriptor>(selector), this.DataProviderBase.ItemType, true, null)).AllProperties, generator, null, GenerateEditorOptions.ForGridRuntime(), false, true, null, true);
                    generator.MoveColumnWrappersDown();
                    generateAction(generator);
                }
            }
            finally
            {
                this.ColumnsCore.EndUpdate();
            }
            dataProvider.ScheduleAutoPopulateColumns();
            base.RaiseEvent(new RoutedEventArgs(ColumnsPopulatedEvent));
            base.RaiseEvent(new RoutedEventArgs(AutoGeneratedColumnsEvent));
        }

        internal bool PopulateColumnsIfNeeded(DevExpress.Xpf.Data.DataProviderBase dataProvider = null)
        {
            bool result = false;
            this.syncPropertyLocker.DoLockedAction(delegate {
                this.DesignTimeAdorner.RemoveGeneratedColumns(this);
                if (this.ShouldPopulateColumns() && this.IsOriginationDataControl())
                {
                    this.PopulateColumns(false, false, false, dataProvider);
                    result = true;
                }
            });
            return result;
        }

        internal void PopulateDesignTimeColumns(IModelItem dataControl, bool expandSmartColumns)
        {
            this.PopulateColumnsAndApplyAttributesCore(dataControl, wrapper => new DesignTimeColumnsPopulator(dataControl, this.ColumnType, this.BandType, wrapper, expandSmartColumns).CreateLayout(), null);
        }

        private void PopulateUnboundColumnsIfNeeded()
        {
            if (this.doUnboundChangedOnColumnsEndUpdate)
            {
                this.doUnboundChangedOnColumnsEndUpdate = false;
                this.OnColumnUnboundChangedPosponed(false);
            }
        }

        private void ProcessSearchControlFocus()
        {
            GridControlColumnProviderBase searchPanelColumnProvider = this.DataView.MasterRootRowsContainer.FocusedView.SearchPanelColumnProvider;
            if (base.IsKeyboardFocusWithin && ((searchPanelColumnProvider != null) && (searchPanelColumnProvider.IsSearchLookUpMode && (this.DataView.MasterRootRowsContainer.FocusedView.SearchControl != null))))
            {
                this.DataView.MasterRootRowsContainer.FocusedView.SearchControl.Focus();
            }
        }

        private void ProcessSelectedItemsChanged()
        {
            if (this.DataView != null)
            {
                this.DataView.SelectionStrategy.ProcessSelectedItemsChanged();
            }
        }

        protected internal virtual bool RaiseAutoGeneratingColumn(ColumnBase column)
        {
            AutoGeneratingColumnEventArgs args1 = new AutoGeneratingColumnEventArgs(column);
            args1.RoutedEvent = AutoGeneratingColumnEvent;
            AutoGeneratingColumnEventArgs e = args1;
            base.RaiseEvent(e);
            return !e.Cancel;
        }

        protected internal abstract bool RaiseCopyingToClipboard(CopyingToClipboardEventArgsBase e);
        private void RaiseCurrentColumnChanged(GridColumnBase oldValue, GridColumnBase newValue)
        {
            CurrentColumnChangedEventArgs e = new CurrentColumnChangedEventArgs(this, oldValue, newValue);
            e.RoutedEvent = CurrentColumnChangedEvent;
            this.RaiseEventInOriginationGrid(e);
        }

        internal void RaiseCurrentItemChanged(object oldValue, object newValue)
        {
            this.UpdateCurrentItemInOriginationGrid();
            if (!this.IsOriginationDataControlCore())
            {
                CurrentItemChangedEventArgs e = new CurrentItemChangedEventArgs(this, oldValue, newValue);
                e.RoutedEvent = CurrentItemChangedEvent;
                this.RaiseEventInOriginationGrid(e);
            }
        }

        private CustomUniqueValuesEventArgs RaiseCustomUniqueValuesEvent(ColumnBase column, bool showAllValues, bool roundDateTime, CriteriaOperator columnFilter, Action<object> asyncCompleted)
        {
            CustomUniqueValuesEventArgs args1 = new CustomUniqueValuesEventArgs(column, showAllValues, roundDateTime, delegate (object valuesObject) {
                asyncCompleted(valuesObject);
            }, columnFilter);
            args1.RoutedEvent = CustomUniqueValuesEvent;
            CustomUniqueValuesEventArgs e = args1;
            this.RaiseEventInOriginationGrid(e);
            return e;
        }

        protected void RaiseEventInOriginationGrid(RoutedEventArgs e)
        {
            this.GetOriginationDataControl().RaiseEvent(e);
        }

        protected internal virtual void RaiseFilterChanged()
        {
            this.RaiseGridEventInOriginationGrid(FilterChangedEvent);
        }

        protected internal virtual void RaiseFilterGroupSortChanging(FilterGroupSortChangingEventArgs args)
        {
            this.RaiseEventInOriginationGrid(args);
        }

        protected virtual void RaiseFilterGroupSortChangingEventAndCheckChanges(FilterGroupSortChangingEventArgs filterSortArgs)
        {
            this.RaiseFilterGroupSortChanging(filterSortArgs);
            if (filterSortArgs.FilterChanged)
            {
                this.FilterCriteria = filterSortArgs.GetFilterCriteria();
                if ((this.viewCore != null) && (this.viewCore.SearchString != filterSortArgs.SearchString))
                {
                    this.viewCore.SearchString = filterSortArgs.SearchString;
                }
            }
            if (!this.IsSortInfoChanged(filterSortArgs.SortInfo, filterSortArgs.GroupCount))
            {
                if (filterSortArgs.GroupCount != this.sortInfoCore.GroupCountInternal)
                {
                    this.SortInfoCore.GroupCountInternal = filterSortArgs.GroupCount;
                }
            }
            else
            {
                int num = 0;
                List<GridSortInfo> list = new List<GridSortInfo>();
                foreach (SortDefinition definition in filterSortArgs.SortInfo)
                {
                    num++;
                    GridSortInfo info1 = new GridSortInfo(definition.PropertyName, definition.Direction);
                    GridSortInfo item = new GridSortInfo(definition.PropertyName, definition.Direction);
                    item.GroupIndex = (num < filterSortArgs.GroupCount) ? num : -1;
                    list.Add(item);
                }
                this.SortInfoCore.ClearAndAddRangeCore(filterSortArgs.GroupCount, list.ToArray());
            }
        }

        protected void RaiseGridEventInOriginationGrid(RoutedEvent routedEvent)
        {
            this.RaiseEventInOriginationGrid(new GridEventArgs(this, routedEvent));
        }

        protected virtual void RaiseItemsSourceChanged(object oldValue, object newValue)
        {
            ItemsSourceChangedEventArgs e = new ItemsSourceChangedEventArgs(this, oldValue, newValue);
            e.RoutedEvent = ItemsSourceChangedEvent;
            this.RaiseEventInOriginationGrid(e);
        }

        protected internal virtual void RaiseMasterRowExpandStateChanged(int rowHandle, bool isExpanded)
        {
        }

        protected internal virtual bool RaiseMasterRowExpandStateChanging(int rowHandle, bool isExpanded) => 
            true;

        protected internal virtual bool RaisePastingFromClipboard()
        {
            PastingFromClipboardEventArgs e = new PastingFromClipboardEventArgs(this, PastingFromClipboardEvent);
            this.GetOriginationDataControl().RaiseEvent(e);
            return e.Handled;
        }

        protected void RaisePropertyChanged(string p)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(p));
            }
        }

        protected internal virtual void RaiseSelectedItemChanged(object oldItem)
        {
            SelectedItemChangedEventArgs e = new SelectedItemChangedEventArgs(this, oldItem, this.SelectedItem);
            e.RoutedEvent = SelectedItemChangedEvent;
            this.RaiseEventInOriginationGrid(e);
        }

        protected internal void RaiseSelectionChanged(DevExpress.Data.SelectionChangedEventArgs e)
        {
            this.RaiseSelectionChanged(this.DataView.CreateSelectionChangedEventArgs(e));
        }

        protected internal virtual void RaiseSelectionChanged(GridSelectionChangedEventArgs e)
        {
        }

        protected internal void RaiseVisibleRowCountChanged()
        {
            this.RaisePropertyChanged("VisibleRowCount");
        }

        internal virtual void ReassignGroupedColumns(List<ColumnBase> groupedColumnsList)
        {
        }

        protected virtual void RebuildGroupedColumnsInfo(List<ColumnBase> groupedColumns)
        {
            this.ReassignGroupedColumns(groupedColumns);
        }

        internal void RebuildGroupSortIndexesAndGroupedColumns()
        {
            this.updateSortIndexesLocker.Lock();
            try
            {
                this.SyncSortBySummaryInfo();
                List<ColumnBase> groupedColumnsList = SetGroupSortInfoAndBuildGroupedColumns(this.ColumnsCore, this.ActualSortInfo, this.ActualGroupCountCore);
                this.UpdateOriginalSortInfo();
                this.ReassignGroupedColumns(groupedColumnsList);
                if ((this.DataView != null) && (this.ActualGroupCountCore != 0))
                {
                    this.DataView.RebuildColumns();
                }
            }
            finally
            {
                this.updateSortIndexesLocker.Unlock();
            }
        }

        protected virtual void RebuildSortInfo()
        {
            List<ColumnBase> list = new List<ColumnBase>();
            List<ColumnBase> groupedColumns = new List<ColumnBase>();
            List<ColumnBase> list3 = new List<ColumnBase>();
            foreach (ColumnBase base2 in this.ColumnsCore)
            {
                if (base2.GroupIndexCore >= 0)
                {
                    groupedColumns.Add(base2);
                    continue;
                }
                if (base2.SortIndex >= 0)
                {
                    list.Add(base2);
                    continue;
                }
                if (base2.SortOrder != ColumnSortOrder.None)
                {
                    list3.Add(base2);
                }
            }
            if ((list.Count == 0) && ((groupedColumns.Count == 0) && (list3.Count == 0)))
            {
                this.SortInfoCore.ClearAndAddRange(0, new string[0]);
            }
            Comparison<ColumnBase> comparison = <>c.<>9__646_0;
            if (<>c.<>9__646_0 == null)
            {
                Comparison<ColumnBase> local1 = <>c.<>9__646_0;
                comparison = <>c.<>9__646_0 = (column1, column2) => Comparer<int>.Default.Compare(column1.SortIndex, column2.SortIndex);
            }
            list.Sort(comparison);
            this.RebuildGroupedColumnsInfo(groupedColumns);
            list.ForEach(new Action<ColumnBase>(this.ApplyColumnSortIndexWithoutLoadingCheck));
            list3.ForEach(new Action<ColumnBase>(this.ApplyColumnSortOrderWithoutLoadingCheck));
        }

        public void RefreshData()
        {
            Func<int> getChangedVisibleIndex = <>c.<>9__438_0;
            if (<>c.<>9__438_0 == null)
            {
                Func<int> local1 = <>c.<>9__438_0;
                getChangedVisibleIndex = <>c.<>9__438_0 = () => -1;
            }
            this.BeginRestoreOffset(getChangedVisibleIndex);
            IRefreshable refreshableSource = this.DataProviderBase.RefreshableSource;
            if (refreshableSource == null)
            {
                IRefreshable local2 = refreshableSource;
            }
            else
            {
                refreshableSource.Refresh();
            }
            this.DataProviderBase.DoRefresh();
            if (this.viewCore == null)
            {
                DataViewBase viewCore = this.viewCore;
            }
            else
            {
                this.viewCore.UpdateScrollBarAnnotations();
            }
            this.NotifyEndDataUpdate();
        }

        public void RefreshRow(int rowHandle)
        {
            this.DataProviderBase.RefreshRow(rowHandle);
        }

        internal void ReInitializeCurrentColumn()
        {
            this.CurrentColumn = null;
            this.InitializeCurrentColumn();
        }

        internal void RemoveAutoGeneratedBands()
        {
            if (this.BandsCore.Count != 0)
            {
                List<ColumnBase> savedColumns = new List<ColumnBase>();
                this.RemoveAutoGeneratedBandsCore(this.BandsCore, savedColumns);
                savedColumns.ForEach(c => this.ColumnsCore.Add(c));
            }
        }

        private void RemoveAutoGeneratedBandsCore(IBandsCollection bandsCollection, List<ColumnBase> savedColumns)
        {
            List<BandBase> list = new List<BandBase>();
            foreach (BandBase base2 in bandsCollection)
            {
                if (!base2.IsAutoGenerated)
                {
                    this.RemoveAutoGeneratedBandsCore(base2.BandsCore, savedColumns);
                    continue;
                }
                list.Add(base2);
                if (this.AutoGenerateColumns != AutoGenerateColumnsMode.RemoveOld)
                {
                    foreach (ColumnBase base3 in base2.ColumnsCore)
                    {
                        if (!base3.IsAutoGenerated)
                        {
                            savedColumns.Add(base3);
                        }
                    }
                }
                base2.ColumnsCore.Clear();
            }
            list.ForEach(b => bandsCollection.Remove(b));
        }

        protected internal void RemoveChild(FrameworkContentElement child)
        {
            if (child is ColumnBase)
            {
                this.OnRemoveColumn((ColumnBase) child);
            }
            if (this.BandsLayoutCore != null)
            {
                Func<bool> fallback = <>c.<>9__613_1;
                if (<>c.<>9__613_1 == null)
                {
                    Func<bool> local1 = <>c.<>9__613_1;
                    fallback = <>c.<>9__613_1 = () => false;
                }
                if (!this.DataView.Return<DataViewBase, bool>(x => ReferenceEquals(x.CheckBoxSelectorColumn, child), fallback))
                {
                    return;
                }
            }
            base.RemoveLogicalChild(child);
        }

        internal void RemoveColumnsFromLogicalChildren()
        {
            foreach (ColumnBase base2 in this.ColumnsCore)
            {
                base.RemoveLogicalChild(base2);
            }
        }

        public void RemoveMRUFilter(CriteriaOperator filterCriteria)
        {
            if (filterCriteria != null)
            {
                string filterString = filterCriteria.ToString();
                CriteriaOperatorInfo item = this.MRUFiltersInternal.FirstOrDefault<CriteriaOperatorInfo>(x => x.FilterString == filterString);
                this.MRUFiltersInternal.Remove(item);
            }
        }

        internal void RemoveMRUFilter(CriteriaOperatorInfo filter)
        {
            this.MRUFiltersInternal.Remove(filter);
        }

        protected virtual void RequestSynchronizationCore()
        {
            if (!this.IsDataResetLocked && (!this.DataProviderBase.IsServerMode && !this.DataProviderBase.IsAsyncServerMode))
            {
                this.PopulateColumnsIfNeeded(this.DataProviderBase);
                this.UpdateColumnsReadOnly();
            }
            IDataControllerValidationSupport dataProviderBase = this.DataProviderBase as IDataControllerValidationSupport;
            if (dataProviderBase != null)
            {
                dataProviderBase.OnControllerItemChanged(new ListChangedEventArgs(ListChangedType.Reset, 0));
            }
            if (this.DataView != null)
            {
                this.DataView.ViewBehavior.ResetServiceSummaryCache();
            }
            this.OnDataChanged(true, false, false, false);
            if (!this.DataSourceChangingLocker.IsLocked)
            {
                this.ClearAndNotify();
            }
            if (this.DataView != null)
            {
                this.DataView.UpdateSummariesIgnoreNullValues();
                this.UpdateAllowPartialGrouping();
            }
        }

        protected internal virtual void ResetGridChildPeersIfNeeded()
        {
            if (this.AutomationPeer != null)
            {
                this.AutomationPeer.ResetPeers();
            }
        }

        private void ResetMenus()
        {
            Action<DataControlBase> updateOpenDetailMethod = <>c.<>9__606_0;
            if (<>c.<>9__606_0 == null)
            {
                Action<DataControlBase> local1 = <>c.<>9__606_0;
                updateOpenDetailMethod = <>c.<>9__606_0 = delegate (DataControlBase dataControl) {
                    if (dataControl.viewCore != null)
                    {
                        dataControl.viewCore.ResetMenu();
                    }
                };
            }
            this.UpdateAllDetailDataControls(updateOpenDetailMethod, null);
        }

        internal void ResetSelectedItems(IList items)
        {
            this.DataView.SelectionStrategy.SelectItems(items);
        }

        private void RestoreLayoutCore(object path)
        {
            this.restoreLayoutLocker.DoLockedAction(delegate {
                this.restoreLayoutCurrentRowIsNull = new bool?((this.DataProviderBase == null) || (this.DataProviderBase.CurrentControllerRow == -2147483648));
                DXSerializer.DeserializeSingleObject(this, path, this.GetSerializationAppName());
                this.restoreLayoutCurrentRowIsNull = null;
            });
        }

        public void RestoreLayoutFromStream(Stream stream)
        {
            this.RestoreLayoutCore(stream);
        }

        public void RestoreLayoutFromXml(string path)
        {
            this.RestoreLayoutCore(path);
        }

        private void RestoreUseFieldNameForSerializationPropertyValue()
        {
            if (this.shouldRestoreUseFieldNameForSerialization)
            {
                this.UseFieldNameForSerialization = this.oldUseFieldNameForSerialization;
                this.shouldRestoreUseFieldNameForSerialization = false;
            }
        }

        private void ReturnCurrentItem()
        {
            if ((this.DataView != null) && this.UpdateCurrentItemWasLocked)
            {
                this.DataView.SetFocusOnCurrentItem();
            }
        }

        private void SaveLayoutCore(object path)
        {
            DXSerializer.SerializeSingleObject(this, path, this.GetSerializationAppName());
        }

        public void SaveLayoutToStream(Stream stream)
        {
            this.SaveLayoutCore(stream);
        }

        public void SaveLayoutToXml(string path)
        {
            this.SaveLayoutCore(path);
        }

        private IList<NodeDefinition> SaveNodeDefinitions(NodeContainer nodeContainer, int changedVisibleIndex)
        {
            List<NodeDefinition> list = new List<NodeDefinition>();
            if (nodeContainer != null)
            {
                foreach (RowNode node in nodeContainer.Items)
                {
                    DataRowNode node2 = node as DataRowNode;
                    if ((node2 != null) && ((node2.ControllerValues.VisibleIndex != changedVisibleIndex) && (node.FixedRowPosition == FixedRowPosition.None)))
                    {
                        int visibleIndex = node2.ControllerValues.VisibleIndex;
                        object row = node2.Row;
                        object rowDirty = row;
                        if (row == null)
                        {
                            object local1 = row;
                            rowDirty = (node2.RowHandle != null) ? this.GetRow(node2.RowHandle.Value) : null;
                        }
                        NodeDefinition item = new NodeDefinition(node2.Row, visibleIndex, this.DataView.ConvertVisibleIndexToScrollIndex(visibleIndex), node2.Level, node2.View.DataControl, rowDirty);
                        item.Nodes.AddRange(this.SaveNodeDefinitions(node2.NodesContainer, changedVisibleIndex));
                        list.Add(item);
                    }
                }
            }
            return list;
        }

        private void SaveUseFieldNameForSerializationPropertyValue()
        {
            this.oldUseFieldNameForSerialization = this.UseFieldNameForSerialization;
            this.shouldRestoreUseFieldNameForSerialization = true;
            this.UseFieldNameForSerialization = false;
        }

        protected internal virtual bool ScheduleUpdateSingleRow(int rowHandle, string propertyName, object row = null) => 
            false;

        public void SelectAll()
        {
            if (this.CanSelectAllCore())
            {
                Action<DataViewBase> action = <>c.<>9__709_0;
                if (<>c.<>9__709_0 == null)
                {
                    Action<DataViewBase> local1 = <>c.<>9__709_0;
                    action = <>c.<>9__709_0 = view => view.SelectAllCore();
                }
                this.DataView.Do<DataViewBase>(action);
            }
        }

        internal void SelectAllMasterDetail()
        {
            this.DataView.SelectionStrategy.SelectAllMasterDetail();
        }

        public void SelectItem(int rowHandle)
        {
            this.DataView.Do<DataViewBase>(view => view.SelectRowCore(rowHandle));
        }

        public void SelectRange(int startRowHandle, int endRowHandle)
        {
            this.DataView.Do<DataViewBase>(view => view.SelectRangeCore(startRowHandle, endRowHandle));
        }

        public static void SetActiveView(DependencyObject element, DataViewBase value)
        {
            if (element == null)
            {
                throw new ArgumentNullException("element");
            }
            element.SetValue(ActiveViewProperty, value);
        }

        protected internal abstract void SetBandsLayout(BandsLayoutBase newValue);
        internal virtual void SetCellValueCore(int rowHandle, string fieldName, object value)
        {
            if (!this.IsGroupRowHandleCore(rowHandle))
            {
                object cellValue = this.GetCellValue(rowHandle, fieldName);
                this.DataProviderBase.SetRowValue(rowHandle, fieldName, value);
                if ((!(this.ItemsSource is IBindingList) && (!(this.ItemsSource is DataTable) && !(this.ItemsSource is INotifyCollectionChanged))) || this.CanNotifyChanges(rowHandle, fieldName))
                {
                    this.UpdateGroupRowCheckedLocker.DoIfNotLocked(() => this.UpdateGroupRowChecked(rowHandle, fieldName));
                }
                else
                {
                    this.DoUpdateRow(rowHandle);
                }
                this.DataView.RaiseCellValueChanged(rowHandle, this.ColumnsCore[fieldName], this.GetCellValue(rowHandle, fieldName), cellValue);
            }
        }

        private void SetCurrentItem(object newValue)
        {
            if (this.CurrentItem != newValue)
            {
                this.CurrentItemChangedLocker.DoLockedActionIfNotLocked(delegate {
                    object currentItem = this.CurrentItem;
                    this.SetCurrentItemCore(newValue);
                    this.RaiseCurrentItemChanged(currentItem, this.CurrentItem);
                });
            }
            else if (this.DataView.GetValue(DataViewBase.FocusedRowProperty) != this.CurrentItem)
            {
                this.DataView.SetValue(DataViewBase.FocusedRowProperty, this.CurrentItem);
            }
        }

        internal void SetCurrentItemCore(object currentItem)
        {
            base.SetCurrentValue(CurrentItemProperty, currentItem);
        }

        private void SetCurrentItemInOriginationGrid()
        {
            if ((this.DataView == null) || !this.DataView.IsDesignTime)
            {
                DataControlBase base2 = this.DataControlOwner.FindDetailDataControlByRow(this.CurrentItem);
                if (base2 != null)
                {
                    base2.CurrentItem = this.CurrentItem;
                }
                else
                {
                    DataControlBase dataControl = this.GetRootDataControl().DataView.FocusedView.DataControl;
                    if (ReferenceEquals(dataControl.GetOriginationDataControl(), this))
                    {
                        dataControl.SetCurrentItemCore(null);
                    }
                }
            }
        }

        public static void SetCurrentView(DependencyObject element, DataViewBase value)
        {
            if (element == null)
            {
                throw new ArgumentNullException("element");
            }
            element.SetValue(CurrentViewProperty, value);
        }

        public static void SetCurrentViewChangedListener(DependencyObject element, INotifyCurrentViewChanged value)
        {
            if (element == null)
            {
                throw new ArgumentNullException("element");
            }
            element.SetValue(CurrentViewChangedListenerProperty, value);
        }

        internal static void SetCurrentViewInternal(DependencyObject element, DataViewBase value)
        {
            SetActiveView(element, value);
            SetCurrentView(element, value);
        }

        private void SetDataSource()
        {
            object actualItemsSource = this.ActualItemsSource;
            if (actualItemsSource is SyncVisibleListWrapper)
            {
                actualItemsSource = new SyncServerModeListSource((SyncVisibleListWrapper) actualItemsSource, this);
            }
            else if (actualItemsSource is AsyncVisibleListWrapper)
            {
                actualItemsSource = new AsyncServerModeListSource((AsyncVisibleListWrapper) actualItemsSource, this);
            }
            this.DataProviderBase.DataSource = actualItemsSource;
            if ((this.DataView != null) && !this.DataView.IsFocusedView)
            {
                if (this.DataView.IsRootView)
                {
                    this.DataView.MasterRootRowsContainer.FocusedView = this.DataView;
                }
                else
                {
                    this.DataProviderBase.CurrentControllerRow = -2147483648;
                }
            }
        }

        private static List<ColumnBase> SetGroupSortInfoAndBuildGroupedColumns(IColumnCollection columns, IList<GridSortInfo> sortInfo, int groupCount)
        {
            List<ColumnBase> list = new List<ColumnBase>();
            foreach (ColumnBase base2 in columns)
            {
                base2.GroupIndexCore = -1;
                base2.SortIndex = -1;
                base2.SetSortInfo(ColumnSortOrder.None, false);
                base2.SetGroupMerge(false, -1);
            }
            IList<GridSortInfo> source = sortInfo.Distinct<GridSortInfo>(new GridSortInfoComparer()).ToList<GridSortInfo>();
            Func<GridSortInfo, bool> predicate = <>c.<>9__129_0;
            if (<>c.<>9__129_0 == null)
            {
                Func<GridSortInfo, bool> local1 = <>c.<>9__129_0;
                predicate = <>c.<>9__129_0 = info => info.IsGrouped;
            }
            groupCount -= sortInfo.Where<GridSortInfo>(predicate).Count<GridSortInfo>() - source.Where<GridSortInfo>((<>c.<>9__129_1 ??= info => info.IsGrouped)).Count<GridSortInfo>();
            int groupLevel = -1;
            for (int i = 0; i < source.Count; i++)
            {
                GridSortInfo info = source[i];
                ColumnBase item = columns[info.FieldName];
                info.SetGroupSortIndexes(-1, -1);
                if (item != null)
                {
                    bool isGrouped = i < groupCount;
                    item.SetSortInfo(info.GetSortOrder(), isGrouped);
                    if (!isGrouped)
                    {
                        int sortIndex = i - groupCount;
                        item.SortIndex = sortIndex;
                        info.SetGroupSortIndexes(sortIndex, -1);
                        item.SetGroupMerge(false, -1);
                    }
                    else
                    {
                        item.GroupIndexCore = i;
                        info.SetGroupSortIndexes(-1, i);
                        list.Add(item);
                        if (info.MergeWithPreviousGroup && (i != 0))
                        {
                            item.SetGroupMerge(true, groupLevel);
                        }
                        else
                        {
                            item.SetGroupMerge(false, groupLevel + 1);
                        }
                    }
                }
            }
            return list;
        }

        protected internal virtual void SetIsAnyDetailGrouped(bool value)
        {
        }

        protected internal virtual void SetIsGrouped(bool value)
        {
        }

        private void SetMasterRowExpanded(int handle, bool expanded)
        {
            if (expanded != this.MasterDetailProvider.IsMasterRowExpanded(handle, null))
            {
                this.MasterDetailProvider.ChangeMasterRowExpanded(handle);
            }
        }

        internal void SetMasterRowExpanded(object parameter, bool expanded)
        {
            int? nullable = this.ObjectToInt(parameter);
            if (nullable == null)
            {
                nullable = new int?(this.FindRow(parameter));
            }
            this.SetMasterRowExpanded(nullable.Value, expanded);
        }

        internal void SetRowStateError(int rowHandle, RowValidationError error)
        {
            this.RowStateError = error;
            UpdateRowDataDelegate updateMethod = <>c.<>9__550_0;
            if (<>c.<>9__550_0 == null)
            {
                UpdateRowDataDelegate local1 = <>c.<>9__550_0;
                updateMethod = <>c.<>9__550_0 = rowData => rowData.UpdateRowDataError();
            }
            this.DataView.UpdateRowDataByRowHandle(rowHandle, updateMethod);
        }

        internal bool ShouldPopulateColumns() => 
            this.CanAutoPopulateColumns || this.IsContainsSmartColumns();

        private bool ShouldSynchronizeAfterAddColumns(IList addedColumns)
        {
            bool flag;
            using (IEnumerator<GridSortInfo> enumerator = this.SortInfoCore.GetEnumerator())
            {
                while (true)
                {
                    if (enumerator.MoveNext())
                    {
                        GridSortInfo current = enumerator.Current;
                        if ((addedColumns == null) || !addedColumns.Contains(this.ColumnsCore[current.FieldName]))
                        {
                            continue;
                        }
                        flag = true;
                    }
                    else
                    {
                        return false;
                    }
                    break;
                }
            }
            return flag;
        }

        protected internal virtual bool ShouldUpdateRow(object row) => 
            true;

        public void SortBy(string fieldName)
        {
            this.SortByCore(this.ColumnsCore[fieldName]);
        }

        internal void SortByCore(ColumnBase column)
        {
            this.SortByCore(column, defaultColumnSortOrder);
        }

        internal void SortByCore(ColumnBase column, ColumnSortOrder sortedOrder)
        {
            this.SortByCore(column, sortedOrder, this.SortInfoCore.Count);
        }

        internal void SortByCore(ColumnBase column, ColumnSortOrder sortedOrder, int sortedIndex)
        {
            this.SortInfoCore.SortByColumn(column.FieldName, sortedOrder, sortedIndex);
        }

        private void SubscribeCollectionViewCurrentItem(ICollectionView previousSource, ICollectionView newSource)
        {
            if (previousSource != null)
            {
                CurrentChangedEventManager.RemoveListener(previousSource, this);
            }
            if (newSource != null)
            {
                CurrentChangedEventManager.AddListener(newSource, this);
                this.CollectionViewSyncCurrentItem(newSource);
            }
        }

        internal virtual CriteriaOperator SubstituteFilterInternal(CriteriaOperator filter) => 
            this.FilteringContext.SubstitutePredefinedFilters(filter);

        internal virtual CriteriaOperator SubstituteTopBottomFilter(FormatConditionFilterInfo filterInfo) => 
            null;

        internal bool SyncActualSortInfo(IList<IColumnInfo> sortList, int groupCount)
        {
            if ((sortList.Count == 0) && ((this.ActualSortInfoCore.Count == 0) && ((this.ActualGroupCountCore == 0) && ((this.ActualLevelCount == 0) && (groupCount == 0)))))
            {
                return false;
            }
            Func<DataViewBase, bool> evaluator = <>c.<>9__675_0;
            if (<>c.<>9__675_0 == null)
            {
                Func<DataViewBase, bool> local1 = <>c.<>9__675_0;
                evaluator = <>c.<>9__675_0 = x => x.HasFixedRows;
            }
            if (this.DataView.Return<DataViewBase, bool>(evaluator, <>c.<>9__675_1 ??= () => false))
            {
                if (groupCount > 0)
                {
                    groupCount--;
                }
                sortList.RemoveAt(0);
            }
            this.ActualSortInfoCore.BeginUpdate();
            try
            {
                this.ActualGroupCountCore = groupCount;
                this.ActualLevelCount = groupCount;
                this.ActualSortInfoCore.Clear();
                foreach (IColumnInfo info in sortList)
                {
                    bool mergeWithPreviousGroup = (info is IMergeWithPreviousGroup) ? ((IMergeWithPreviousGroup) info).MergeWithPreviousGroup : false;
                    if (mergeWithPreviousGroup)
                    {
                        int actualLevelCount = this.ActualLevelCount;
                        this.ActualLevelCount = actualLevelCount - 1;
                    }
                    this.ActualSortInfoCore.Add(new GridSortInfo(info.FieldName, GridSortInfo.GetSortDirectionBySortOrder(info.SortOrder), mergeWithPreviousGroup));
                }
            }
            finally
            {
                this.ActualSortInfoCore.EndUpdate();
            }
            return true;
        }

        private void SynchronizeCurrentColumn()
        {
            if (!this.HasValue(CurrentColumnProperty))
            {
                this.CurrentColumn = (ColumnBase) this.DataView.GetValue(this.DataView.GetFocusedColumnProperty());
            }
            else
            {
                this.DataView.CurrentColumnChanged(null);
                this.DataView.SetValue(this.DataView.GetFocusedColumnProperty(), this.CurrentColumn);
            }
        }

        private void SynchronizeCurrentItem()
        {
            if (this.HasValue(CurrentItemProperty))
            {
                this.OnCurrentItemChanged(null, false);
            }
            else
            {
                this.DataView.SetFocusOnCurrentControllerRow();
                this.UpdateCurrentItem();
            }
        }

        protected internal virtual void SynchronizeDataProvider(bool sortUpdate = false)
        {
            if (this.SortInfoCore.GroupCountCore > 0)
            {
                if (this.DataProviderBase.IsVirtualSource)
                {
                    throw new NotSupportedException("GridControl does not support grouping data records from Virtual Source.");
                }
                if ((this.viewCore != null) && this.viewCore.IsPagingMode)
                {
                    throw new NotSupportedException("The paged GridControl does not support grouping data.");
                }
            }
            this.syncronizationLocker.DoLockedActionIfNotLocked(() => this.ApplyFilter(true, true));
            this.DataView.ScrollAnimationLocker.DoLockedAction(delegate {
                try
                {
                    int groupCount = ((this.viewCore == null) || !this.viewCore.IsPagingMode) ? this.SortInfoCore.GroupCountCore : 0;
                    this.DataProviderBase.Synchronize(this.SortInfoCore, groupCount, this.GetFilterCriteriaForDataProvider(this.GetActualFilterCriteria()), sortUpdate);
                }
                catch (Exception exception)
                {
                    this.OnSynchronizeDataProviderException(exception);
                }
            });
            this.UpdatePropertySchemeController();
        }

        internal void SynchronizeSortInfo(IList<IColumnInfo> sortList, int groupCount)
        {
            this.SetIsGrouped((this.ActualItemsSource == null) ? (this.SortInfoCore.GroupCountCore > 0) : (this.DataProviderBase.GroupedColumnCount > 0));
            if (this.SyncActualSortInfo(sortList, groupCount))
            {
                this.RebuildGroupSortIndexesAndGroupedColumns();
            }
        }

        internal void SynchronizeSummaryIfAcitve()
        {
            if (this.IsActive)
            {
                this.DataProviderBase.SynchronizeSummary();
            }
        }

        internal virtual void SyncSortBySummaryInfo()
        {
        }

        bool IWeakEventListener.ReceiveWeakEvent(Type managerType, object sender, EventArgs e)
        {
            if (!(managerType == typeof(CurrentChangedEventManager)))
            {
                return false;
            }
            this.CollectionViewCurrentChanged(sender, e);
            return true;
        }

        internal virtual void ThrowNotSupportedInDetailException()
        {
            throw new NotSupportedInMasterDetailException("TreeListControl cannot be used to represent detail data. For a complete list of limitations, please see http://go.devexpress.com/XPF-MasterDetail-Limitations.aspx");
        }

        internal virtual void ThrowNotSupportedInMasterDetailException()
        {
        }

        public void UnselectAll()
        {
            Action<DataViewBase> action = <>c.<>9__711_0;
            if (<>c.<>9__711_0 == null)
            {
                Action<DataViewBase> local1 = <>c.<>9__711_0;
                action = <>c.<>9__711_0 = view => view.ClearSelectionCore();
            }
            this.DataView.Do<DataViewBase>(action);
        }

        public void UnselectItem(int rowHandle)
        {
            this.DataView.Do<DataViewBase>(view => view.UnselectRowCore(rowHandle));
        }

        internal void UpatePropertyChangeSubscriptionMode()
        {
            Action<DataViewBase> action = <>c.<>9__980_0;
            if (<>c.<>9__980_0 == null)
            {
                Action<DataViewBase> local1 = <>c.<>9__980_0;
                action = <>c.<>9__980_0 = delegate (DataViewBase v) {
                    UpdateRowDataDelegate updateMethod = <>c.<>9__980_1;
                    if (<>c.<>9__980_1 == null)
                    {
                        UpdateRowDataDelegate local1 = <>c.<>9__980_1;
                        updateMethod = <>c.<>9__980_1 = r => r.UpatePropertyChangeSubscriptionMode();
                    }
                    v.UpdateRowData(updateMethod, true, true);
                };
            }
            this.viewCore.Do<DataViewBase>(action);
        }

        internal void UpdateActiveFilterInfo()
        {
            CriteriaOperatorInfo filter = (Equals(this.FilterCriteria, null) || (this.DataView == null)) ? null : new CriteriaOperatorInfo(this.FilterCriteria, this.DataView.FilterPanelText);
            if (this.IsDeserializing)
            {
                this.ActiveFilterInfo = filter;
            }
            else
            {
                this.AddMRUFilter(this.ActiveFilterInfo);
                this.ActiveFilterInfo = filter;
                this.RemoveMRUFilter(filter);
            }
        }

        internal void UpdateAllDetailAndOriginationDataControls(Action<DataControlBase> updateMethod)
        {
            this.UpdateAllDetailDataControls(updateMethod, null);
            this.UpdateAllOriginationDataControls(updateMethod);
        }

        internal void UpdateAllDetailDataControls(Action<DataControlBase> updateOpenDetailMethod, Action<DataControlBase> updateClosedDetailMethod = null)
        {
            DataControlBase rootDataControl = this.GetRootDataControl();
            updateOpenDetailMethod(rootDataControl);
            rootDataControl.MasterDetailProvider.UpdateDetailDataControls(updateOpenDetailMethod, updateClosedDetailMethod);
        }

        internal void UpdateAllDetailViewIndents()
        {
            this.GetRootDataControl().UpdateChildrenDetailViewIndents(null);
        }

        internal void UpdateAllOriginationDataControls(Action<DataControlBase> updateMethod)
        {
            DataControlBase rootDataControl = this.GetRootDataControl();
            updateMethod(rootDataControl);
            rootDataControl.MasterDetailProvider.UpdateOriginationDataControls(updateMethod);
        }

        internal virtual void UpdateAllowPartialGrouping()
        {
        }

        private void UpdateBandsLayoutInLogicalTree(BandsLayoutBase oldValue, BandsLayoutBase newValue)
        {
            if (oldValue != null)
            {
                base.RemoveLogicalChild(oldValue);
            }
            if (newValue != null)
            {
                base.AddLogicalChild(newValue);
            }
        }

        private void UpdateBandsLayoutProperties()
        {
            if (this.DataView != null)
            {
                this.DataView.ViewBehavior.UpdateBandsLayoutProperties();
            }
        }

        internal void UpdateChildrenDetailViewIndents(ObservableCollection<DetailIndent> ownerIndents)
        {
            this.MasterDetailProvider.UpdateDetailViewIndents(ownerIndents);
        }

        internal void UpdateColumnCellMergeCounter(bool? oldValue, bool? newValue)
        {
            if ((newValue != null) && newValue.Value)
            {
                this.countColumnCellMerge++;
            }
            if ((oldValue != null) && oldValue.Value)
            {
                this.countColumnCellMerge--;
            }
            if (this.DataView != null)
            {
                this.DataView.UpdateActualAllowCellMergeCore();
            }
        }

        internal void UpdateColumnFilteringCounters(bool? newAllowColumnFiltering, bool? oldAllowColumnFiltering)
        {
            bool? nullable = newAllowColumnFiltering;
            bool flag = true;
            if ((nullable.GetValueOrDefault() == flag) ? (nullable != null) : false)
            {
                this.countColumnFilteringTrue++;
            }
            nullable = oldAllowColumnFiltering;
            flag = true;
            if ((nullable.GetValueOrDefault() == flag) ? (nullable != null) : false)
            {
                this.countColumnFilteringTrue--;
            }
            if (this.DataView != null)
            {
                this.DataView.UpdateShowEditFilterButtonCore();
            }
        }

        internal void UpdateColumnInstantFeedbackCounter(bool newValue)
        {
            this.countColumnInstantFeedback = !newValue ? (this.countColumnInstantFeedback - 1) : (this.countColumnInstantFeedback + 1);
            this.UpdateIsAsyncOperationInProgress();
        }

        private void UpdateColumnsReadOnly()
        {
            foreach (ColumnBase base2 in this.ColumnsCore)
            {
                base2.OnReadOnlyChanged();
            }
        }

        protected virtual void UpdateColumnSummaries(NotifyCollectionChangedAction action)
        {
            this.UpdateColumnSummaries(this.TotalSummaryCore, action, SummaryItemCollectionType.Total);
            this.UpdateColumnSummaries(this.GroupSummaryCore, action, SummaryItemCollectionType.Group);
            if (this.DataView != null)
            {
                this.DataView.UpdateColumnSummaries(action);
            }
        }

        protected internal void UpdateColumnSummaries(ISummaryItemOwner summaries, NotifyCollectionChangedAction action, SummaryItemCollectionType collectionType)
        {
            if (!this.ColumnsCore.IsLockUpdate && this.NeedCalculateSummaries(summaries))
            {
                if ((summaries.Count == 0) || ((action == NotifyCollectionChangedAction.Reset) || (action == NotifyCollectionChangedAction.Remove)))
                {
                    SummaryItemCollectionUpdater.ClearColumnSummaries(collectionType, this.ColumnsCore);
                }
                SummaryItemCollectionUpdater.Update(this.DataView, collectionType, summaries, this.ColumnsCore);
            }
        }

        private void UpdateColumnsUnboundType()
        {
            this.NeedRepopulateColumnsOnUnboundChanged = false;
            this.LockRepopulateColumnsOnUnboundChanged = true;
            foreach (ColumnBase base2 in this.ColumnsCore)
            {
                base2.SetUnboundType();
            }
            this.LockRepopulateColumnsOnUnboundChanged = false;
            if (this.NeedRepopulateColumnsOnUnboundChanged)
            {
                this.OnColumnUnboundChanged();
            }
        }

        internal void UpdateCurrentCellValue()
        {
            if ((this.DataView != null) && ((this.CurrentColumn != null) && (this.CurrentItem != null)))
            {
                this.CurrentCellValue = this.GetCellValue(this.DataView.FocusedRowHandle, this.CurrentColumn.FieldName);
            }
            else
            {
                this.CurrentCellValue = null;
            }
        }

        internal void UpdateCurrentItem()
        {
            if (this.IsSelectionInitialized && !this.IsOriginationDataControlCore())
            {
                if (this.DataSourceChangingLocker.IsLocked && this.HasCurrentItemBinding())
                {
                    this.UpdateCurrentItemWasLocked = true;
                }
                else
                {
                    object newValue = null;
                    if (!this.DataProviderBase.IsGroupRowHandle(this.DataView.FocusedRowHandle))
                    {
                        newValue = this.DataProviderBase.GetRowValue(this.DataView.FocusedRowHandle);
                    }
                    this.SetCurrentItem(newValue);
                    this.UpdateCurrentItemWasLocked = false;
                }
            }
        }

        private void UpdateCurrentItemInOriginationGrid()
        {
            DataControlBase originationDataControl = this.GetOriginationDataControl();
            if (!ReferenceEquals(originationDataControl, this))
            {
                object newValue = null;
                DataControlBase dataControl = this.DataView.FocusedView.DataControl;
                if (dataControl != null)
                {
                    if (ReferenceEquals(dataControl.GetOriginationDataControl(), originationDataControl))
                    {
                        newValue = dataControl.CurrentItem;
                    }
                    if (!originationDataControl.CurrentItemChangedLocker.IsLocked)
                    {
                        originationDataControl.SetCurrentItem(newValue);
                    }
                }
            }
        }

        internal void UpdateDefaultSorting()
        {
            this.SortInfoCore.DefaultSorting = this.DefaultSorting;
            if (!string.IsNullOrEmpty(this.DefaultSorting))
            {
                ColumnBase base2 = this.ColumnsCore[this.DefaultSorting];
                if (base2 != null)
                {
                    this.SortInfoCore.DefaultSortOrder = GridSortInfo.GetSortDirectionBySortOrder(base2.SortOrder);
                }
            }
        }

        private void UpdateDetailContainers(DetailDescriptorBase oldDetailDescriptor)
        {
            if (oldDetailDescriptor != null)
            {
                foreach (int num in this.DataProviderBase.GetDetailContainersIndices())
                {
                    int rowHandleByListIndex = this.DataProviderBase.GetRowHandleByListIndex(num);
                    RowDetailContainer container = this.DataProviderBase.GetRowDetailContainer(rowHandleByListIndex, null, false);
                    container.RootDetailInfo.Detach();
                    if (!container.RootDetailInfo.IsExpanded || (this.DetailDescriptorCore == null))
                    {
                        this.DataProviderBase.RemoveRowDetailContainer(num);
                        continue;
                    }
                    container.RootDetailInfo = this.DetailDescriptorCore.CreateRowDetailInfo(container);
                    container.RootDetailInfo.IsExpanded = true;
                }
                if (this.DetailDescriptorCore != null)
                {
                    this.DetailDescriptorCore.InvalidateTree();
                }
                else
                {
                    Action<DataViewBase> action = <>c.<>9__874_0;
                    if (<>c.<>9__874_0 == null)
                    {
                        Action<DataViewBase> local1 = <>c.<>9__874_0;
                        action = <>c.<>9__874_0 = x => x.RootView.OnDataReset();
                    }
                    this.DataView.Do<DataViewBase>(action);
                }
            }
        }

        internal void UpdateFilter()
        {
            this.ApplyFilter(true, false);
        }

        internal void UpdateGroupingFromInvalidGroupCache(ColumnBase column)
        {
            if (this.InvalidGroupCache.ContainsKey(column.FieldName))
            {
                this.GroupByColumn(column);
                this.InvalidGroupCache.Remove(column.FieldName);
            }
        }

        protected internal virtual void UpdateGroupRowChecked(int rowHandle, string fieldName)
        {
        }

        private void UpdateHasConditionFormatFilters()
        {
            CriteriaOperator actualFilterCriteria = this.GetActualFilterCriteria();
            this.HasConditionFormatFilters = FormatConditionFiltersHelper.IsConditionFormatFilter(actualFilterCriteria, TopBottomFilterKind.Conditional);
            this.HasPredefinedFormatConditionFilter = FormatConditionFiltersHelper.IsConditionFormatFilter(actualFilterCriteria, TopBottomFilterKind.Regular);
        }

        protected virtual void UpdateHasDetailViews()
        {
        }

        protected virtual void UpdateIsAsyncOperationInProgress()
        {
        }

        private void UpdateLanguage()
        {
            if (this.DataView != null)
            {
                foreach (ColumnBase base2 in this.ColumnsCore)
                {
                    base2.UpdateSimpleBindingLanguage();
                }
                this.DataView.UpdateCellDataLanguage();
            }
        }

        protected internal virtual void UpdateLayoutCore()
        {
            if (!this.LockUpdateLayout)
            {
                this.DataProviderBase.InvalidateRowPropertyDescriptors();
                this.ClearAndNotify();
            }
        }

        private void UpdateMasterDetailProvider()
        {
            if ((this.DetailDescriptorCore != null) && (this.DataView != null))
            {
                this.masterDetailProvider = this.DataView.ViewBehavior.CreateMasterDetailProvider();
            }
            else
            {
                this.MasterDetailProvider.OnDetach();
                this.masterDetailProvider = NullDetailProvider.Instance;
            }
            if (this.CanAssignDetailDescriptorOwner(this.DetailDescriptorCore))
            {
                this.DetailDescriptorCore.Owner = this.MasterDetailProvider as IDetailDescriptorOwner;
            }
        }

        private void UpdateOriginalSortInfo()
        {
            foreach (GridSortInfo info in this.ActualSortInfo)
            {
                GridSortInfo info2 = this.SortInfoCore[info.FieldName];
                if (info2 != null)
                {
                    info2.SetGroupSortIndexes(info.SortIndex, info.GroupIndex);
                }
            }
        }

        internal void UpdateOwnerDetailDescriptor()
        {
            if (ReferenceEquals(this.GetRootDataControl(), this))
            {
                this.OwnerDetailDescriptor = null;
            }
            this.OwnerDetailDescriptor = this.GetOriginationDataControl().DataControlOwner as DetailDescriptorBase;
        }

        internal void UpdatePropertySchemeController()
        {
            this.PropertySchemeController.UpdateProperties();
        }

        protected internal virtual void UpdateRowCore(int controllerRowHandle)
        {
            if (this.DataView != null)
            {
                UpdateRowDataDelegate updateMethod = <>c.<>9__657_0;
                if (<>c.<>9__657_0 == null)
                {
                    UpdateRowDataDelegate local1 = <>c.<>9__657_0;
                    updateMethod = <>c.<>9__657_0 = rowData => rowData.UpdateData();
                }
                this.DataView.UpdateRowDataByRowHandle(controllerRowHandle, updateMethod);
                this.DataView.UpdateCellMergingPanels(false);
            }
        }

        internal void UpdateRowsCore(bool updateColumnsViewInfo = true, bool updateDataObjects = true)
        {
            this.OnUpdateRowsCore();
            if (this.DataView != null)
            {
                this.DataView.Nodes.Clear();
                this.DataView.VisualDataTreeBuilder.GroupSummaryNodes.Clear();
                this.DataView.RootNodeContainer.ReGenerateMasterRootItems();
                this.DataView.UpdateDataObjects(updateColumnsViewInfo, updateDataObjects);
            }
        }

        private void UpdateSearchPanel(DataViewBase oldValue, DataViewBase newValue)
        {
            if (((oldValue != null) && (newValue != null)) && (newValue.SearchString != oldValue.SearchString))
            {
                newValue.SearchString = oldValue.SearchString;
            }
        }

        private void UpdateSimpleBinding()
        {
            foreach (ColumnBase base2 in this.ColumnsCore)
            {
                base2.UpdateDisplayMemberBindingData();
            }
        }

        internal void UpdateSortingFromInvalidSortCache(ColumnBase column)
        {
            if (this.invalidSortCache.ContainsKey(column.FieldName))
            {
                this.SortByCore(column, GridSortInfo.GetColumnSortOrder(this.invalidSortCache[column.FieldName].SortOrder));
                this.invalidSortCache.Remove(column.FieldName);
            }
        }

        public void UpdateTotalSummary()
        {
            this.DataProviderBase.UpdateTotalSummary();
            if (this.DataView != null)
            {
                this.DataView.UpdateColumnsTotalSummary();
            }
        }

        protected virtual void UpdateTotalSummaryCore()
        {
            if (this.DataView != null)
            {
                this.DataView.UpdateColumnsTotalSummary();
            }
        }

        internal void UpdateUnboundColumnAllowSorting(ColumnBase column)
        {
            if (this.IsDissalowSortingColumn(column))
            {
                column.AllowSorting = DefaultBoolean.False;
            }
        }

        private void UpdateUnboundColumnsAllowSorting(ICollectionView collectionView)
        {
            if (collectionView != null)
            {
                foreach (ColumnBase base2 in this.ColumnsCore)
                {
                    this.UpdateUnboundColumnAllowSorting(base2);
                }
            }
        }

        private void UpdateUnboundColumnsType()
        {
            if ((this.DataView != null) && (this.DataView.OriginationView != null))
            {
                foreach (GridColumnBase base2 in this.ColumnsCore)
                {
                    base2.SetUnboundType();
                }
            }
        }

        internal void UpdateViewActualColumnChooserTemplate()
        {
            if (this.viewCore != null)
            {
                this.viewCore.UpdateActualColumnChooserTemplate();
                this.viewCore.UpdateColumnChooserCaption();
            }
        }

        internal abstract void ValidateDataProvider(DataViewBase newValue);
        internal void ValidateMasterDetailConsistency()
        {
            this.MasterDetailProvider.ValidateMasterDetailConsistency();
            this.DataControlParent.ValidateMasterDetailConsistency(this);
            this.DataControlOwner.ValidateMasterDetailConsistency();
        }

        internal ObservableCollectionCore<CriteriaOperatorInfo> MRUFiltersInternal { get; private set; }

        [Browsable(false), XtraSerializableProperty(true, false, true, 0x7ffffffd), GridUIProperty]
        public ReadOnlyObservableCollection<CriteriaOperatorInfo> MRUFilters { get; private set; }

        [CloneDetailMode(CloneDetailMode.Skip), Category("Data")]
        public IEnumerable BandsSource
        {
            get => 
                (IEnumerable) base.GetValue(BandsSourceProperty);
            set => 
                base.SetValue(BandsSourceProperty, value);
        }

        [CloneDetailMode(CloneDetailMode.Skip), Category("Appearance ")]
        public DataTemplateSelector BandGeneratorTemplateSelector
        {
            get => 
                (DataTemplateSelector) base.GetValue(BandGeneratorTemplateSelectorProperty);
            set => 
                base.SetValue(BandGeneratorTemplateSelectorProperty, value);
        }

        [CloneDetailMode(CloneDetailMode.Skip), Category("Appearance ")]
        public DataTemplate BandGeneratorTemplate
        {
            get => 
                (DataTemplate) base.GetValue(BandGeneratorTemplateProperty);
            set => 
                base.SetValue(BandGeneratorTemplateProperty, value);
        }

        [CloneDetailMode(CloneDetailMode.Skip), Category("Appearance ")]
        public Style BandGeneratorStyle
        {
            get => 
                (Style) base.GetValue(BandGeneratorStyleProperty);
            set => 
                base.SetValue(BandGeneratorStyleProperty, value);
        }

        internal bool IsUnloaded
        {
            get => 
                this.isUnloaded;
            set => 
                this.isUnloaded = value;
        }

        protected bool IsActive =>
            !this.IsLoading && !this.isUnloaded;

        internal abstract DataViewBase DataView { get; set; }

        protected internal bool IsLoading =>
            this.loadingCount != 0;

        internal bool IsDeserializing { get; set; }

        internal IColumnCollection ColumnsCore
        {
            get
            {
                this.columns ??= this.CreateColumns();
                return this.columns;
            }
        }

        internal virtual int ActualGroupCountCore
        {
            get => 
                0;
            set
            {
            }
        }

        internal virtual int ActualLevelCount
        {
            get => 
                0;
            set
            {
            }
        }

        protected internal DevExpress.Xpf.Data.DataProviderBase DataProviderBase
        {
            get
            {
                this.fDataProvider ??= this.CreateDataProvider();
                return this.fDataProvider;
            }
        }

        protected internal CriteriaOperator ExtraFilter
        {
            get => 
                this.extraFilter;
            set
            {
                if (!ReferenceEquals(this.extraFilter, value))
                {
                    this.extraFilter = value;
                    this.UpdateFilter();
                }
            }
        }

        CriteriaOperator IDXFilterable.SearchFilterCriteria =>
            this.ExtraFilter;

        protected internal DevExpress.Xpf.Grid.Automation.LogicalPeerCache LogicalPeerCache
        {
            get
            {
                this.logicalPeerCache ??= new DevExpress.Xpf.Grid.Automation.LogicalPeerCache();
                return this.logicalPeerCache;
            }
        }

        internal virtual bool BottomRowBelowOldVisibleRowCount =>
            false;

        protected internal PeerCacheBase PeerCache
        {
            get
            {
                this.peerCache ??= this.CreatePeerCache();
                return this.peerCache;
            }
        }

        protected internal DataControlAutomationPeer AutomationPeer
        {
            get => 
                this.peer;
            set => 
                this.peer = value;
        }

        internal ObservableCollectionCore<GridSortInfo> ActualSortInfoCore =>
            this.actualSortInfoCore;

        internal ReadOnlyGridSortInfoCollection ActualSortInfo =>
            this.actualSortInfo;

        internal SortInfoCollectionBase SortInfoCore =>
            this.sortInfoCore;

        internal System.Windows.Window Window =>
            LayoutHelper.FindParentObject<System.Windows.Window>(this);

        internal bool IsDataResetLocked =>
            this.dataResetLocker.IsLocked;

        internal ISummaryItemOwner TotalSummaryCore =>
            this.totalSummary;

        internal ISummaryItemOwner GroupSummaryCore =>
            this.groupSummary;

        internal LockedPostponedAction UpdateFocusedRowDataposponedAction =>
            this.updateFocusedRowDataposponedAction;

        internal bool LockUpdateLayout
        {
            get => 
                this.lockUpdateLayout;
            set => 
                this.lockUpdateLayout = value;
        }

        [Browsable(false), DefaultValue(false)]
        public bool SupportDomainDataSource { get; set; }

        internal bool IsServerMode =>
            (!this.DataProviderBase.IsServerMode || this.DataProviderBase.IsICollectionView) ? this.DataProviderBase.IsAsyncServerMode : true;

        internal bool UpdateCurrentItemWasLocked { get; private set; }

        [Browsable(false)]
        public DataControlFilteredComponent FilteredComponent { get; private set; }

        internal IDataControlParent DataControlParent
        {
            get => 
                this.dataControlParent ?? NullDataControlParent.Instance;
            set
            {
                this.dataControlParent = value;
                this.DataControlParent.ValidateMasterDetailConsistency(this);
            }
        }

        internal IDataControlOwner DataControlOwner
        {
            get => 
                this.dataControlOwner ?? NullDataControlOwner.Instance;
            set => 
                this.dataControlOwner = value;
        }

        protected internal IDictionary<string, GridSortInfo> InvalidSortCache =>
            this.invalidSortCache;

        protected internal IDictionary<string, PropertyGroupDescription> InvalidGroupCache =>
            this.invalidGroupCache;

        [CloneDetailMode(CloneDetailMode.Skip), Category("Data")]
        public IEnumerable ColumnsSource
        {
            get => 
                (IEnumerable) base.GetValue(ColumnsSourceProperty);
            set => 
                base.SetValue(ColumnsSourceProperty, value);
        }

        [CloneDetailMode(CloneDetailMode.Skip), Category("Appearance ")]
        public DataTemplate ColumnGeneratorTemplate
        {
            get => 
                (DataTemplate) base.GetValue(ColumnGeneratorTemplateProperty);
            set => 
                base.SetValue(ColumnGeneratorTemplateProperty, value);
        }

        [CloneDetailMode(CloneDetailMode.Skip), Category("Appearance ")]
        public DataTemplateSelector ColumnGeneratorTemplateSelector
        {
            get => 
                (DataTemplateSelector) base.GetValue(ColumnGeneratorTemplateSelectorProperty);
            set => 
                base.SetValue(ColumnGeneratorTemplateSelectorProperty, value);
        }

        [CloneDetailMode(CloneDetailMode.Skip), Category("Appearance ")]
        public Style ColumnGeneratorStyle
        {
            get => 
                (Style) base.GetValue(ColumnGeneratorStyleProperty);
            set => 
                base.SetValue(ColumnGeneratorStyleProperty, value);
        }

        [CloneDetailMode(CloneDetailMode.Skip), Category("Data")]
        public IEnumerable TotalSummarySource
        {
            get => 
                (IEnumerable) base.GetValue(TotalSummarySourceProperty);
            set => 
                base.SetValue(TotalSummarySourceProperty, value);
        }

        [CloneDetailMode(CloneDetailMode.Skip), Category("Appearance ")]
        public DataTemplate TotalSummaryGeneratorTemplate
        {
            get => 
                (DataTemplate) base.GetValue(TotalSummaryGeneratorTemplateProperty);
            set => 
                base.SetValue(TotalSummaryGeneratorTemplateProperty, value);
        }

        [Description("Gets or sets the grid's data source. This is a dependency property."), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Bindable(true), Category("Data"), CloneDetailMode(CloneDetailMode.Skip)]
        public object ItemsSource
        {
            get => 
                base.GetValue(ItemsSourceProperty);
            set
            {
                if (value == null)
                {
                    base.ClearValue(ItemsSourceProperty);
                }
                else
                {
                    base.SetValue(ItemsSourceProperty, value);
                }
            }
        }

        [Browsable(false)]
        internal object ActualItemsSource =>
            this.GetItemsSource();

        [Description("Gets or sets whether sample data is displayed within the grid at design time. This is a dependency property."), Category("Options DesignTime"), CloneDetailMode(CloneDetailMode.Skip)]
        public bool DesignTimeShowSampleData
        {
            get => 
                (bool) base.GetValue(DesignTimeShowSampleDataProperty);
            set => 
                base.SetValue(DesignTimeShowSampleDataProperty, value);
        }

        [Description("Gets or sets whether sample data rows contain distinct values. This is a dependency property."), Category("Options DesignTime"), CloneDetailMode(CloneDetailMode.Skip)]
        public bool DesignTimeUseDistinctSampleValues
        {
            get => 
                (bool) base.GetValue(DesignTimeUseDistinctSampleValuesProperty);
            set => 
                base.SetValue(DesignTimeUseDistinctSampleValuesProperty, value);
        }

        [Description("Gets or sets the number of temporary data rows displayed within the grid at design time. This is a dependency property."), Category("Options DesignTime"), CloneDetailMode(CloneDetailMode.Skip)]
        public int DesignTimeDataSourceRowCount
        {
            get => 
                (int) base.GetValue(DesignTimeDataSourceRowCountProperty);
            set => 
                base.SetValue(DesignTimeDataSourceRowCountProperty, value);
        }

        [Description("Gets or sets the type of objects stored in a data source. This is a dependency property."), Category("Options DesignTime"), CloneDetailMode(CloneDetailMode.Skip)]
        public Type DesignTimeDataObjectType
        {
            get => 
                (Type) base.GetValue(DesignTimeDataObjectTypeProperty);
            set => 
                base.SetValue(DesignTimeDataObjectTypeProperty, value);
        }

        [Description("Gets the total number of rows/cards displayed within the grid.")]
        public int VisibleRowCount
        {
            get
            {
                int visibleCount = this.DataProviderBase.VisibleCount;
                if ((this.DataView != null) && (this.DataView.ShouldDisplayBottomRow || this.DataView.ShouldDisplayLoadingRow))
                {
                    visibleCount++;
                }
                return visibleCount;
            }
        }

        [Browsable(false)]
        public CriteriaOperatorInfo ActiveFilterInfo
        {
            get => 
                (CriteriaOperatorInfo) base.GetValue(ActiveFilterInfoProperty);
            internal set => 
                base.SetValue(ActiveFilterInfoPropertyKey, value);
        }

        [Description("Gets or sets whether the grid's MRU Filter List is enabled. This is a dependency property."), XtraSerializableProperty, Category("Options Filter"), CloneDetailMode(CloneDetailMode.Skip)]
        public bool AllowMRUFilterList
        {
            get => 
                (bool) base.GetValue(AllowMRUFilterListProperty);
            set => 
                base.SetValue(AllowMRUFilterListProperty, value);
        }

        [Description("Gets or sets whether filter dropdowns display all unique values in the View's data source. This is a dependency property."), XtraSerializableProperty, Category("Options Filter")]
        public bool ShowAllTableValuesInCheckedFilterPopup
        {
            get => 
                (bool) base.GetValue(ShowAllTableValuesInCheckedFilterPopupProperty);
            set => 
                base.SetValue(ShowAllTableValuesInCheckedFilterPopupProperty, value);
        }

        [Description("Gets or sets whether filter dropdowns display all unique values in the View's data source. This is a dependency property."), XtraSerializableProperty, Category("Options Filter")]
        public bool ShowAllTableValuesInFilterPopup
        {
            get => 
                (bool) base.GetValue(ShowAllTableValuesInFilterPopupProperty);
            set => 
                base.SetValue(ShowAllTableValuesInFilterPopupProperty, value);
        }

        [Description("Gets or sets the maximum number of the most recently used (MRU) filter conditions stored by the View. This is a dependency property."), XtraSerializableProperty, Category("Options Filter"), CloneDetailMode(CloneDetailMode.Skip)]
        public int MRUFilterListCount
        {
            get => 
                (int) base.GetValue(MRUFilterListCountProperty);
            set => 
                base.SetValue(MRUFilterListCountProperty, value);
        }

        [Description("Gets or sets whether to display most recently used (MRU) filter items in the Drop-down Filter. This is a dependency property."), XtraSerializableProperty, Category("Options Filter")]
        public bool AllowColumnMRUFilterList
        {
            get => 
                (bool) base.GetValue(AllowColumnMRUFilterListProperty);
            set => 
                base.SetValue(AllowColumnMRUFilterListProperty, value);
        }

        [Description("Gets or sets the maximum number of most recently used (MRU) filter items displayed in the column's Drop-down Filter. This is a dependency property."), XtraSerializableProperty, Category("Options Filter")]
        public int MRUColumnFilterListCount
        {
            get => 
                (int) base.GetValue(MRUColumnFilterListCountProperty);
            set => 
                base.SetValue(MRUColumnFilterListCountProperty, value);
        }

        [Description("Gets or sets whether the current filter is enabled. This is a dependency property."), Category("Options Filter"), XtraSerializableProperty(0x7ffffffe), GridUIProperty]
        public bool IsFilterEnabled
        {
            get => 
                (bool) base.GetValue(IsFilterEnabledProperty);
            set => 
                base.SetValue(IsFilterEnabledProperty, value);
        }

        [Description(""), Category("Data"), Browsable(false)]
        public CriteriaOperator FilterCriteria
        {
            get => 
                (CriteriaOperator) base.GetValue(FilterCriteriaProperty);
            set => 
                base.SetValue(FilterCriteriaProperty, value);
        }

        [Description(""), Category("Data"), Browsable(false)]
        public CriteriaOperator FixedFilter
        {
            get => 
                (CriteriaOperator) base.GetValue(FixedFilterProperty);
            set => 
                base.SetValue(FixedFilterProperty, value);
        }

        [Description("Gets or sets the grid's filter expression. This is a dependency property."), Category("Data"), XtraSerializableProperty(0x7ffffffd), GridUIProperty, CloneDetailMode(CloneDetailMode.Skip)]
        public string FilterString
        {
            get => 
                (string) base.GetValue(FilterStringProperty);
            set => 
                base.SetValue(FilterStringProperty, value);
        }

        [Obsolete("Use the AutoGenerateColumns property instead"), Browsable(false), EditorBrowsable(EditorBrowsableState.Never), CloneDetailMode(CloneDetailMode.Skip)]
        public bool AutoPopulateColumns
        {
            get => 
                (bool) base.GetValue(AutoPopulateColumnsProperty);
            set => 
                base.SetValue(AutoPopulateColumnsProperty, value);
        }

        [Description("Gets or sets whether columns should be created automatically for all properties in the underlying data source when the View does not contain any columns. This is a dependency property."), Category("Options Behavior"), CloneDetailMode(CloneDetailMode.Skip)]
        public AutoGenerateColumnsMode AutoGenerateColumns
        {
            get => 
                (AutoGenerateColumnsMode) base.GetValue(AutoGenerateColumnsProperty);
            set => 
                base.SetValue(AutoGenerateColumnsProperty, value);
        }

        [Description("Gets or sets whether to enable smart columns generation feature. This is a dependency property."), Category("Options Behavior"), CloneDetailMode(CloneDetailMode.Skip)]
        public bool EnableSmartColumnsGeneration
        {
            get => 
                (bool) base.GetValue(EnableSmartColumnsGenerationProperty);
            set => 
                base.SetValue(EnableSmartColumnsGenerationProperty, value);
        }

        [Description("Gets or sets whether to show the grid's border. This is a dependency property."), Category("Appearance "), XtraSerializableProperty, CloneDetailMode(CloneDetailMode.Skip)]
        public bool ShowBorder
        {
            get => 
                (bool) base.GetValue(ShowBorderProperty);
            set => 
                base.SetValue(ShowBorderProperty, value);
        }

        [Description("Gets or sets whether the Loading Panel can be displayed within the grid control. This is a dependency property."), Category("Appearance "), XtraSerializableProperty, CloneDetailMode(CloneDetailMode.Skip)]
        public bool ShowLoadingPanel
        {
            get => 
                (bool) base.GetValue(ShowLoadingPanelProperty);
            set => 
                base.SetValue(ShowLoadingPanelProperty, value);
        }

        [Category("Data")]
        public string DefaultSorting
        {
            get => 
                (string) base.GetValue(DefaultSortingProperty);
            set => 
                base.SetValue(DefaultSortingProperty, value);
        }

        [Description("Gets or sets the currently focused data row."), Category("Data"), CloneDetailMode(CloneDetailMode.Skip)]
        public object CurrentItem
        {
            get => 
                base.GetValue(CurrentItemProperty);
            set => 
                base.SetValue(CurrentItemProperty, value);
        }

        [Description("Gets or sets the focused column."), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), CloneDetailMode(CloneDetailMode.Skip)]
        public ColumnBase CurrentColumn
        {
            get => 
                (ColumnBase) base.GetValue(CurrentColumnProperty);
            set => 
                base.SetValue(CurrentColumnProperty, value);
        }

        [Category("Data")]
        public object CurrentCellValue
        {
            get => 
                base.GetValue(CurrentCellValueProperty);
            set => 
                base.SetValue(CurrentCellValueProperty, value);
        }

        [Category("Data"), CloneDetailMode(CloneDetailMode.Skip)]
        public object SelectedItem
        {
            get => 
                base.GetValue(SelectedItemProperty);
            set => 
                base.SetValue(SelectedItemProperty, value);
        }

        [CloneDetailMode(CloneDetailMode.Skip), Category("Options Selection")]
        public IList SelectedItems
        {
            get => 
                (IList) base.GetValue(SelectedItemsProperty);
            set => 
                base.SetValue(SelectedItemsProperty, value);
        }

        [Description("Gets or sets whether multiple row/cell selection is enabled. This is a dependency property."), XtraSerializableProperty, Category("Options Selection")]
        public MultiSelectMode SelectionMode
        {
            get => 
                (MultiSelectMode) base.GetValue(SelectionModeProperty);
            set => 
                base.SetValue(SelectionModeProperty, value);
        }

        [Category("Options Layout")]
        public bool AllowUpdateTwoWayBoundPropertiesOnSynchronization
        {
            get => 
                (bool) base.GetValue(AllowUpdateTwoWayBoundPropertiesOnSynchronizationProperty);
            set => 
                base.SetValue(AllowUpdateTwoWayBoundPropertiesOnSynchronizationProperty, value);
        }

        [Description("Gets or sets whether to allow filtering empty items using the Checked Filter Dropdown List. This is the dependency property."), Category("Options Filter")]
        public bool ImplyNullLikeEmptyStringWhenFiltering
        {
            get => 
                (bool) base.GetValue(ImplyNullLikeEmptyStringWhenFilteringProperty);
            set => 
                base.SetValue(ImplyNullLikeEmptyStringWhenFilteringProperty, value);
        }

        [Description("Gets or sets whether to use the column's field name for serialization. This is a dependency property."), XtraSerializableProperty(-1), XtraResetProperty(ResetPropertyMode.None), GridStoreAlwaysProperty, Category("Options Layout")]
        public bool UseFieldNameForSerialization
        {
            get => 
                (bool) base.GetValue(UseFieldNameForSerializationProperty);
            set => 
                base.SetValue(UseFieldNameForSerializationProperty, value);
        }

        [Description("Gets or sets how data is copied to the clipboard. This is a dependency property."), XtraSerializableProperty, Category("Options Copy")]
        public DevExpress.Xpf.Grid.ClipboardCopyMode ClipboardCopyMode
        {
            get => 
                (DevExpress.Xpf.Grid.ClipboardCopyMode) base.GetValue(ClipboardCopyModeProperty);
            set => 
                base.SetValue(ClipboardCopyModeProperty, value);
        }

        [Description("Gets or sets whether the GridControl is initially displayed with a focused row. This is a dependency property."), Category("Appearance "), XtraSerializableProperty]
        public bool AllowInitiallyFocusedRow
        {
            get => 
                (bool) base.GetValue(AllowInitiallyFocusedRowProperty);
            set => 
                base.SetValue(AllowInitiallyFocusedRowProperty, value);
        }

        [Description("Gets or sets whether the grid recalculates sorting/grouping/filtering/summaries automatically when data in a data source is modified outside the grid."), Category("Options Behavior"), XtraSerializableProperty]
        public bool DetectNestedPropertyChanges
        {
            get => 
                (bool) base.GetValue(DetectNestedPropertyChangesProperty);
            set => 
                base.SetValue(DetectNestedPropertyChangesProperty, value);
        }

        [Description("Gets or sets whether the grid recalculates sorting/grouping/filtering/summaries automatically when data in a data source is modified outside the grid."), Category("Options Behavior"), XtraSerializableProperty]
        public bool? AllowLiveDataShaping
        {
            get => 
                (bool?) base.GetValue(AllowLiveDataShapingProperty);
            set => 
                base.SetValue(AllowLiveDataShapingProperty, value);
        }

        [Browsable(false)]
        public IList VisibleItems
        {
            get
            {
                if ((this.VisibleItemsCore == null) && !this.IsServerMode)
                {
                    this.VisibleItemsCore = new ObservableCollectionCore<object>();
                    this.DataProviderBase.UpdateVisibleItems();
                }
                return this.VisibleItemsCore;
            }
        }

        protected internal bool VisibleItemsCreated =>
            this.VisibleItemsCore != null;

        protected internal ObservableCollectionCore<object> VisibleItemsCore { get; private set; }

        private bool CanAdjustScrollOffset =>
            (this.DataView != null) && (this.DataView.ViewBehavior.KeepViewportOnDataUpdate && ((this.DataView.DataPresenter != null) && !this.DataView.ScrollAnimationLocker.IsLocked));

        internal virtual bool IsRestoreOffsetInProgress =>
            this.nodeDefinitions != null;

        protected bool IsDesignMode =>
            DesignerProperties.GetIsInDesignMode(this);

        protected bool LockRepopulateColumnsOnUnboundChanged { get; set; }

        protected bool NeedRepopulateColumnsOnUnboundChanged { get; set; }

        protected internal bool IsFilterSortEventLocked =>
            this.filterSortEventLocker.IsLocked;

        internal bool HasConditionFormatFilters { get; private set; }

        internal bool HasPredefinedFormatConditionFilter { get; private set; }

        internal RowValidationError RowStateError { get; private set; }

        protected internal bool? AllowLiveDataShapingCore { get; private set; }

        internal bool NeedSynchronize { get; set; }

        protected virtual bool HasCustomRowFilter =>
            false;

        protected override IEnumerator LogicalChildren
        {
            get
            {
                List<object> list = new List<object> {
                    this.DataView
                };
                if (this.IsOriginationDataControl() && (this.DetailDescriptorCore != null))
                {
                    list.Add(this.DetailDescriptorCore);
                }
                if (this.BandsCore.Count == 0)
                {
                    list.AddRange(this.ColumnsCore.Cast<object>());
                }
                else
                {
                    list.AddRange(this.BandsCore.Cast<object>());
                }
                if ((this.DataView != null) && (this.DataView.CheckBoxSelectorColumn != null))
                {
                    list.Add(this.DataView.CheckBoxSelectorColumn);
                }
                return list.GetEnumerator();
            }
        }

        internal bool IsSync { get; private set; }

        internal bool IsSelectionInitialized { get; private set; }

        protected internal virtual bool IsGroupedCore =>
            false;

        protected internal virtual bool IsAnyDetailGroupedCore =>
            false;

        protected internal abstract Type ColumnType { get; }

        protected internal abstract Type BandType { get; }

        protected internal IDesignTimeAdornerBase DesignTimeAdorner
        {
            get
            {
                this.designTimeAdorner ??= this.EmptyDesignTimeAdorner;
                return this.designTimeAdorner;
            }
            set => 
                this.designTimeAdorner = value;
        }

        protected internal abstract IDesignTimeAdornerBase EmptyDesignTimeAdorner { get; }

        protected internal virtual bool CanAutoPopulateColumns =>
            (this.AutoGenerateColumns == AutoGenerateColumnsMode.AddNew) || ((this.AutoGenerateColumns == AutoGenerateColumnsMode.RemoveOld) || ((this.ColumnsCore.Count == 0) && (this.AutoGenerateColumns == AutoGenerateColumnsMode.KeepOld)));

        internal BandedViewSerializationHelper BandSerializationHelper { get; set; }

        protected internal BandsLayoutBase BandsLayoutCore =>
            this.bandsLayoutCore;

        internal IBandsCollection BandsCore
        {
            get
            {
                if (this.bandsCore == null)
                {
                    this.bandsCore = this.CreateBands();
                    this.bandsCore.CollectionChanged += new NotifyCollectionChangedEventHandler(this.BandsCore_CollectionChanged);
                }
                return this.bandsCore;
            }
        }

        private CollectionChangedWeakEventHandler<DataControlBase> CollectionChangedHandler
        {
            get
            {
                if (this.collectionChangedHandler == null)
                {
                    Action<DataControlBase, object, NotifyCollectionChangedEventArgs> onEventAction = <>c.<>9__823_0;
                    if (<>c.<>9__823_0 == null)
                    {
                        Action<DataControlBase, object, NotifyCollectionChangedEventArgs> local1 = <>c.<>9__823_0;
                        onEventAction = <>c.<>9__823_0 = delegate (DataControlBase e, object o, NotifyCollectionChangedEventArgs args) {
                            e.OnSelectedItemsCollectionChanged(o, args);
                        };
                    }
                    this.collectionChangedHandler = new CollectionChangedWeakEventHandler<DataControlBase>(this, onEventAction);
                }
                return this.collectionChangedHandler;
            }
        }

        private ListChangedWeakEventHandler<DataControlBase> ListChangedHandler
        {
            get
            {
                if (this.listChangedHandler == null)
                {
                    Action<DataControlBase, object, ListChangedEventArgs> onEventAction = <>c.<>9__826_0;
                    if (<>c.<>9__826_0 == null)
                    {
                        Action<DataControlBase, object, ListChangedEventArgs> local1 = <>c.<>9__826_0;
                        onEventAction = <>c.<>9__826_0 = delegate (DataControlBase e, object o, ListChangedEventArgs args) {
                            e.OnSelectedItemsListChanged(o, args);
                        };
                    }
                    this.listChangedHandler = new ListChangedWeakEventHandler<DataControlBase>(this, onEventAction);
                }
                return this.listChangedHandler;
            }
        }

        internal ColumnBase CurrentColumnCore { get; private set; }

        internal bool IsDesignColumnMoverApplyActive =>
            this.designColumnMoverLocker.IsLocked;

        internal bool RestoreLayoutIsLock =>
            this.restoreLayoutLocker.IsLocked;

        internal MasterDetailProviderBase MasterDetailProvider =>
            this.masterDetailProvider;

        internal abstract DetailDescriptorBase DetailDescriptorCore { get; }

        [CloneDetailMode(CloneDetailMode.Force)]
        public DetailDescriptorBase OwnerDetailDescriptor
        {
            get => 
                (DetailDescriptorBase) base.GetValue(OwnerDetailDescriptorProperty);
            private set => 
                base.SetValue(OwnerDetailDescriptorPropertyKey, value);
        }

        internal List<DataControlBase> DetailClones =>
            this.detailClones;

        internal Locker CloneDetailLocker =>
            this.cloneDetailLocker;

        object IEventArgsConverterSource.EventArgsConverter =>
            this.eventArgsConverter;

        internal bool AllowBandChooser =>
            (this.BandsLayoutCore != null) && this.BandsLayoutCore.ShowBandsInCustomizationForm;

        protected internal int LastRowIndex
        {
            get
            {
                if (this.viewCore != null)
                {
                    if (this.viewCore.IsPagingMode)
                    {
                        return this.viewCore.LastVisibleIndexOnPage;
                    }
                    if (this.viewCore.ShouldDisplayLoadingRow)
                    {
                        return (this.VisibleRowCount - 2);
                    }
                }
                return (this.VisibleRowCount - 1);
            }
        }

        protected internal int CurrentIndex =>
            this.DataProviderBase.CurrentIndex;

        internal virtual bool CallCopyClipboardFromCommand =>
            false;

        internal GridPropertySchemeController PropertySchemeController
        {
            get
            {
                this.propertySchemeController ??= new GridPropertySchemeController(this);
                return this.propertySchemeController;
            }
        }

        internal bool ActualAllowComplexPropertyUpdates =>
            this.DetectNestedPropertyChanges;

        internal ObservablePropertySchemeNode[] ObservablePropertyScheme =>
            this.PropertySchemeController.Scheme;

        internal virtual bool HasCustomUnboundColumnDataSubscription =>
            false;

        public FilteringUIContext FilteringContext
        {
            get
            {
                this._FilteringContext ??= new FilteringUIContext(this.CreateFilteringUIContextClient());
                return this._FilteringContext;
            }
        }

        [Serializable, CompilerGenerated]
        private sealed class <>c
        {
            public static readonly DataControlBase.<>c <>9 = new DataControlBase.<>c();
            public static Func<DataControlBase, IList> <>9__81_9;
            public static Func<DataControlBase, DevExpress.Xpf.Grid.SummaryItemBase> <>9__81_10;
            public static Func<DataControlBase, IList> <>9__84_1;
            public static Func<DataControlBase, BandBase> <>9__84_2;
            public static Func<DataControlBase, IList> <>9__84_3;
            public static Func<DataControlBase, ColumnBase> <>9__84_4;
            public static Func<DataControlBase, IList> <>9__99_0;
            public static Func<DataControlBase, ColumnBase> <>9__99_1;
            public static Func<GridSortInfo, bool> <>9__129_0;
            public static Func<GridSortInfo, bool> <>9__129_1;
            public static Func<int> <>9__438_0;
            public static Func<int> <>9__439_0;
            public static Action<BindingListAdapterBase> <>9__439_1;
            public static Action<BindingListAdapterBase> <>9__441_0;
            public static Func<DataControlBase, ISupportInitialize> <>9__457_0;
            public static Func<DataControlBase, ISupportInitialize> <>9__459_0;
            public static Func<ValueAndCount, object> <>9__501_2;
            public static Func<ValueAndCount[], object[]> <>9__501_1;
            public static Func<object[], object[]> <>9__501_3;
            public static System.Func<Either<ValueAndCount[], object[]>, Func<object[]>, object[]> <>9__501_0;
            public static Func<object[]> <>9__501_6;
            public static Func<object[]> <>9__501_8;
            public static UpdateRowDataDelegate <>9__550_0;
            public static Action<DataControlBase> <>9__557_0;
            public static Func<DataControlBase, IList> <>9__585_1;
            public static Func<object, object> <>9__585_2;
            public static Func<DevExpress.Xpf.Grid.SummaryItemBase, bool> <>9__591_0;
            public static Action<DataControlBase> <>9__606_0;
            public static Func<bool> <>9__611_1;
            public static Func<bool> <>9__613_1;
            public static Func<DataControlBase, bool> <>9__626_1;
            public static Func<DataControlBase, bool> <>9__626_0;
            public static Action<DataControlBase> <>9__626_2;
            public static Func<CriteriaOperator, object> <>9__639_0;
            public static Comparison<ColumnBase> <>9__646_0;
            public static UpdateRowDataDelegate <>9__657_0;
            public static Action<DataViewBase> <>9__671_0;
            public static Func<DataViewBase, bool> <>9__675_0;
            public static Func<bool> <>9__675_1;
            public static Action<DataViewBase> <>9__700_0;
            public static Action<DataViewBase> <>9__701_0;
            public static Action<DataViewBase> <>9__704_0;
            public static Action<DataViewBase> <>9__707_0;
            public static Action<DataViewBase> <>9__708_0;
            public static Action<DataViewBase> <>9__709_0;
            public static Action<DataViewBase> <>9__711_0;
            public static Func<DataViewBase, int[]> <>9__715_0;
            public static Func<DataColumnInfo, bool> <>9__752_1;
            public static Func<DataColumnInfo, PropertyDescriptor> <>9__752_2;
            public static Func<DataControlBase, IList> <>9__755_0;
            public static Func<DataControlBase, ColumnBase> <>9__755_1;
            public static Func<DataColumnInfo, bool> <>9__755_2;
            public static Func<DataColumnInfo, bool> <>9__755_4;
            public static Func<DataColumnInfo, PropertyDescriptor> <>9__755_5;
            public static Func<BandsLayoutBase> <>9__805_1;
            public static Func<DataControlBase, IList> <>9__805_5;
            public static Func<object, object> <>9__805_6;
            public static Func<object, object> <>9__805_8;
            public static Action<DataViewBase> <>9__808_0;
            public static Action<DataControlBase, object, NotifyCollectionChangedEventArgs> <>9__823_0;
            public static Action<DataControlBase, object, ListChangedEventArgs> <>9__826_0;
            public static Action<DataControlBase> <>9__833_0;
            public static Action<DataViewBase> <>9__874_0;
            public static Func<DataControlBase, Locker> <>9__901_2;
            public static Func<DataControlBase, Locker> <>9__902_2;
            public static Func<DataControlBase, DependencyObject> <>9__937_0;
            public static Func<System.Data.DataView, DataTable> <>9__967_0;
            public static Action<DataTable> <>9__967_1;
            public static UpdateRowDataDelegate <>9__980_1;
            public static Action<DataViewBase> <>9__980_0;
            public static Func<DataTemplate, ActualTemplateSelectorWrapper> <>9__991_6;
            public static Func<ColumnBase, HeaderAppearance> <>9__991_5;
            public static Func<ColumnBase, int> <>9__991_9;
            public static Func<BandBase, int> <>9__991_14;
            public static Func<FormatConditionFilter, bool> <>9__995_1;

            internal void <.cctor>b__81_0(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((DataControlBase) d).OnAllowLiveDataShapingChanged();
            }

            internal void <.cctor>b__81_1(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((DataControlBase) d).OnAutoPopulateColumnsChanged();
            }

            internal DevExpress.Xpf.Grid.SummaryItemBase <.cctor>b__81_10(DataControlBase grid) => 
                grid.CreateSummaryItem();

            internal void <.cctor>b__81_11(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((DataControlBase) d).OnCurrentItemChanged(e.OldValue, true);
            }

            internal object <.cctor>b__81_12(DependencyObject d, object e) => 
                ((DataControlBase) d).CoerceCurrentItem(e);

            internal void <.cctor>b__81_13(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((DataControlBase) d).OnCurrentColumnChanged((GridColumnBase) e.OldValue, (GridColumnBase) e.NewValue);
            }

            internal object <.cctor>b__81_14(DependencyObject d, object e) => 
                ((DataControlBase) d).CoerceCurrentColumn((GridColumnBase) e);

            internal void <.cctor>b__81_15(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((DataControlBase) d).OnSelectedItemsChanged((IList) e.OldValue);
            }

            internal void <.cctor>b__81_16(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((DataControlBase) d).OnSelectedItemChanged(e.OldValue);
            }

            internal void <.cctor>b__81_17(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((DataControlBase) d).OnSelectionModeChanged((MultiSelectMode) e.OldValue);
            }

            internal void <.cctor>b__81_18(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((DataControlBase) d).OnUseFieldNameForSerializationChanged();
            }

            internal void <.cctor>b__81_19(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((DataControlBase) d).OnAllowComplexPropertyUpdatesChanged();
            }

            internal void <.cctor>b__81_2(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((DataControlBase) d).OnAutoGenerateColumnsChanged();
            }

            internal void <.cctor>b__81_20(object s, XtraItemRoutedEventArgs e)
            {
                ((DataControlBase) s).OnDeserializeClearCollection(e);
            }

            internal void <.cctor>b__81_21(object s, XtraCreateCollectionItemEventArgs e)
            {
                ((DataControlBase) s).OnDeserializeCreateCollectionItem(e);
            }

            internal void <.cctor>b__81_22(object s, XtraFindCollectionItemEventArgs e)
            {
                ((DataControlBase) s).OnDeserializeFindCollectionItem(e);
            }

            internal void <.cctor>b__81_23(object s, StartDeserializingEventArgs e)
            {
                ((DataControlBase) s).OnDeserializeStart(e);
            }

            internal void <.cctor>b__81_24(object s, EndDeserializingEventArgs e)
            {
                ((DataControlBase) s).OnDeserializeEnd(e);
            }

            internal void <.cctor>b__81_25(object s, AllowPropertyEventArgs e)
            {
                ((DataControlBase) s).OnDeserializeAllowPropertyInternal(e);
            }

            internal void <.cctor>b__81_26(object s, CustomShouldSerializePropertyEventArgs e)
            {
                ((DataControlBase) s).OnCustomShouldSerializeProperty(e);
            }

            internal void <.cctor>b__81_3(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((DataControlBase) d).OnEnableSmartColumnsGenerationChanged();
            }

            internal void <.cctor>b__81_4(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                ((DataControlBase) d).OnDefaultSortingChanged();
            }

            internal object <.cctor>b__81_5(DependencyObject d, object baseValue) => 
                ((DataControlBase) d).CoerceDesignTimeDataSourceRowCount((int) baseValue);

            internal void <.cctor>b__81_6(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                DataControlBase.OnColumnsSourceChanged(d, e);
            }

            internal void <.cctor>b__81_7(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                DataControlBase.OnBandsSourceChanged(d, e);
            }

            internal void <.cctor>b__81_8(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                Func<DataControlBase, IList> getTargetFunction = <>9__81_9;
                if (<>9__81_9 == null)
                {
                    Func<DataControlBase, IList> local1 = <>9__81_9;
                    getTargetFunction = <>9__81_9 = grid => grid.TotalSummaryCore;
                }
                ItemsAttachedBehaviorCore<DataControlBase, DevExpress.Xpf.Grid.SummaryItemBase>.OnItemsSourcePropertyChanged(d, e, DataControlBase.TotalSummaryItemsAttachedBehaviorProperty, DataControlBase.TotalSummaryGeneratorTemplateProperty, null, null, getTargetFunction, <>9__81_10 ??= grid => grid.CreateSummaryItem(), null, null, null, null, true, true, null, false);
            }

            internal IList <.cctor>b__81_9(DataControlBase grid) => 
                grid.TotalSummaryCore;

            internal DataTable <AcceptChanges>b__967_0(System.Data.DataView dv) => 
                dv.Table;

            internal void <AcceptChanges>b__967_1(DataTable dt)
            {
                dt.AcceptChanges();
            }

            internal bool <AddChild>b__611_1() => 
                false;

            internal BandsLayoutBase <BandsCore_CollectionChanged>b__805_1() => 
                null;

            internal IList <BandsCore_CollectionChanged>b__805_5(DataControlBase dc) => 
                dc.BandsCore;

            internal object <BandsCore_CollectionChanged>b__805_6(object band) => 
                BandsLayoutBase.CloneBand((BandBase) band);

            internal object <BandsCore_CollectionChanged>b__805_8(object source) => 
                DependencyObjectExtensions.GetDataContext((DependencyObject) source);

            internal int <BeginDataUpdate>b__439_0() => 
                -1;

            internal void <BeginDataUpdate>b__439_1(BindingListAdapterBase x)
            {
                x.RaisesItemChangedEvents = false;
            }

            internal ISupportInitialize <BeginInit>b__457_0(DataControlBase dataControl) => 
                dataControl;

            internal void <BeginSelection>b__707_0(DataViewBase view)
            {
                view.BeginSelectionCore();
            }

            internal void <ClearClonedDetails>b__557_0(DataControlBase dataControl)
            {
                foreach (DataControlBase base2 in dataControl.DetailClones)
                {
                    if (base2 != null)
                    {
                        DataViewBase dataView = base2.DataView;
                        if (dataView == null)
                        {
                            DataViewBase local1 = dataView;
                            continue;
                        }
                        DataControlPopupMenu dataControlMenu = dataView.DataControlMenu;
                        if (dataControlMenu == null)
                        {
                            DataControlPopupMenu local2 = dataControlMenu;
                            continue;
                        }
                        dataControlMenu.Destroy();
                    }
                }
                dataControl.DetailClones.Clear();
            }

            internal void <ClearMasterDetailSelection>b__833_0(DataControlBase detail)
            {
                if (detail.SelectionMode != MultiSelectMode.MultipleRow)
                {
                    detail.UnselectAll();
                }
            }

            internal Locker <CloneDetail>b__901_2(DataControlBase dataControl) => 
                dataControl.CloneDetailLocker;

            internal Locker <CloneDetailForPrint>b__902_2(DataControlBase dataControl) => 
                dataControl.CloneDetailLocker;

            internal void <CopyCurrentItemToClipboard>b__701_0(DataViewBase view)
            {
                view.CopyFocusedRowToClipboardCore();
            }

            internal void <CopySelectedItemsToClipboard>b__700_0(DataViewBase view)
            {
                view.CopySelectedRowsToClipboardCore();
            }

            internal void <CopyToClipboard>b__704_0(DataViewBase view)
            {
                view.SelectionStrategy.CopyToClipboard();
            }

            internal int <CreateFilteringUIContextClient>b__991_14(BandBase c) => 
                c.ActualVisibleIndex;

            internal HeaderAppearance <CreateFilteringUIContextClient>b__991_5(ColumnBase column)
            {
                Func<DataTemplate, ActualTemplateSelectorWrapper> evaluator = <>9__991_6;
                if (<>9__991_6 == null)
                {
                    Func<DataTemplate, ActualTemplateSelectorWrapper> local1 = <>9__991_6;
                    evaluator = <>9__991_6 = x => new ActualTemplateSelectorWrapper(null, x);
                }
                ActualTemplateSelectorWrapper local2 = column.FilterEditorHeaderTemplate.With<DataTemplate, ActualTemplateSelectorWrapper>(evaluator);
                ActualTemplateSelectorWrapper selector = local2;
                if (local2 == null)
                {
                    ActualTemplateSelectorWrapper local3 = local2;
                    selector = (ActualTemplateSelectorWrapper) column.ActualHeaderTemplateSelector;
                }
                return new HeaderAppearance(column.HeaderCaption, selector);
            }

            internal ActualTemplateSelectorWrapper <CreateFilteringUIContextClient>b__991_6(DataTemplate x) => 
                new ActualTemplateSelectorWrapper(null, x);

            internal int <CreateFilteringUIContextClient>b__991_9(ColumnBase c) => 
                c.ActualVisibleIndex;

            internal bool <CreateGenerateBandWrapper>b__752_1(DataColumnInfo x) => 
                x.Visible && !x.Unbound;

            internal PropertyDescriptor <CreateGenerateBandWrapper>b__752_2(DataColumnInfo x) => 
                x.PropertyDescriptor;

            internal void <EndDataUpdateCore>b__441_0(BindingListAdapterBase x)
            {
                x.RaisesItemChangedEvents = true;
            }

            internal ISupportInitialize <EndInit>b__459_0(DataControlBase dataControl) => 
                dataControl;

            internal void <EndSelection>b__708_0(DataViewBase view)
            {
                view.EndSelectionCore();
            }

            internal void <get_CollectionChangedHandler>b__823_0(DataControlBase e, object o, NotifyCollectionChangedEventArgs args)
            {
                e.OnSelectedItemsCollectionChanged(o, args);
            }

            internal void <get_ListChangedHandler>b__826_0(DataControlBase e, object o, ListChangedEventArgs args)
            {
                e.OnSelectedItemsListChanged(o, args);
            }

            internal bool <GetFormatConditionFilters>b__995_1(FormatConditionFilter x) => 
                x != null;

            internal object <GetInfoFromCriteriaOperator>b__639_0(CriteriaOperator x) => 
                x;

            internal int[] <GetSelectedRowHandles>b__715_0(DataViewBase view) => 
                view.GetSelectedRowHandlesCore();

            internal object[] <GetUniqueColumnValues>b__501_0(Either<ValueAndCount[], object[]> uniqueValues, Func<object[]> defaultResult)
            {
                if (uniqueValues == null)
                {
                    return defaultResult();
                }
                Func<ValueAndCount[], object[]> left = <>9__501_1;
                if (<>9__501_1 == null)
                {
                    Func<ValueAndCount[], object[]> local1 = <>9__501_1;
                    left = <>9__501_1 = delegate (ValueAndCount[] left) {
                        Func<ValueAndCount, object> selector = <>9__501_2;
                        if (<>9__501_2 == null)
                        {
                            Func<ValueAndCount, object> local1 = <>9__501_2;
                            selector = <>9__501_2 = x => x.Value;
                        }
                        return left.Select<ValueAndCount, object>(selector).ToArray<object>();
                    };
                }
                return uniqueValues.Match<object[]>(left, <>9__501_3 ??= right => right);
            }

            internal object[] <GetUniqueColumnValues>b__501_1(ValueAndCount[] left)
            {
                Func<ValueAndCount, object> selector = <>9__501_2;
                if (<>9__501_2 == null)
                {
                    Func<ValueAndCount, object> local1 = <>9__501_2;
                    selector = <>9__501_2 = x => x.Value;
                }
                return left.Select<ValueAndCount, object>(selector).ToArray<object>();
            }

            internal object <GetUniqueColumnValues>b__501_2(ValueAndCount x) => 
                x.Value;

            internal object[] <GetUniqueColumnValues>b__501_3(object[] right) => 
                right;

            internal object[] <GetUniqueColumnValues>b__501_6() => 
                new object[] { AsyncServerModeDataController.NoValue };

            internal object[] <GetUniqueColumnValues>b__501_8() => 
                new object[0];

            internal bool <InitializeSelection>b__626_0(DataControlBase x)
            {
                Func<DataControlBase, bool> predicate = <>9__626_1;
                if (<>9__626_1 == null)
                {
                    Func<DataControlBase, bool> local1 = <>9__626_1;
                    predicate = <>9__626_1 = owner => owner.IsSync;
                }
                return x.GetThisAndOwnerDataControls().All<DataControlBase>(predicate);
            }

            internal bool <InitializeSelection>b__626_1(DataControlBase owner) => 
                owner.IsSync;

            internal void <InitializeSelection>b__626_2(DataControlBase dataControl)
            {
                dataControl.IsSelectionInitialized = true;
                if (dataControl.IsOriginationDataControl())
                {
                    dataControl.SynchronizeCurrentItem();
                }
                dataControl.DataView.SelectionStrategy.OnDataControlInitialized();
            }

            internal bool <NeedCalculateSummaries>b__591_0(DevExpress.Xpf.Grid.SummaryItemBase summaryItem) => 
                (summaryItem.SummaryType == SummaryItemType.Count) && (summaryItem.Alignment != GridSummaryItemAlignment.Default);

            internal void <OnBandsLayoutChanged>b__808_0(DataViewBase x)
            {
                x.ViewBehavior.OnBandsLayoutChanged();
            }

            internal IList <OnBandsSourceChanged>b__84_1(DataControlBase grid) => 
                grid.BandsCore;

            internal BandBase <OnBandsSourceChanged>b__84_2(DataControlBase grid) => 
                grid.CreateBand();

            internal IList <OnBandsSourceChanged>b__84_3(DataControlBase grid) => 
                grid.ColumnsCore;

            internal ColumnBase <OnBandsSourceChanged>b__84_4(DataControlBase grid) => 
                grid.CreateColumn();

            internal void <OnColumnCollectionEndUpdate>b__671_0(DataViewBase view)
            {
                view.RebuildColumns();
            }

            internal IList <OnColumnsCollectionChanged>b__585_1(DataControlBase dataControl) => 
                dataControl.ColumnsCore;

            internal object <OnColumnsCollectionChanged>b__585_2(object column) => 
                CloneDetailHelper.CloneElement<BaseColumn>((ColumnBase) column, (Action<BaseColumn>) null, (Func<BaseColumn, Locker>) null, (object[]) null);

            internal IList <OnColumnsSourceChanged>b__99_0(DataControlBase grid) => 
                grid.ColumnsCore;

            internal ColumnBase <OnColumnsSourceChanged>b__99_1(DataControlBase grid) => 
                grid.CreateColumn();

            internal DependencyObject <OnPropertyChanged>b__937_0(DataControlBase dataControl) => 
                dataControl;

            internal IList <PopulateColumnsAndApplyAttributesCore>b__755_0(DataControlBase grid) => 
                null;

            internal ColumnBase <PopulateColumnsAndApplyAttributesCore>b__755_1(DataControlBase grid) => 
                grid.CreateColumn();

            internal bool <PopulateColumnsAndApplyAttributesCore>b__755_2(DataColumnInfo x) => 
                x.Visible && !x.Unbound;

            internal bool <PopulateColumnsAndApplyAttributesCore>b__755_4(DataColumnInfo x) => 
                x.Visible && !x.Unbound;

            internal PropertyDescriptor <PopulateColumnsAndApplyAttributesCore>b__755_5(DataColumnInfo x) => 
                x.PropertyDescriptor;

            internal int <RebuildSortInfo>b__646_0(ColumnBase column1, ColumnBase column2) => 
                Comparer<int>.Default.Compare(column1.SortIndex, column2.SortIndex);

            internal int <RefreshData>b__438_0() => 
                -1;

            internal bool <RemoveChild>b__613_1() => 
                false;

            internal void <ResetMenus>b__606_0(DataControlBase dataControl)
            {
                if (dataControl.viewCore != null)
                {
                    dataControl.viewCore.ResetMenu();
                }
            }

            internal void <SelectAll>b__709_0(DataViewBase view)
            {
                view.SelectAllCore();
            }

            internal bool <SetGroupSortInfoAndBuildGroupedColumns>b__129_0(GridSortInfo info) => 
                info.IsGrouped;

            internal bool <SetGroupSortInfoAndBuildGroupedColumns>b__129_1(GridSortInfo info) => 
                info.IsGrouped;

            internal void <SetRowStateError>b__550_0(RowData rowData)
            {
                rowData.UpdateRowDataError();
            }

            internal bool <SyncActualSortInfo>b__675_0(DataViewBase x) => 
                x.HasFixedRows;

            internal bool <SyncActualSortInfo>b__675_1() => 
                false;

            internal void <UnselectAll>b__711_0(DataViewBase view)
            {
                view.ClearSelectionCore();
            }

            internal void <UpatePropertyChangeSubscriptionMode>b__980_0(DataViewBase v)
            {
                UpdateRowDataDelegate updateMethod = <>9__980_1;
                if (<>9__980_1 == null)
                {
                    UpdateRowDataDelegate local1 = <>9__980_1;
                    updateMethod = <>9__980_1 = r => r.UpatePropertyChangeSubscriptionMode();
                }
                v.UpdateRowData(updateMethod, true, true);
            }

            internal void <UpatePropertyChangeSubscriptionMode>b__980_1(RowData r)
            {
                r.UpatePropertyChangeSubscriptionMode();
            }

            internal void <UpdateDetailContainers>b__874_0(DataViewBase x)
            {
                x.RootView.OnDataReset();
            }

            internal void <UpdateRowCore>b__657_0(RowData rowData)
            {
                rowData.UpdateData();
            }
        }

        private class DataControlOriginationElement : IDataControlOriginationElement
        {
            private readonly DataControlBase dataControl;
            private readonly Locker synchronizationLocker = new Locker();
            private Locker columnsChangedLocker = new Locker();

            public DataControlOriginationElement(DataControlBase dataControl)
            {
                this.dataControl = dataControl;
            }

            DataControlBase IDataControlOriginationElement.GetOriginationControl(DataControlBase sourceControl) => 
                this.dataControl;

            void IDataControlOriginationElement.NotifyBeginInit(DataControlBase sourceControl, Func<DataControlBase, ISupportInitialize> getTarget)
            {
                this.PerformSyncAction(delegate {
                    Action<ISupportInitialize> targetInOpenDetailHandler = <>c.<>9__10_1;
                    if (<>c.<>9__10_1 == null)
                    {
                        Action<ISupportInitialize> local1 = <>c.<>9__10_1;
                        targetInOpenDetailHandler = <>c.<>9__10_1 = supportInitialize => supportInitialize.BeginInit();
                    }
                    DataControlOriginationElementHelper.EnumerateDependentElements<ISupportInitialize>(sourceControl, getTarget, targetInOpenDetailHandler, null);
                });
            }

            void IDataControlOriginationElement.NotifyCollectionChanged(DataControlBase sourceControl, Func<DataControlBase, IList> getCollection, Func<object, object> convertAction, NotifyCollectionChangedEventArgs e)
            {
                this.PerformSyncAction(delegate {
                    IList sourceCollection = getCollection(sourceControl);
                    Action<IList> targetInOpenDetailHandler = <>c.<>9__9_1;
                    if (<>c.<>9__9_1 == null)
                    {
                        Action<IList> local1 = <>c.<>9__9_1;
                        targetInOpenDetailHandler = <>c.<>9__9_1 = list => ((ILockable) list).BeginUpdate();
                    }
                    DataControlOriginationElementHelper.EnumerateDependentElements<IList>(sourceControl, getCollection, targetInOpenDetailHandler, null);
                    DataControlOriginationElementHelper.EnumerateDependentElements<IList>(sourceControl, getCollection, list => SyncCollectionHelper.SyncCollection(e, list, sourceCollection, convertAction, null, null, null), <>c.<>9__9_3 ??= list => list.Clear());
                    DataControlBase base1 = sourceControl;
                    if (<>c.<>9__9_4 == null)
                    {
                        DataControlBase local3 = sourceControl;
                        base1 = (DataControlBase) (<>c.<>9__9_4 = list => ((ILockable) list).EndUpdate());
                    }
                    DataControlOriginationElementHelper.EnumerateDependentElements<IList>((DataControlBase) <>c.<>9__9_4, getCollection, (Action<IList>) base1, null);
                });
            }

            void IDataControlOriginationElement.NotifyEndInit(DataControlBase sourceControl, Func<DataControlBase, ISupportInitialize> getTarget)
            {
                this.PerformSyncAction(delegate {
                    Action<ISupportInitialize> targetInOpenDetailHandler = <>c.<>9__11_1;
                    if (<>c.<>9__11_1 == null)
                    {
                        Action<ISupportInitialize> local1 = <>c.<>9__11_1;
                        targetInOpenDetailHandler = <>c.<>9__11_1 = supportInitialize => supportInitialize.EndInit();
                    }
                    DataControlOriginationElementHelper.EnumerateDependentElements<ISupportInitialize>(sourceControl, getTarget, targetInOpenDetailHandler, null);
                });
            }

            void IDataControlOriginationElement.NotifyPropertyChanged(DataControlBase sourceControl, DependencyProperty property, Func<DataControlBase, DependencyObject> getTarget, Type baseComponentType)
            {
                if (!this.SynchronizationLocker.IsLocked && this.dataControl.AllowMasterDetailPropertySync(property))
                {
                    this.PerformSyncAction(delegate {
                        DependencyObject target = getTarget(this.dataControl);
                        if (target != null)
                        {
                            Type c = target.GetType();
                            if (property.GetOwnerType().IsAssignableFrom(c) || CloneDetailHelper.IsKnownAttachedProperty(property))
                            {
                                PropertyDescriptor propertyDescriptor = CloneDetailHelper.GetCloneProperties<DependencyObject>(target, c, baseComponentType)[property.GetName()];
                                if (propertyDescriptor != null)
                                {
                                    object newValue = getTarget(sourceControl).GetValue(property);
                                    DataControlOriginationElementHelper.EnumerateDependentElements<DependencyObject>(sourceControl, getTarget, dObject => CloneDetailHelper.SetClonePropertyValue(target, propertyDescriptor, newValue, dObject), null);
                                }
                            }
                        }
                    });
                }
            }

            private void PerformSyncAction(Action action)
            {
                this.dataControl.syncPropertyLocker.DoLockedActionIfNotLocked(action);
            }

            public Locker SynchronizationLocker =>
                this.synchronizationLocker;

            public Locker ColumnsChangedLocker =>
                this.columnsChangedLocker;

            [Serializable, CompilerGenerated]
            private sealed class <>c
            {
                public static readonly DataControlBase.DataControlOriginationElement.<>c <>9 = new DataControlBase.DataControlOriginationElement.<>c();
                public static Action<IList> <>9__9_1;
                public static Action<IList> <>9__9_3;
                public static Action<IList> <>9__9_4;
                public static Action<ISupportInitialize> <>9__10_1;
                public static Action<ISupportInitialize> <>9__11_1;

                internal void <DevExpress.Xpf.Grid.Native.IDataControlOriginationElement.NotifyBeginInit>b__10_1(ISupportInitialize supportInitialize)
                {
                    supportInitialize.BeginInit();
                }

                internal void <DevExpress.Xpf.Grid.Native.IDataControlOriginationElement.NotifyCollectionChanged>b__9_1(IList list)
                {
                    ((ILockable) list).BeginUpdate();
                }

                internal void <DevExpress.Xpf.Grid.Native.IDataControlOriginationElement.NotifyCollectionChanged>b__9_3(IList list)
                {
                    list.Clear();
                }

                internal void <DevExpress.Xpf.Grid.Native.IDataControlOriginationElement.NotifyCollectionChanged>b__9_4(IList list)
                {
                    ((ILockable) list).EndUpdate();
                }

                internal void <DevExpress.Xpf.Grid.Native.IDataControlOriginationElement.NotifyEndInit>b__11_1(ISupportInitialize supportInitialize)
                {
                    supportInitialize.EndInit();
                }
            }
        }

        private class EventArgsConverter : IDataRowEventArgsConverter, IDataCellEventArgsConverter
        {
            private readonly DataControlBase dataControl;

            public EventArgsConverter(DataControlBase dataControl)
            {
                this.dataControl = dataControl;
            }

            CellValue IDataCellEventArgsConverter.GetDataCell(RoutedEventArgs e)
            {
                DataViewBase dataView = this.dataControl.DataView;
                if (dataView == null)
                {
                    return null;
                }
                IDataViewHitInfo info = dataView.CalcHitInfoCore(e.OriginalSource as DependencyObject);
                return (info.IsRowCell ? new CellValue(dataView.DataControl.GetRow(info.RowHandle), info.Column.FieldName, dataView.DataControl.GetCellValue(info.RowHandle, info.Column.FieldName)) : null);
            }

            object IDataRowEventArgsConverter.GetDataRow(RoutedEventArgs e)
            {
                DataViewBase dataView = this.dataControl.DataView;
                if (dataView == null)
                {
                    return null;
                }
                IDataViewHitInfo info = dataView.CalcHitInfoCore(e.OriginalSource as DependencyObject);
                return (info.InRow ? dataView.DataControl.GetRow(info.RowHandle) : null);
            }
        }

        public class GridSortInfoComparer : IEqualityComparer<GridSortInfo>
        {
            public bool Equals(GridSortInfo x, GridSortInfo y) => 
                x.FieldName == y.FieldName;

            public int GetHashCode(GridSortInfo obj) => 
                obj.FieldName.GetHashCode();
        }

        private class NodeDefinition
        {
            public NodeDefinition(object row, int visibleIndex, int scrollIndex, int level, DataControlBase dataControl, object rowDirty)
            {
                this.Row = row;
                this.VisibleIndex = visibleIndex;
                this.ScrollIndex = scrollIndex;
                this.Level = level;
                this.DataControl = dataControl;
                this.Nodes = new List<DataControlBase.NodeDefinition>();
                this.RowDirty = rowDirty;
            }

            public object Row { get; private set; }

            public int VisibleIndex { get; private set; }

            public int ScrollIndex { get; private set; }

            public int Level { get; private set; }

            public DataControlBase DataControl { get; private set; }

            public List<DataControlBase.NodeDefinition> Nodes { get; private set; }

            public object RowDirty { get; private set; }
        }
    }
}

