namespace DevExpress.Xpf.Core.ConditionalFormatting
{
    using DevExpress.Utils.Localization;
    using DevExpress.Utils.Localization.Internal;
    using DevExpress.Xpf.Core;
    using System;

    public class ConditionalFormattingLocalizer : DXLocalizer<ConditionalFormattingStringId>
    {
        static ConditionalFormattingLocalizer()
        {
            SetActiveLocalizerProvider(new DefaultActiveLocalizerProvider<ConditionalFormattingStringId>(CreateDefaultLocalizer()));
        }

        public static XtraLocalizer<ConditionalFormattingStringId> CreateDefaultLocalizer() => 
            new ConditionalFormattingResXLocalizer();

        public override XtraLocalizer<ConditionalFormattingStringId> CreateResXLocalizer() => 
            new ConditionalFormattingResXLocalizer();

        public static string GetString(ConditionalFormattingStringId id) => 
            XtraLocalizer<ConditionalFormattingStringId>.Active.GetLocalizedString(id);

        internal static string GetString(string stringId) => 
            GetString((ConditionalFormattingStringId) Enum.Parse(typeof(ConditionalFormattingStringId), stringId, false));

        protected override void PopulateStringTable()
        {
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting, "Conditional Formatting");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_HighlightCellsRules, "Highlight Cells Rules");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_HighlightCellsRules_GreaterThan, "Greater Than...");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_HighlightCellsRules_LessThan, "Less Than...");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_HighlightCellsRules_Between, "Between...");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_HighlightCellsRules_EqualTo, "Equal To...");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_HighlightCellsRules_TextThatContains, "Text that Contains...");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_HighlightCellsRules_UniqueDuplicate, "Duplicate Values...");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_HighlightCellsRules_ADateOccurring, "A Date Occurring...");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_HighlightCellsRules_CustomCondition, "Custom Condition...");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_TopBottomRules, "Top/Bottom Rules");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_TopBottomRules_Top10Items, "Top 10 Items...");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_TopBottomRules_Bottom10Items, "Bottom 10 Items...");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_TopBottomRules_Top10Percent, "Top 10 %...");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_TopBottomRules_Bottom10Percent, "Bottom 10 %...");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_TopBottomRules_AboveAverage, "Above Average...");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_TopBottomRules_BelowAverage, "Below Average...");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_DataBars, "Data Bars");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_ColorScales, "Color Scales");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_IconSets, "Icon Sets");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_ClearRules, "Clear Rules");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_ClearRules_FromAllColumns, "Clear Rules from All Columns");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_ClearRules_FromCurrentColumns, "Clear Rules from This Column");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_ManageRules, "Manage Rules");
            this.AddString(ConditionalFormattingStringId.MenuColumnConditionalFormatting_DataUpdateRules, "Data Update Rules");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedFormat_LightRedFillWithDarkRedText, "Light Red Fill with Dark Red Text");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedFormat_YellowFillWithDarkYellowText, "Yellow Fill with Dark Yellow Text");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedFormat_GreenFillWithDarkGreenText, "Green Fill with Dark Green Text");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedFormat_LightRedFill, "Light Red Fill");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedFormat_LightGreenFill, "Light Green Fill");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedFormat_RedText, "Red Text");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedFormat_GreenText, "Green Text");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedFormat_BoldText, "Bold Text");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedFormat_ItalicText, "Italic Text");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedFormat_StrikethroughText, "Strikethrough Text");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedColorScaleFormat_GreenYellowRedColorScale, "Green - Yellow - Red Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedColorScaleFormat_RedYellowGreenColorScale, "Red - Yellow - Green Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedColorScaleFormat_GreenWhiteRedColorScale, "Green - White - Red Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedColorScaleFormat_RedWhiteGreenColorScale, "Red - White - Green Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedColorScaleFormat_BlueWhiteRedColorScale, "Blue - White - Red Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedColorScaleFormat_RedWhiteBlueColorScale, "Red - White - Blue Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedColorScaleFormat_WhiteRedColorScale, "White - Red Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedColorScaleFormat_RedWhiteColorScale, "Red - White Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedColorScaleFormat_GreenWhiteColorScale, "Green - White Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedColorScaleFormat_WhiteGreenColorScale, "White - Green Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedColorScaleFormat_GreenYellowColorScale, "Green - Yellow Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedColorScaleFormat_YellowGreenColorScale, "Yellow - Green Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedColorScaleFormat_Description, "Apply a color gradient to a range of\r\ncells in this column. The color indicates\r\nwhere each cell falls within that range.");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_BlueSolidDataBar, "Blue Data Bar");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_GreenSolidDataBar, "Green Data Bar");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_RedSolidDataBar, "Red Data Bar");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_OrangeSolidDataBar, "Orange Data Bar");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_LightBlueSolidDataBar, "Light Blue Data Bar");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_PurpleSolidDataBar, "Purple Data Bar");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_BlueGradientDataBar, "Blue Data Bar Gradient");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_GreenGradientDataBar, "Green Data Bar Gradient");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_RedGradientDataBar, "Red Data Bar Gradient");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_OrangeGradientDataBar, "Orange Data Bar Gradient");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_LightBlueGradientDataBar, "Light Blue Data Bar Gradient");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_PurpleGradientDataBar, "Purple Data Bar Gradient");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_Description, "Add a colored data bar to represent\r\nthe value in a cell. The higher the\r\nvalue, the longer the bar.");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_SolidFillGroup, "Solid Fill");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedDataBarFormat_GradientFillGroup, "Gradient Fill");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Arrows3ColoredIconSet, "3 Arrows (Colored)");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Arrows3GrayIconSet, "3 Arrows (Gray)");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Triangles3IconSet, "3 Triangles");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Arrows4GrayIconSet, "4 Arrows (Gray)");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Arrows4ColoredIconSet, "4 Arrows (Colored)");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Arrows5GrayIconSet, "5 Arrows (Gray)");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Arrows5ColoredIconSet, "5 Arrows (Colored)");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_TrafficLights3UnrimmedIconSet, "3 Traffic Lights (Unrimmed)");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_TrafficLights3RimmedIconSet, "3 Traffic Lights (Rimmed)");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Signs3IconSet, "3 Signs");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_TrafficLights4IconSet, "4 Traffic Lights");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_RedToBlackIconSet, "Red To Black");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Symbols3CircledIconSet, "3 Symbols (Circled)");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Symbols3UncircledIconSet, "3 Symbols (Uncircled)");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Flags3IconSet, "3 Flags");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Stars3IconSet, "3 Stars");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Ratings4IconSet, "4 Ratings");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Quarters5IconSet, "5 Quarters");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Ratings5IconSet, "5 Ratings");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Boxes5IconSet, "5 Boxes");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_PositiveNegativeArrowsColoredIconSet, "Arrows (Colored)");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_PositiveNegativeArrowsGrayIconSet, "Arrows (Gray)");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_PositiveNegativeTrianglesIconSet, "Triangles");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_Description, "Choose a set of icons to represent\r\nthe values in this column.");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_DirectionalGroup, "Directional");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_ShapesGroup, "Shapes");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_IndicatorsGroup, "Indicators");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_RatingsGroup, "Ratings");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_PredefinedIconSetFormat_PositiveNegativeGroup, "Positive/Negative");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_GreaterThanDialog_Title, "Greater Than");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_LessThanDialog_Title, "Less Than");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_BetweenDialog_Title, "Between");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_EqualToDialog_Title, "Equal To");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_TextThatContainsDialog_Title, "Text That Contains");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_DateOccurringDialog_Title, "A Date Occurring");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_CustomConditionDialog_Title, "Custom Condition");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Top10ItemsDialog_Title, "Top 10 Items");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Bottom10ItemsDialog_Title, "Bottom 10 Items");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Top10PercentDialog_Title, "Top 10%");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Bottom10PercentDialog_Title, "Bottom 10%");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_AboveAverageDialog_Title, "Above Average");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_BelowAverageDialog_Title, "Below Average");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_UniqueDuplicateDialog_Title, "Duplicate Values");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Animation_Title, "Data Update Rules");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_GreaterThanDialog_Description, "Format cells that are GREATER THAN:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_LessThanDialog_Description, "Format cells that are LESS THAN:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_BetweenDialog_Description, "Format cells that are BETWEEN:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_EqualToDialog_Description, "Format cells that are EQUAL TO:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_TextThatContainsDialog_Description, "Format cells that contain the text:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_DateOccurringDialog_Description, "Format cells that contain a date occurring:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_CustomConditionDialog_Description, "Format cells that match the following condition:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Top10ItemsDialog_Description, "Format cells that rank in the TOP:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Bottom10ItemsDialog_Description, "Format cells that rank in the BOTTOM:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Top10PercentDialog_Description, "Format cells that rank in the TOP:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Bottom10PercentDialog_Description, "Format cells that rank in the BOTTOM:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_AboveAverageDialog_Description, "Format cells that are ABOVE AVERAGE:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_BelowAverageDialog_Description, "Format cells that are BELOW AVERAGE:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_UniqueDuplicateDialog_Description, "Format cells that contain:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Animation_Description, "Format cells whose values");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_GreaterThanDialog_Connector, "with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_LessThanDialog_Connector, "with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_BetweenDialog_Connector, "with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_EqualToDialog_Connector, "with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_TextThatContainsDialog_Connector, "with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_DateOccurringDialog_Connector, "with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_CustomConditionDialog_Connector, "with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Top10ItemsDialog_Connector, "with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Bottom10ItemsDialog_Connector, "with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Top10PercentDialog_Connector, "% with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Bottom10PercentDialog_Connector, "% with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_AboveAverageDialog_Connector, "for this column with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_BelowAverageDialog_Connector, "for this column with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_UniqueDuplicate_Connector, "values with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Animation_Connector, "with the");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Dialog_ApplyFormatToWholeRowText, "Apply format to the entire row");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_BetweenDialog_RangeValuesConnector, "and");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_CustomConditionEditor_Title, "Custom Condition Editor");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_CustomConditionDialog_InvalidExpressionMessage, "The specified expression contains invalid symbols (character {0}).");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_CustomConditionDialog_InvalidExpressionMessageEx, "The specified expression is invalid.");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_CustomConditionDialog_InvalidExpressionMessageTitle, "Error");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_DateOccurringDialog_IntervalYesterday, "Yesterday");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_DateOccurringDialog_IntervalToday, "Today");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_DateOccurringDialog_IntervalTomorrow, "Tomorrow");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_DateOccurringDialog_IntervalInTheLast7Days, "In the last 7 days");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_DateOccurringDialog_IntervalLastWeek, "Last week");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_DateOccurringDialog_IntervalThisWeek, "This week");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_DateOccurringDialog_IntervalNextWeek, "Next week");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_DateOccurringDialog_IntervalLastMonth, "Last month");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_DateOccurringDialog_IntervalThisMonth, "This month");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_DateOccurringDialog_IntervalNextMonth, "Next month");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_UniqueDuplicateDialog_Duplicate, "Duplicate");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_UniqueDuplicateDialog_Unique, "Unique");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Animation_Change, "Change");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Animation_Increase, "Increase");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Animation_Decrease, "Decrease");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Title, "Conditional Formatting Rules Manager");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_NewFormattingRule, "New Formatting Rule");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_EditFormattingRule, "Edit Formatting Rule");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_CellsContainDescription, "Format only cells that contain");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_DatesOccurring, "Dates Occurring");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_CellValue, "Cell Value");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Blanks, "Blanks");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_NoBlanks, "No Blanks");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Containing, "Containing");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_NotContaining, "Not Containing");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_BeginningWith, "Beginning With");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_EndingWith, "Ending With");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_SpecificText, "Specific Text");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Between, "Between");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_NotBetween, "Not Between");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_EqualTo, "Equal To");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_NotEqualTo, "Not Equal To");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_GreaterThan, "Greater Than");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_LessThan, "Less Than");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_GreaterOrEqual, "Greater Than Or Equal To");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_LessOrEqual, "Less Than Or Equal To");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FormatCells, "Format Cells");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Font, "Font");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Fill, "Fill");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FormulaDescription, "Use a formula to determine which cells to format");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_GradedColorScale, "Graded Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_DataBar, "Data Bar");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_IconSet, "Icon Set");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Above, "Above Average");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Below, "Below Average");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Top, "Top");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Bottom, "Bottom");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_TopBottomDescription, "Format only top or bottom ranked values");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_UniqueDuplicateDescription, "Format only unique or duplicate values");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_UniqueDuplicateTitle, "Format all:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_UniqueDuplicateConnector, "of the column's cell values");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_AnimationDescription, "Format only changing values");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_AnimationTitle, "Format only cells with");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_AnimationConnector, "values for");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_AnimationMeasure, "ms");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_AnimationRule, "Data Update Rule");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_AnimationChange, "Changed");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_AnimationIncrease, "Increased");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_AnimationDecrease, "Decreased");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_AboveBelowDescription, "Format only values that are above or below average");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_ValueBasedDescription, "Format all cells based on their values");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_2ColorScaleDescription, "2-Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_3ColorScaleDescription, "3-Color Scale");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_IconDescription, "Icon Sets");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_IconDescriptionConnector, " and");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_IconDescriptionCondition, "when");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_IconDescriptionValueCondition, "when value is");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_SelectRuleType, "Select a Rule Type:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_EditRuleDescription, "Edit the Rule Description:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_ContainTitle, "Format only cells with:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_AboveBelowTitle, "Format values that are:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_TopBottomTitle, "Format values that rank in the:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FormulaTitle, "Format values where this formula is true:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Preview, "Preview:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FormatButtonDescription, "Format...");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_ClearButtonDescription, "Clear");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FormatBackgroundColor, "Background Color:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FormatStrikethrough, "Strikethrough");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FormatUnderline, "Underline");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FormatFontFamily, "Font:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FormatFontStyle, "Font style:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FormatFontWeight, "Font weight:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FormatFontSize, "Size:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FormatColor, "Color:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_NoFormatSet, "No Format Set");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_ShowRulesFor, "Show formatting rules for:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_NewButtonDescription, "New Rule...");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_EditButtonDescription, "Edit Rule...");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_DeleteButtonDescription, "Delete Rule");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Minimum, "Minimum");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Midpoint, "Midpoint");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Maximum, "Maximum");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_DataBarPositive, "Positive Bar Appearance:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_DataBarNegative, "Negative Bar Appearance:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_DataBarFill, "Fill");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_DataBarColor, "Color");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_DataBarBorder, "Border");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_DataBarNoBorder, "No Border");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_ApplySameAppearance, "Apply same appearance as positive bar");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_IconSetStyle, "Icon Style:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_ReverseButtonDescription, "Reverse Icon Order");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_IconSetValueType, "Value Type:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_IconSetRulesTitle, "Display each icon according to these rules:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_ValueBasedTitle, "Format all cells based on their values:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_ValueBasedStyle, "Format Style:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_ValueBasedType, "Type:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_ValueBasedExpression, "Value:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_AboveBelowRangeDescription, "the average of the column's cell values");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_TopBottomRangeDescription, "% of the column's cell values");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_ShowModeAll, "All");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_ShowModeCurrent, "Current Column");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FieldNameMode, "Field Name");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_ExpressionMode, "Expression");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FillModeSolid, "Solid Fill");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FillModeGradient, "Gradient Fill");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_AboveMode, "Above");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_BelowMode, "Below");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_PercentMode, "Percent");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_NumberMode, "Number");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Apply, "Apply");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Rule, "Rule");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_AppliesTo, "Column");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_ApplyToRow, "Apply to the row");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Format, "Format");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_MinValue, "Min Value:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_MaxValue, "Max Value:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_MinMaxValueType, "Min/Max Value Type:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Auto, "<Auto>");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Numeric, "Numeric");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Date, "Date");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Icon, "Icon");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_CustomIconGroup, "Custom");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FormatIconDescription, "Select the Icon:");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_CustomFormat, "Custom Format...");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Up, "Up");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_Down, "Down");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_FilterAll, "(All)");
            this.AddString(ConditionalFormattingStringId.ConditionalFormatting_Manager_IsEnabled, "Is Enabled");
        }
    }
}

