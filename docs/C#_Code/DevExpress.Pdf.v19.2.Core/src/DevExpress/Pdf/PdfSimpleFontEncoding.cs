namespace DevExpress.Pdf
{
    using DevExpress.Pdf.Native;
    using System;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;

    public class PdfSimpleFontEncoding : PdfEncoding
    {
        private const string baseEncodingDictionaryKey = "BaseEncoding";
        private const string differencesDictionaryKey = "Differences";
        private const string macRomanEncodingName = "MacRomanEncoding";
        private const string winAnsiEncodingName = "WinAnsiEncoding";
        internal static readonly Dictionary<string, byte> MacReversedEncoding;
        internal static readonly Dictionary<byte, string> MacRomanEncoding;
        private static readonly Dictionary<byte, string> winAnsiEncoding;
        private static readonly Dictionary<byte, string> symbolEncoding;
        private static readonly Dictionary<byte, string> zapfDingbatsEncoding;
        private readonly PdfBaseEncoding baseEncoding;
        private readonly IDictionary<int, string> differences;
        private readonly IDictionary<byte, string> baseEncodingDictionary;

        static PdfSimpleFontEncoding()
        {
            Dictionary<string, byte> dictionary1 = new Dictionary<string, byte>();
            dictionary1.Add("notequal", 0xad);
            dictionary1.Add("infinity", 0xb0);
            dictionary1.Add("lessequal", 0xb2);
            dictionary1.Add("greaterequal", 0xb3);
            dictionary1.Add("partialdiff", 0xb6);
            dictionary1.Add("summation", 0xb7);
            dictionary1.Add("product", 0xb8);
            dictionary1.Add("pi", 0xb9);
            dictionary1.Add("integral", 0xba);
            dictionary1.Add("Omega", 0xbd);
            dictionary1.Add("radical", 0xc3);
            dictionary1.Add("approxequal", 0xc5);
            dictionary1.Add("Delta", 0xc6);
            dictionary1.Add("lozenge", 0xd7);
            dictionary1.Add("Euro", 0xdb);
            dictionary1.Add("apple", 240);
            dictionary1.Add("A", 0x41);
            dictionary1.Add("AE", 0xae);
            dictionary1.Add("Aacute", 0xe7);
            dictionary1.Add("Acircumflex", 0xe5);
            dictionary1.Add("Adieresis", 0x80);
            dictionary1.Add("Agrave", 0xcb);
            dictionary1.Add("Aring", 0x81);
            dictionary1.Add("Atilde", 0xcc);
            dictionary1.Add("B", 0x42);
            dictionary1.Add("C", 0x43);
            dictionary1.Add("Ccedilla", 130);
            dictionary1.Add("D", 0x44);
            dictionary1.Add("E", 0x45);
            dictionary1.Add("Eacute", 0x83);
            dictionary1.Add("Ecircumflex", 230);
            dictionary1.Add("Edieresis", 0xe8);
            dictionary1.Add("Egrave", 0xe9);
            dictionary1.Add("F", 70);
            dictionary1.Add("G", 0x47);
            dictionary1.Add("H", 0x48);
            dictionary1.Add("I", 0x49);
            dictionary1.Add("Iacute", 0xea);
            dictionary1.Add("Icircumflex", 0xeb);
            dictionary1.Add("Idieresis", 0xec);
            dictionary1.Add("Igrave", 0xed);
            dictionary1.Add("J", 0x4a);
            dictionary1.Add("K", 0x4b);
            dictionary1.Add("L", 0x4c);
            dictionary1.Add("M", 0x4d);
            dictionary1.Add("N", 0x4e);
            dictionary1.Add("Ntilde", 0x84);
            dictionary1.Add("O", 0x4f);
            dictionary1.Add("OE", 0xce);
            dictionary1.Add("Oacute", 0xee);
            dictionary1.Add("Ocircumflex", 0xef);
            dictionary1.Add("Odieresis", 0x85);
            dictionary1.Add("Ograve", 0xf1);
            dictionary1.Add("Oslash", 0xaf);
            dictionary1.Add("Otilde", 0xcd);
            dictionary1.Add("P", 80);
            dictionary1.Add("Q", 0x51);
            dictionary1.Add("R", 0x52);
            dictionary1.Add("S", 0x53);
            dictionary1.Add("T", 0x54);
            dictionary1.Add("U", 0x55);
            dictionary1.Add("Uacute", 0xf2);
            dictionary1.Add("Ucircumflex", 0xf3);
            dictionary1.Add("Udieresis", 0x86);
            dictionary1.Add("Ugrave", 0xf4);
            dictionary1.Add("V", 0x56);
            dictionary1.Add("W", 0x57);
            dictionary1.Add("X", 0x58);
            dictionary1.Add("Y", 0x59);
            dictionary1.Add("Ydieresis", 0xd9);
            dictionary1.Add("Z", 90);
            dictionary1.Add("a", 0x61);
            dictionary1.Add("aacute", 0x87);
            dictionary1.Add("acircumflex", 0x89);
            dictionary1.Add("acute", 0xab);
            dictionary1.Add("adieresis", 0x8a);
            dictionary1.Add("ae", 190);
            dictionary1.Add("agrave", 0x88);
            dictionary1.Add("ampersand", 0x26);
            dictionary1.Add("aring", 140);
            dictionary1.Add("asciicircum", 0x5e);
            dictionary1.Add("asciitilde", 0x7e);
            dictionary1.Add("asterisk", 0x2a);
            dictionary1.Add("at", 0x40);
            dictionary1.Add("atilde", 0x8b);
            dictionary1.Add("b", 0x62);
            dictionary1.Add("backslash", 0x5c);
            dictionary1.Add("bar", 0x7c);
            dictionary1.Add("braceleft", 0x7b);
            dictionary1.Add("braceright", 0x7d);
            dictionary1.Add("bracketleft", 0x5b);
            dictionary1.Add("bracketright", 0x5d);
            dictionary1.Add("breve", 0xf9);
            dictionary1.Add("bullet", 0xa5);
            dictionary1.Add("c", 0x63);
            dictionary1.Add("caron", 0xff);
            dictionary1.Add("ccedilla", 0x8d);
            dictionary1.Add("cedilla", 0xfc);
            dictionary1.Add("cent", 0xa2);
            dictionary1.Add("circumflex", 0xf6);
            dictionary1.Add("colon", 0x3a);
            dictionary1.Add("comma", 0x2c);
            dictionary1.Add("copyright", 0xa9);
            dictionary1.Add("currency", 0xdb);
            dictionary1.Add("d", 100);
            dictionary1.Add("dagger", 160);
            dictionary1.Add("daggerdbl", 0xe0);
            dictionary1.Add("degree", 0xa1);
            dictionary1.Add("dieresis", 0xac);
            dictionary1.Add("divide", 0xd6);
            dictionary1.Add("dollar", 0x24);
            dictionary1.Add("dotaccent", 250);
            dictionary1.Add("dotlessi", 0xf5);
            dictionary1.Add("e", 0x65);
            dictionary1.Add("eacute", 0x8e);
            dictionary1.Add("ecircumflex", 0x90);
            dictionary1.Add("edieresis", 0x91);
            dictionary1.Add("egrave", 0x8f);
            dictionary1.Add("eight", 0x38);
            dictionary1.Add("ellipsis", 0xc9);
            dictionary1.Add("emdash", 0xd1);
            dictionary1.Add("endash", 0xd0);
            dictionary1.Add("equal", 0x3d);
            dictionary1.Add("exclam", 0x21);
            dictionary1.Add("exclamdown", 0xc1);
            dictionary1.Add("f", 0x66);
            dictionary1.Add("fi", 0xde);
            dictionary1.Add("five", 0x35);
            dictionary1.Add("fl", 0xdf);
            dictionary1.Add("florin", 0xc4);
            dictionary1.Add("four", 0x34);
            dictionary1.Add("fraction", 0xda);
            dictionary1.Add("g", 0x67);
            dictionary1.Add("germandbls", 0xa7);
            dictionary1.Add("grave", 0x60);
            dictionary1.Add("greater", 0x3e);
            dictionary1.Add("guillemotleft", 0xc7);
            dictionary1.Add("guillemotright", 200);
            dictionary1.Add("guilsinglleft", 220);
            dictionary1.Add("guilsinglright", 0xdd);
            dictionary1.Add("h", 0x68);
            dictionary1.Add("hungarumlaut", 0xfd);
            dictionary1.Add("hyphen", 0x2d);
            dictionary1.Add("i", 0x69);
            dictionary1.Add("iacute", 0x92);
            dictionary1.Add("icircumflex", 0x94);
            dictionary1.Add("idieresis", 0x95);
            dictionary1.Add("igrave", 0x93);
            dictionary1.Add("j", 0x6a);
            dictionary1.Add("k", 0x6b);
            dictionary1.Add("l", 0x6c);
            dictionary1.Add("less", 60);
            dictionary1.Add("logicalnot", 0xc2);
            dictionary1.Add("m", 0x6d);
            dictionary1.Add("macron", 0xf8);
            dictionary1.Add("mu", 0xb5);
            dictionary1.Add("n", 110);
            dictionary1.Add("nine", 0x39);
            dictionary1.Add("ntilde", 150);
            dictionary1.Add("numbersign", 0x23);
            dictionary1.Add("o", 0x6f);
            dictionary1.Add("oacute", 0x97);
            dictionary1.Add("ocircumflex", 0x99);
            dictionary1.Add("odieresis", 0x9a);
            dictionary1.Add("oe", 0xcf);
            dictionary1.Add("ogonek", 0xfe);
            dictionary1.Add("ograve", 0x98);
            dictionary1.Add("one", 0x31);
            dictionary1.Add("ordfeminine", 0xbb);
            dictionary1.Add("ordmasculine", 0xbc);
            dictionary1.Add("oslash", 0xbf);
            dictionary1.Add("otilde", 0x9b);
            dictionary1.Add("p", 0x70);
            dictionary1.Add("paragraph", 0xa6);
            dictionary1.Add("parenleft", 40);
            dictionary1.Add("parenright", 0x29);
            dictionary1.Add("percent", 0x25);
            dictionary1.Add("period", 0x2e);
            dictionary1.Add("periodcentered", 0xe1);
            dictionary1.Add("perthousand", 0xe4);
            dictionary1.Add("plus", 0x2b);
            dictionary1.Add("plusminus", 0xb1);
            dictionary1.Add("q", 0x71);
            dictionary1.Add("question", 0x3f);
            dictionary1.Add("questiondown", 0xc0);
            dictionary1.Add("quotedbl", 0x22);
            dictionary1.Add("quotedblbase", 0xe3);
            dictionary1.Add("quotedblleft", 210);
            dictionary1.Add("quotedblright", 0xd3);
            dictionary1.Add("quoteleft", 0xd4);
            dictionary1.Add("quoteright", 0xd5);
            dictionary1.Add("quotesinglbase", 0xe2);
            dictionary1.Add("quotesingle", 0x27);
            dictionary1.Add("r", 0x72);
            dictionary1.Add("registered", 0xa8);
            dictionary1.Add("ring", 0xfb);
            dictionary1.Add("s", 0x73);
            dictionary1.Add("section", 0xa4);
            dictionary1.Add("semicolon", 0x3b);
            dictionary1.Add("seven", 0x37);
            dictionary1.Add("six", 0x36);
            dictionary1.Add("slash", 0x2f);
            dictionary1.Add("space", 0x20);
            dictionary1.Add("sterling", 0xa3);
            dictionary1.Add("t", 0x74);
            dictionary1.Add("three", 0x33);
            dictionary1.Add("tilde", 0xf7);
            dictionary1.Add("trademark", 170);
            dictionary1.Add("two", 50);
            dictionary1.Add("u", 0x75);
            dictionary1.Add("uacute", 0x9c);
            dictionary1.Add("ucircumflex", 0x9e);
            dictionary1.Add("udieresis", 0x9f);
            dictionary1.Add("ugrave", 0x9d);
            dictionary1.Add("underscore", 0x5f);
            dictionary1.Add("v", 0x76);
            dictionary1.Add("w", 0x77);
            dictionary1.Add("x", 120);
            dictionary1.Add("y", 0x79);
            dictionary1.Add("ydieresis", 0xd8);
            dictionary1.Add("yen", 180);
            dictionary1.Add("z", 0x7a);
            dictionary1.Add("zero", 0x30);
            MacReversedEncoding = dictionary1;
            Dictionary<byte, string> dictionary2 = new Dictionary<byte, string>();
            dictionary2.Add(0x41, "A");
            dictionary2.Add(0xae, "AE");
            dictionary2.Add(0xe7, "Aacute");
            dictionary2.Add(0xe5, "Acircumflex");
            dictionary2.Add(0x80, "Adieresis");
            dictionary2.Add(0xcb, "Agrave");
            dictionary2.Add(0x81, "Aring");
            dictionary2.Add(0xcc, "Atilde");
            dictionary2.Add(0x42, "B");
            dictionary2.Add(0x43, "C");
            dictionary2.Add(130, "Ccedilla");
            dictionary2.Add(0x44, "D");
            dictionary2.Add(0x45, "E");
            dictionary2.Add(0x83, "Eacute");
            dictionary2.Add(230, "Ecircumflex");
            dictionary2.Add(0xe8, "Edieresis");
            dictionary2.Add(0xe9, "Egrave");
            dictionary2.Add(70, "F");
            dictionary2.Add(0x47, "G");
            dictionary2.Add(0x48, "H");
            dictionary2.Add(0x49, "I");
            dictionary2.Add(0xea, "Iacute");
            dictionary2.Add(0xeb, "Icircumflex");
            dictionary2.Add(0xec, "Idieresis");
            dictionary2.Add(0xed, "Igrave");
            dictionary2.Add(0x4a, "J");
            dictionary2.Add(0x4b, "K");
            dictionary2.Add(0x4c, "L");
            dictionary2.Add(0x4d, "M");
            dictionary2.Add(0x4e, "N");
            dictionary2.Add(0x84, "Ntilde");
            dictionary2.Add(0x4f, "O");
            dictionary2.Add(0xce, "OE");
            dictionary2.Add(0xee, "Oacute");
            dictionary2.Add(0xef, "Ocircumflex");
            dictionary2.Add(0x85, "Odieresis");
            dictionary2.Add(0xf1, "Ograve");
            dictionary2.Add(0xaf, "Oslash");
            dictionary2.Add(0xcd, "Otilde");
            dictionary2.Add(80, "P");
            dictionary2.Add(0x51, "Q");
            dictionary2.Add(0x52, "R");
            dictionary2.Add(0x53, "S");
            dictionary2.Add(0x54, "T");
            dictionary2.Add(0x55, "U");
            dictionary2.Add(0xf2, "Uacute");
            dictionary2.Add(0xf3, "Ucircumflex");
            dictionary2.Add(0x86, "Udieresis");
            dictionary2.Add(0xf4, "Ugrave");
            dictionary2.Add(0x56, "V");
            dictionary2.Add(0x57, "W");
            dictionary2.Add(0x58, "X");
            dictionary2.Add(0x59, "Y");
            dictionary2.Add(0xd9, "Ydieresis");
            dictionary2.Add(90, "Z");
            dictionary2.Add(0x61, "a");
            dictionary2.Add(0x87, "aacute");
            dictionary2.Add(0x89, "acircumflex");
            dictionary2.Add(0xab, "acute");
            dictionary2.Add(0x8a, "adieresis");
            dictionary2.Add(190, "ae");
            dictionary2.Add(0x88, "agrave");
            dictionary2.Add(0x26, "ampersand");
            dictionary2.Add(140, "aring");
            dictionary2.Add(0x5e, "asciicircum");
            dictionary2.Add(0x7e, "asciitilde");
            dictionary2.Add(0x2a, "asterisk");
            dictionary2.Add(0x40, "at");
            dictionary2.Add(0x8b, "atilde");
            dictionary2.Add(0x62, "b");
            dictionary2.Add(0x5c, "backslash");
            dictionary2.Add(0x7c, "bar");
            dictionary2.Add(0x7b, "braceleft");
            dictionary2.Add(0x7d, "braceright");
            dictionary2.Add(0x5b, "bracketleft");
            dictionary2.Add(0x5d, "bracketright");
            dictionary2.Add(0xf9, "breve");
            dictionary2.Add(0xa5, "bullet");
            dictionary2.Add(0x63, "c");
            dictionary2.Add(0xff, "caron");
            dictionary2.Add(0x8d, "ccedilla");
            dictionary2.Add(0xfc, "cedilla");
            dictionary2.Add(0xa2, "cent");
            dictionary2.Add(0xf6, "circumflex");
            dictionary2.Add(0x3a, "colon");
            dictionary2.Add(0x2c, "comma");
            dictionary2.Add(0xa9, "copyright");
            dictionary2.Add(0xdb, "currency");
            dictionary2.Add(100, "d");
            dictionary2.Add(160, "dagger");
            dictionary2.Add(0xe0, "daggerdbl");
            dictionary2.Add(0xa1, "degree");
            dictionary2.Add(0xac, "dieresis");
            dictionary2.Add(0xd6, "divide");
            dictionary2.Add(0x24, "dollar");
            dictionary2.Add(250, "dotaccent");
            dictionary2.Add(0xf5, "dotlessi");
            dictionary2.Add(0x65, "e");
            dictionary2.Add(0x8e, "eacute");
            dictionary2.Add(0x90, "ecircumflex");
            dictionary2.Add(0x91, "edieresis");
            dictionary2.Add(0x8f, "egrave");
            dictionary2.Add(0x38, "eight");
            dictionary2.Add(0xc9, "ellipsis");
            dictionary2.Add(0xd1, "emdash");
            dictionary2.Add(0xd0, "endash");
            dictionary2.Add(0x3d, "equal");
            dictionary2.Add(0x21, "exclam");
            dictionary2.Add(0xc1, "exclamdown");
            dictionary2.Add(0x66, "f");
            dictionary2.Add(0xde, "fi");
            dictionary2.Add(0x35, "five");
            dictionary2.Add(0xdf, "fl");
            dictionary2.Add(0xc4, "florin");
            dictionary2.Add(0x34, "four");
            dictionary2.Add(0xda, "fraction");
            dictionary2.Add(0x67, "g");
            dictionary2.Add(0xa7, "germandbls");
            dictionary2.Add(0x60, "grave");
            dictionary2.Add(0x3e, "greater");
            dictionary2.Add(0xc7, "guillemotleft");
            dictionary2.Add(200, "guillemotright");
            dictionary2.Add(220, "guilsinglleft");
            dictionary2.Add(0xdd, "guilsinglright");
            dictionary2.Add(0x68, "h");
            dictionary2.Add(0xfd, "hungarumlaut");
            dictionary2.Add(0x2d, "hyphen");
            dictionary2.Add(0x69, "i");
            dictionary2.Add(0x92, "iacute");
            dictionary2.Add(0x94, "icircumflex");
            dictionary2.Add(0x95, "idieresis");
            dictionary2.Add(0x93, "igrave");
            dictionary2.Add(0x6a, "j");
            dictionary2.Add(0x6b, "k");
            dictionary2.Add(0x6c, "l");
            dictionary2.Add(60, "less");
            dictionary2.Add(0xc2, "logicalnot");
            dictionary2.Add(0x6d, "m");
            dictionary2.Add(0xf8, "macron");
            dictionary2.Add(0xb5, "mu");
            dictionary2.Add(110, "n");
            dictionary2.Add(0x39, "nine");
            dictionary2.Add(150, "ntilde");
            dictionary2.Add(0x23, "numbersign");
            dictionary2.Add(0x6f, "o");
            dictionary2.Add(0x97, "oacute");
            dictionary2.Add(0x99, "ocircumflex");
            dictionary2.Add(0x9a, "odieresis");
            dictionary2.Add(0xcf, "oe");
            dictionary2.Add(0xfe, "ogonek");
            dictionary2.Add(0x98, "ograve");
            dictionary2.Add(0x31, "one");
            dictionary2.Add(0xbb, "ordfeminine");
            dictionary2.Add(0xbc, "ordmasculine");
            dictionary2.Add(0xbf, "oslash");
            dictionary2.Add(0x9b, "otilde");
            dictionary2.Add(0x70, "p");
            dictionary2.Add(0xa6, "paragraph");
            dictionary2.Add(40, "parenleft");
            dictionary2.Add(0x29, "parenright");
            dictionary2.Add(0x25, "percent");
            dictionary2.Add(0x2e, "period");
            dictionary2.Add(0xe1, "periodcentered");
            dictionary2.Add(0xe4, "perthousand");
            dictionary2.Add(0x2b, "plus");
            dictionary2.Add(0xb1, "plusminus");
            dictionary2.Add(0x71, "q");
            dictionary2.Add(0x3f, "question");
            dictionary2.Add(0xc0, "questiondown");
            dictionary2.Add(0x22, "quotedbl");
            dictionary2.Add(0xe3, "quotedblbase");
            dictionary2.Add(210, "quotedblleft");
            dictionary2.Add(0xd3, "quotedblright");
            dictionary2.Add(0xd4, "quoteleft");
            dictionary2.Add(0xd5, "quoteright");
            dictionary2.Add(0xe2, "quotesinglbase");
            dictionary2.Add(0x27, "quotesingle");
            dictionary2.Add(0x72, "r");
            dictionary2.Add(0xa8, "registered");
            dictionary2.Add(0xfb, "ring");
            dictionary2.Add(0x73, "s");
            dictionary2.Add(0xa4, "section");
            dictionary2.Add(0x3b, "semicolon");
            dictionary2.Add(0x37, "seven");
            dictionary2.Add(0x36, "six");
            dictionary2.Add(0x2f, "slash");
            dictionary2.Add(0x20, "space");
            dictionary2.Add(0xa3, "sterling");
            dictionary2.Add(0x74, "t");
            dictionary2.Add(0x33, "three");
            dictionary2.Add(0xf7, "tilde");
            dictionary2.Add(170, "trademark");
            dictionary2.Add(50, "two");
            dictionary2.Add(0x75, "u");
            dictionary2.Add(0x9c, "uacute");
            dictionary2.Add(0x9e, "ucircumflex");
            dictionary2.Add(0x9f, "udieresis");
            dictionary2.Add(0x9d, "ugrave");
            dictionary2.Add(0x5f, "underscore");
            dictionary2.Add(0x76, "v");
            dictionary2.Add(0x77, "w");
            dictionary2.Add(120, "x");
            dictionary2.Add(0x79, "y");
            dictionary2.Add(0xd8, "ydieresis");
            dictionary2.Add(180, "yen");
            dictionary2.Add(0x7a, "z");
            dictionary2.Add(0x30, "zero");
            MacRomanEncoding = dictionary2;
            Dictionary<byte, string> dictionary3 = new Dictionary<byte, string>();
            dictionary3.Add(0x41, "A");
            dictionary3.Add(0xc6, "AE");
            dictionary3.Add(0xc1, "Aacute");
            dictionary3.Add(0xc2, "Acircumflex");
            dictionary3.Add(0xc4, "Adieresis");
            dictionary3.Add(0xc0, "Agrave");
            dictionary3.Add(0xc5, "Aring");
            dictionary3.Add(0xc3, "Atilde");
            dictionary3.Add(0x42, "B");
            dictionary3.Add(0x43, "C");
            dictionary3.Add(0xc7, "Ccedilla");
            dictionary3.Add(0x44, "D");
            dictionary3.Add(0x45, "E");
            dictionary3.Add(0xc9, "Eacute");
            dictionary3.Add(0xca, "Ecircumflex");
            dictionary3.Add(0xcb, "Edieresis");
            dictionary3.Add(200, "Egrave");
            dictionary3.Add(0xd0, "Eth");
            dictionary3.Add(0x80, "Euro");
            dictionary3.Add(70, "F");
            dictionary3.Add(0x47, "G");
            dictionary3.Add(0x48, "H");
            dictionary3.Add(0x49, "I");
            dictionary3.Add(0xcd, "Iacute");
            dictionary3.Add(0xce, "Icircumflex");
            dictionary3.Add(0xcf, "Idieresis");
            dictionary3.Add(0xcc, "Igrave");
            dictionary3.Add(0x4a, "J");
            dictionary3.Add(0x4b, "K");
            dictionary3.Add(0x4c, "L");
            dictionary3.Add(0x4d, "M");
            dictionary3.Add(0x4e, "N");
            dictionary3.Add(0xd1, "Ntilde");
            dictionary3.Add(0x4f, "O");
            dictionary3.Add(140, "OE");
            dictionary3.Add(0xd3, "Oacute");
            dictionary3.Add(0xd4, "Ocircumflex");
            dictionary3.Add(0xd6, "Odieresis");
            dictionary3.Add(210, "Ograve");
            dictionary3.Add(0xd8, "Oslash");
            dictionary3.Add(0xd5, "Otilde");
            dictionary3.Add(80, "P");
            dictionary3.Add(0x51, "Q");
            dictionary3.Add(0x52, "R");
            dictionary3.Add(0x53, "S");
            dictionary3.Add(0x8a, "Scaron");
            dictionary3.Add(0x54, "T");
            dictionary3.Add(0xde, "Thorn");
            dictionary3.Add(0x55, "U");
            dictionary3.Add(0xda, "Uacute");
            dictionary3.Add(0xdb, "Ucircumflex");
            dictionary3.Add(220, "Udieresis");
            dictionary3.Add(0xd9, "Ugrave");
            dictionary3.Add(0x56, "V");
            dictionary3.Add(0x57, "W");
            dictionary3.Add(0x58, "X");
            dictionary3.Add(0x59, "Y");
            dictionary3.Add(0xdd, "Yacute");
            dictionary3.Add(0x9f, "Ydieresis");
            dictionary3.Add(90, "Z");
            dictionary3.Add(0x8e, "Zcaron");
            dictionary3.Add(0x61, "a");
            dictionary3.Add(0xe1, "aacute");
            dictionary3.Add(0xe2, "acircumflex");
            dictionary3.Add(180, "acute");
            dictionary3.Add(0xe4, "adieresis");
            dictionary3.Add(230, "ae");
            dictionary3.Add(0xe0, "agrave");
            dictionary3.Add(0x26, "ampersand");
            dictionary3.Add(0xe5, "aring");
            dictionary3.Add(0x5e, "asciicircum");
            dictionary3.Add(0x7e, "asciitilde");
            dictionary3.Add(0x2a, "asterisk");
            dictionary3.Add(0x40, "at");
            dictionary3.Add(0xe3, "atilde");
            dictionary3.Add(0x62, "b");
            dictionary3.Add(0x5c, "backslash");
            dictionary3.Add(0x7c, "bar");
            dictionary3.Add(0x7b, "braceleft");
            dictionary3.Add(0x7d, "braceright");
            dictionary3.Add(0x5b, "bracketleft");
            dictionary3.Add(0x5d, "bracketright");
            dictionary3.Add(0xa6, "brokenbar");
            dictionary3.Add(0x7f, "bullet");
            dictionary3.Add(0x95, "bullet");
            dictionary3.Add(0x63, "c");
            dictionary3.Add(0xe7, "ccedilla");
            dictionary3.Add(0xb8, "cedilla");
            dictionary3.Add(0xa2, "cent");
            dictionary3.Add(0x88, "circumflex");
            dictionary3.Add(0x3a, "colon");
            dictionary3.Add(0x2c, "comma");
            dictionary3.Add(0xa9, "copyright");
            dictionary3.Add(0xa4, "currency");
            dictionary3.Add(100, "d");
            dictionary3.Add(0x86, "dagger");
            dictionary3.Add(0x87, "daggerdbl");
            dictionary3.Add(0xb0, "degree");
            dictionary3.Add(0xa8, "dieresis");
            dictionary3.Add(0xf7, "divide");
            dictionary3.Add(0x24, "dollar");
            dictionary3.Add(0x65, "e");
            dictionary3.Add(0xe9, "eacute");
            dictionary3.Add(0xea, "ecircumflex");
            dictionary3.Add(0xeb, "edieresis");
            dictionary3.Add(0xe8, "egrave");
            dictionary3.Add(0x38, "eight");
            dictionary3.Add(0x85, "ellipsis");
            dictionary3.Add(0x97, "emdash");
            dictionary3.Add(150, "endash");
            dictionary3.Add(0x3d, "equal");
            dictionary3.Add(240, "eth");
            dictionary3.Add(0x21, "exclam");
            dictionary3.Add(0xa1, "exclamdown");
            dictionary3.Add(0x66, "f");
            dictionary3.Add(0x35, "five");
            dictionary3.Add(0x83, "florin");
            dictionary3.Add(0x34, "four");
            dictionary3.Add(0x67, "g");
            dictionary3.Add(0xdf, "germandbls");
            dictionary3.Add(0x60, "grave");
            dictionary3.Add(0x3e, "greater");
            dictionary3.Add(0xab, "guillemotleft");
            dictionary3.Add(0xbb, "guillemotright");
            dictionary3.Add(0x8b, "guilsinglleft");
            dictionary3.Add(0x9b, "guilsinglright");
            dictionary3.Add(0x68, "h");
            dictionary3.Add(0x2d, "hyphen");
            dictionary3.Add(0x69, "i");
            dictionary3.Add(0xed, "iacute");
            dictionary3.Add(0xee, "icircumflex");
            dictionary3.Add(0xef, "idieresis");
            dictionary3.Add(0xec, "igrave");
            dictionary3.Add(0x6a, "j");
            dictionary3.Add(0x6b, "k");
            dictionary3.Add(0x6c, "l");
            dictionary3.Add(60, "less");
            dictionary3.Add(0xac, "logicalnot");
            dictionary3.Add(0x6d, "m");
            dictionary3.Add(0xaf, "macron");
            dictionary3.Add(0xb5, "mu");
            dictionary3.Add(0xd7, "multiply");
            dictionary3.Add(110, "n");
            dictionary3.Add(0x39, "nine");
            dictionary3.Add(0xf1, "ntilde");
            dictionary3.Add(0x23, "numbersign");
            dictionary3.Add(0x6f, "o");
            dictionary3.Add(0xf3, "oacute");
            dictionary3.Add(0xf4, "ocircumflex");
            dictionary3.Add(0xf6, "odieresis");
            dictionary3.Add(0x9c, "oe");
            dictionary3.Add(0xf2, "ograve");
            dictionary3.Add(0x31, "one");
            dictionary3.Add(0xbd, "onehalf");
            dictionary3.Add(0xbc, "onequarter");
            dictionary3.Add(0xb9, "onesuperior");
            dictionary3.Add(170, "ordfeminine");
            dictionary3.Add(0xba, "ordmasculine");
            dictionary3.Add(0xf8, "oslash");
            dictionary3.Add(0xf5, "otilde");
            dictionary3.Add(0x70, "p");
            dictionary3.Add(0xb6, "paragraph");
            dictionary3.Add(40, "parenleft");
            dictionary3.Add(0x29, "parenright");
            dictionary3.Add(0x25, "percent");
            dictionary3.Add(0x2e, "period");
            dictionary3.Add(0xb7, "periodcentered");
            dictionary3.Add(0x89, "perthousand");
            dictionary3.Add(0x2b, "plus");
            dictionary3.Add(0xb1, "plusminus");
            dictionary3.Add(0x71, "q");
            dictionary3.Add(0x3f, "question");
            dictionary3.Add(0xbf, "questiondown");
            dictionary3.Add(0x22, "quotedbl");
            dictionary3.Add(0x84, "quotedblbase");
            dictionary3.Add(0x93, "quotedblleft");
            dictionary3.Add(0x94, "quotedblright");
            dictionary3.Add(0x91, "quoteleft");
            dictionary3.Add(0x92, "quoteright");
            dictionary3.Add(130, "quotesinglbase");
            dictionary3.Add(0x27, "quotesingle");
            dictionary3.Add(0x72, "r");
            dictionary3.Add(0xae, "registered");
            dictionary3.Add(0x73, "s");
            dictionary3.Add(0x9a, "scaron");
            dictionary3.Add(0xa7, "section");
            dictionary3.Add(0x3b, "semicolon");
            dictionary3.Add(0x37, "seven");
            dictionary3.Add(0x36, "six");
            dictionary3.Add(0x2f, "slash");
            dictionary3.Add(10, "space");
            dictionary3.Add(13, "space");
            dictionary3.Add(0x20, "space");
            dictionary3.Add(160, "space");
            dictionary3.Add(0xa3, "sterling");
            dictionary3.Add(0x74, "t");
            dictionary3.Add(0xfe, "thorn");
            dictionary3.Add(0x33, "three");
            dictionary3.Add(190, "threequarters");
            dictionary3.Add(0xb3, "threesuperior");
            dictionary3.Add(0x98, "tilde");
            dictionary3.Add(0x99, "trademark");
            dictionary3.Add(50, "two");
            dictionary3.Add(0xb2, "twosuperior");
            dictionary3.Add(0x75, "u");
            dictionary3.Add(250, "uacute");
            dictionary3.Add(0xfb, "ucircumflex");
            dictionary3.Add(0xfc, "udieresis");
            dictionary3.Add(0xf9, "ugrave");
            dictionary3.Add(0x5f, "underscore");
            dictionary3.Add(0x76, "v");
            dictionary3.Add(0x77, "w");
            dictionary3.Add(120, "x");
            dictionary3.Add(0x79, "y");
            dictionary3.Add(0xfd, "yacute");
            dictionary3.Add(0xff, "ydieresis");
            dictionary3.Add(0xa5, "yen");
            dictionary3.Add(0x7a, "z");
            dictionary3.Add(0x9e, "zcaron");
            dictionary3.Add(0x30, "zero");
            dictionary3.Add(0xad, "hyphen");
            dictionary3.Add(0x81, "bullet");
            dictionary3.Add(0x8d, "bullet");
            dictionary3.Add(0x8f, "bullet");
            dictionary3.Add(0x90, "bullet");
            dictionary3.Add(0x9d, "bullet");
            winAnsiEncoding = dictionary3;
            Dictionary<byte, string> dictionary4 = new Dictionary<byte, string>();
            dictionary4.Add(0x41, "Alpha");
            dictionary4.Add(0x42, "Beta");
            dictionary4.Add(0x43, "Chi");
            dictionary4.Add(0x44, "Delta");
            dictionary4.Add(0x45, "Epsilon");
            dictionary4.Add(0x48, "Eta");
            dictionary4.Add(160, "Euro");
            dictionary4.Add(0x47, "Gamma");
            dictionary4.Add(0xc1, "Ifraktur");
            dictionary4.Add(0x49, "Iota");
            dictionary4.Add(0x4b, "Kappa");
            dictionary4.Add(0x4c, "Lambda");
            dictionary4.Add(0x4d, "Mu");
            dictionary4.Add(0x4e, "Nu");
            dictionary4.Add(0x57, "Omega");
            dictionary4.Add(0x4f, "Omicron");
            dictionary4.Add(70, "Phi");
            dictionary4.Add(80, "Pi");
            dictionary4.Add(0x59, "Psi");
            dictionary4.Add(0xc2, "Rfraktur");
            dictionary4.Add(0x52, "Rho");
            dictionary4.Add(0x53, "Sigma");
            dictionary4.Add(0x54, "Tau");
            dictionary4.Add(0x51, "Theta");
            dictionary4.Add(0x55, "Upsilon");
            dictionary4.Add(0xa1, "Upsilon1");
            dictionary4.Add(0x58, "Xi");
            dictionary4.Add(90, "Zeta");
            dictionary4.Add(0xc0, "aleph");
            dictionary4.Add(0x61, "alpha");
            dictionary4.Add(0x26, "ampersand");
            dictionary4.Add(0xd0, "angle");
            dictionary4.Add(0xe1, "angleleft");
            dictionary4.Add(0xf1, "angleright");
            dictionary4.Add(0xbb, "approxequal");
            dictionary4.Add(0xab, "arrowboth");
            dictionary4.Add(0xdb, "arrowdblboth");
            dictionary4.Add(0xdf, "arrowdbldown");
            dictionary4.Add(220, "arrowdblleft");
            dictionary4.Add(0xde, "arrowdblright");
            dictionary4.Add(0xdd, "arrowdblup");
            dictionary4.Add(0xaf, "arrowdown");
            dictionary4.Add(190, "arrowhorizex");
            dictionary4.Add(0xac, "arrowleft");
            dictionary4.Add(0xae, "arrowright");
            dictionary4.Add(0xad, "arrowup");
            dictionary4.Add(0xbd, "arrowvertex");
            dictionary4.Add(0x2a, "asteriskmath");
            dictionary4.Add(0x7c, "bar");
            dictionary4.Add(0x62, "beta");
            dictionary4.Add(0x7b, "braceleft");
            dictionary4.Add(0x7d, "braceright");
            dictionary4.Add(0xec, "bracelefttp");
            dictionary4.Add(0xed, "braceleftmid");
            dictionary4.Add(0xee, "braceleftbt");
            dictionary4.Add(0xfc, "bracerighttp");
            dictionary4.Add(0xfd, "bracerightmid");
            dictionary4.Add(0xfe, "bracerightbt");
            dictionary4.Add(0xef, "braceex");
            dictionary4.Add(0x5b, "bracketleft");
            dictionary4.Add(0x5d, "bracketright");
            dictionary4.Add(0xe9, "bracketlefttp");
            dictionary4.Add(0xea, "bracketleftex");
            dictionary4.Add(0xeb, "bracketleftbt");
            dictionary4.Add(0xf9, "bracketrighttp");
            dictionary4.Add(250, "bracketrightex");
            dictionary4.Add(0xfb, "bracketrightbt");
            dictionary4.Add(0xb7, "bullet");
            dictionary4.Add(0xbf, "carriagereturn");
            dictionary4.Add(0x63, "chi");
            dictionary4.Add(0xc4, "circlemultiply");
            dictionary4.Add(0xc5, "circleplus");
            dictionary4.Add(0xa7, "club");
            dictionary4.Add(0x3a, "colon");
            dictionary4.Add(0x2c, "comma");
            dictionary4.Add(0x40, "congruent");
            dictionary4.Add(0xe3, "copyrightsans");
            dictionary4.Add(0xd3, "copyrightserif");
            dictionary4.Add(0xb0, "degree");
            dictionary4.Add(100, "delta");
            dictionary4.Add(0xa8, "diamond");
            dictionary4.Add(0xb8, "divide");
            dictionary4.Add(0xd7, "dotmath");
            dictionary4.Add(0x38, "eight");
            dictionary4.Add(0xce, "element");
            dictionary4.Add(0xbc, "ellipsis");
            dictionary4.Add(0xc6, "emptyset");
            dictionary4.Add(0x65, "epsilon");
            dictionary4.Add(0x3d, "equal");
            dictionary4.Add(0xba, "equivalence");
            dictionary4.Add(0x68, "eta");
            dictionary4.Add(0x21, "exclam");
            dictionary4.Add(0x24, "existential");
            dictionary4.Add(0x35, "five");
            dictionary4.Add(0xa6, "florin");
            dictionary4.Add(0x34, "four");
            dictionary4.Add(0xa4, "fraction");
            dictionary4.Add(0x67, "gamma");
            dictionary4.Add(0xd1, "gradient");
            dictionary4.Add(0x3e, "greater");
            dictionary4.Add(0xb3, "greaterequal");
            dictionary4.Add(0xa9, "heart");
            dictionary4.Add(0xa5, "infinity");
            dictionary4.Add(0xf2, "integral");
            dictionary4.Add(0xf3, "integraltp");
            dictionary4.Add(0xf4, "integralex");
            dictionary4.Add(0xf5, "integralbt");
            dictionary4.Add(0xc7, "intersection");
            dictionary4.Add(0x69, "iota");
            dictionary4.Add(0x6b, "kappa");
            dictionary4.Add(0x6c, "lambda");
            dictionary4.Add(60, "less");
            dictionary4.Add(0xa3, "lessequal");
            dictionary4.Add(0xd9, "logicaland");
            dictionary4.Add(0xd8, "logicalnot");
            dictionary4.Add(0xda, "logicalor");
            dictionary4.Add(0xe0, "lozenge");
            dictionary4.Add(0x2d, "minus");
            dictionary4.Add(0xa2, "minute");
            dictionary4.Add(0x6d, "mu");
            dictionary4.Add(180, "multiply");
            dictionary4.Add(0x39, "nine");
            dictionary4.Add(0xcf, "notelement");
            dictionary4.Add(0xb9, "notequal");
            dictionary4.Add(0xcb, "notsubset");
            dictionary4.Add(110, "nu");
            dictionary4.Add(0x23, "numbersign");
            dictionary4.Add(0x77, "omega");
            dictionary4.Add(0x76, "omega1");
            dictionary4.Add(0x6f, "omicron");
            dictionary4.Add(0x31, "one");
            dictionary4.Add(40, "parenleft");
            dictionary4.Add(0x29, "parenright");
            dictionary4.Add(230, "parenlefttp");
            dictionary4.Add(0xe7, "parenleftex");
            dictionary4.Add(0xe8, "parenleftbt");
            dictionary4.Add(0xf6, "parenrighttp");
            dictionary4.Add(0xf7, "parenrightex");
            dictionary4.Add(0xf8, "parenrightbt");
            dictionary4.Add(0xb6, "partialdiff");
            dictionary4.Add(0x25, "percent");
            dictionary4.Add(0x2e, "period");
            dictionary4.Add(0x5e, "perpendicular");
            dictionary4.Add(0x66, "phi");
            dictionary4.Add(0x6a, "phi1");
            dictionary4.Add(0x70, "pi");
            dictionary4.Add(0x2b, "plus");
            dictionary4.Add(0xb1, "plusminus");
            dictionary4.Add(0xd5, "product");
            dictionary4.Add(0xcc, "propersubset");
            dictionary4.Add(0xc9, "propersuperset");
            dictionary4.Add(0xb5, "proportional");
            dictionary4.Add(0x79, "psi");
            dictionary4.Add(0x3f, "question");
            dictionary4.Add(0xd6, "radical");
            dictionary4.Add(0x60, "radicalex");
            dictionary4.Add(0xcd, "reflexsubset");
            dictionary4.Add(0xca, "reflexsuperset");
            dictionary4.Add(0xe2, "registersans");
            dictionary4.Add(210, "registerserif");
            dictionary4.Add(0x72, "rho");
            dictionary4.Add(0xb2, "second");
            dictionary4.Add(0x3b, "semicolon");
            dictionary4.Add(0x37, "seven");
            dictionary4.Add(0x73, "sigma");
            dictionary4.Add(0x56, "sigma1");
            dictionary4.Add(0x7e, "similar");
            dictionary4.Add(0x36, "six");
            dictionary4.Add(0x2f, "slash");
            dictionary4.Add(0x20, "space");
            dictionary4.Add(170, "spade");
            dictionary4.Add(0x27, "suchthat");
            dictionary4.Add(0xe5, "summation");
            dictionary4.Add(0x74, "tau");
            dictionary4.Add(0x5c, "therefore");
            dictionary4.Add(0x71, "theta");
            dictionary4.Add(0x4a, "theta1");
            dictionary4.Add(0x33, "three");
            dictionary4.Add(0xe4, "trademarksans");
            dictionary4.Add(0xd4, "trademarkserif");
            dictionary4.Add(50, "two");
            dictionary4.Add(0x5f, "underscore");
            dictionary4.Add(200, "union");
            dictionary4.Add(0x22, "universal");
            dictionary4.Add(0x75, "upsilon");
            dictionary4.Add(0xc3, "weierstrass");
            dictionary4.Add(120, "xi");
            dictionary4.Add(0x30, "zero");
            dictionary4.Add(0x7a, "zeta");
            symbolEncoding = dictionary4;
            Dictionary<byte, string> dictionary5 = new Dictionary<byte, string>();
            dictionary5.Add(0x20, "space");
            dictionary5.Add(0x21, "a1");
            dictionary5.Add(0x22, "a2");
            dictionary5.Add(0x23, "a202");
            dictionary5.Add(0x24, "a3");
            dictionary5.Add(0x25, "a4");
            dictionary5.Add(0x26, "a5");
            dictionary5.Add(0x27, "a119");
            dictionary5.Add(40, "a118");
            dictionary5.Add(0x29, "a117");
            dictionary5.Add(0x2a, "a11");
            dictionary5.Add(0x2b, "a12");
            dictionary5.Add(0x2c, "a13");
            dictionary5.Add(0x2d, "a14");
            dictionary5.Add(0x2e, "a15");
            dictionary5.Add(0x2f, "a16");
            dictionary5.Add(0x30, "a105");
            dictionary5.Add(0x31, "a17");
            dictionary5.Add(50, "a18");
            dictionary5.Add(0x33, "a19");
            dictionary5.Add(0x34, "a20");
            dictionary5.Add(0x35, "a21");
            dictionary5.Add(0x36, "a22");
            dictionary5.Add(0x37, "a23");
            dictionary5.Add(0x38, "a24");
            dictionary5.Add(0x39, "a25");
            dictionary5.Add(0x3a, "a26");
            dictionary5.Add(0x3b, "a27");
            dictionary5.Add(60, "a28");
            dictionary5.Add(0x3d, "a6");
            dictionary5.Add(0x3e, "a7");
            dictionary5.Add(0x3f, "a8");
            dictionary5.Add(0x40, "a9");
            dictionary5.Add(0x41, "a10");
            dictionary5.Add(0x42, "a29");
            dictionary5.Add(0x43, "a30");
            dictionary5.Add(0x44, "a31");
            dictionary5.Add(0x45, "a32");
            dictionary5.Add(70, "a33");
            dictionary5.Add(0x47, "a34");
            dictionary5.Add(0x48, "a35");
            dictionary5.Add(0x49, "a36");
            dictionary5.Add(0x4a, "a37");
            dictionary5.Add(0x4b, "a38");
            dictionary5.Add(0x4c, "a39");
            dictionary5.Add(0x4d, "a40");
            dictionary5.Add(0x4e, "a41");
            dictionary5.Add(0x4f, "a42");
            dictionary5.Add(80, "a43");
            dictionary5.Add(0x51, "a44");
            dictionary5.Add(0x52, "a45");
            dictionary5.Add(0x53, "a46");
            dictionary5.Add(0x54, "a47");
            dictionary5.Add(0x55, "a48");
            dictionary5.Add(0x56, "a49");
            dictionary5.Add(0x57, "a50");
            dictionary5.Add(0x58, "a51");
            dictionary5.Add(0x59, "a52");
            dictionary5.Add(90, "a53");
            dictionary5.Add(0x5b, "a54");
            dictionary5.Add(0x5c, "a55");
            dictionary5.Add(0x5d, "a56");
            dictionary5.Add(0x5e, "a57");
            dictionary5.Add(0x5f, "a58");
            dictionary5.Add(0x60, "a59");
            dictionary5.Add(0x61, "a60");
            dictionary5.Add(0x62, "a61");
            dictionary5.Add(0x63, "a62");
            dictionary5.Add(100, "a63");
            dictionary5.Add(0x65, "a64");
            dictionary5.Add(0x66, "a65");
            dictionary5.Add(0x67, "a66");
            dictionary5.Add(0x68, "a67");
            dictionary5.Add(0x69, "a68");
            dictionary5.Add(0x6a, "a69");
            dictionary5.Add(0x6b, "a70");
            dictionary5.Add(0x6c, "a71");
            dictionary5.Add(0x6d, "a72");
            dictionary5.Add(110, "a73");
            dictionary5.Add(0x6f, "a74");
            dictionary5.Add(0x70, "a203");
            dictionary5.Add(0x71, "a75");
            dictionary5.Add(0x72, "a204");
            dictionary5.Add(0x73, "a76");
            dictionary5.Add(0x74, "a77");
            dictionary5.Add(0x75, "a78");
            dictionary5.Add(0x76, "a79");
            dictionary5.Add(0x77, "a81");
            dictionary5.Add(120, "a82");
            dictionary5.Add(0x79, "a83");
            dictionary5.Add(0x7a, "a84");
            dictionary5.Add(0x7b, "a97");
            dictionary5.Add(0x7c, "a98");
            dictionary5.Add(0x7d, "a99");
            dictionary5.Add(0x7e, "a100");
            dictionary5.Add(0xa1, "a101");
            dictionary5.Add(0xa2, "a102");
            dictionary5.Add(0xa3, "a103");
            dictionary5.Add(0xa4, "a104");
            dictionary5.Add(0xa5, "a106");
            dictionary5.Add(0xa6, "a107");
            dictionary5.Add(0xa7, "a108");
            dictionary5.Add(0xa8, "a112");
            dictionary5.Add(0xa9, "a111");
            dictionary5.Add(170, "a110");
            dictionary5.Add(0xab, "a109");
            dictionary5.Add(0xac, "a120");
            dictionary5.Add(0xad, "a121");
            dictionary5.Add(0xae, "a122");
            dictionary5.Add(0xaf, "a123");
            dictionary5.Add(0xb0, "a124");
            dictionary5.Add(0xb1, "a125");
            dictionary5.Add(0xb2, "a126");
            dictionary5.Add(0xb3, "a127");
            dictionary5.Add(180, "a128");
            dictionary5.Add(0xb5, "a129");
            dictionary5.Add(0xb6, "a130");
            dictionary5.Add(0xb7, "a131");
            dictionary5.Add(0xb8, "a132");
            dictionary5.Add(0xb9, "a133");
            dictionary5.Add(0xba, "a134");
            dictionary5.Add(0xbb, "a135");
            dictionary5.Add(0xbc, "a136");
            dictionary5.Add(0xbd, "a137");
            dictionary5.Add(190, "a138");
            dictionary5.Add(0xbf, "a139");
            dictionary5.Add(0xc0, "a140");
            dictionary5.Add(0xc1, "a141");
            dictionary5.Add(0xc2, "a142");
            dictionary5.Add(0xc3, "a143");
            dictionary5.Add(0xc4, "a144");
            dictionary5.Add(0xc5, "a145");
            dictionary5.Add(0xc6, "a146");
            dictionary5.Add(0xc7, "a147");
            dictionary5.Add(200, "a148");
            dictionary5.Add(0xc9, "a149");
            dictionary5.Add(0xca, "a150");
            dictionary5.Add(0xcb, "a151");
            dictionary5.Add(0xcc, "a152");
            dictionary5.Add(0xcd, "a153");
            dictionary5.Add(0xce, "a154");
            dictionary5.Add(0xcf, "a155");
            dictionary5.Add(0xd0, "a156");
            dictionary5.Add(0xd1, "a157");
            dictionary5.Add(210, "a158");
            dictionary5.Add(0xd3, "a159");
            dictionary5.Add(0xd4, "a160");
            dictionary5.Add(0xd5, "a161");
            dictionary5.Add(0xd6, "a163");
            dictionary5.Add(0xd7, "a164");
            dictionary5.Add(0xd8, "a196");
            dictionary5.Add(0xd9, "a165");
            dictionary5.Add(0xda, "a192");
            dictionary5.Add(0xdb, "a166");
            dictionary5.Add(220, "a167");
            dictionary5.Add(0xdd, "a168");
            dictionary5.Add(0xde, "a169");
            dictionary5.Add(0xdf, "a170");
            dictionary5.Add(0xe0, "a171");
            dictionary5.Add(0xe1, "a172");
            dictionary5.Add(0xe2, "a173");
            dictionary5.Add(0xe3, "a162");
            dictionary5.Add(0xe4, "a174");
            dictionary5.Add(0xe5, "a175");
            dictionary5.Add(230, "a176");
            dictionary5.Add(0xe7, "a177");
            dictionary5.Add(0xe8, "a178");
            dictionary5.Add(0xe9, "a179");
            dictionary5.Add(0xea, "a193");
            dictionary5.Add(0xeb, "a180");
            dictionary5.Add(0xec, "a199");
            dictionary5.Add(0xed, "a181");
            dictionary5.Add(0xee, "a200");
            dictionary5.Add(0xef, "a182");
            dictionary5.Add(240, "a201");
            dictionary5.Add(0xf1, "a183");
            dictionary5.Add(0xf2, "a184");
            dictionary5.Add(0xf3, "a197");
            dictionary5.Add(0xf4, "a185");
            dictionary5.Add(0xf5, "a194");
            dictionary5.Add(0xf6, "a198");
            dictionary5.Add(0xf7, "a186");
            dictionary5.Add(0xf9, "a195");
            dictionary5.Add(250, "a187");
            dictionary5.Add(0xfb, "a188");
            dictionary5.Add(0xfc, "a189");
            dictionary5.Add(0xfd, "a190");
            dictionary5.Add(0xfe, "a191");
            zapfDingbatsEncoding = dictionary5;
        }

        internal PdfSimpleFontEncoding(string baseFont, string encodingName, IDictionary<int, string> differences = null)
        {
            IDictionary<int, string> dictionary1 = differences;
            if (differences == null)
            {
                IDictionary<int, string> local1 = differences;
                dictionary1 = new SortedDictionary<int, string>();
            }
            this.differences = dictionary1;
            if (encodingName == null)
            {
                encodingName = string.Empty;
            }
            if (encodingName == "MacRomanEncoding")
            {
                this.baseEncoding = PdfBaseEncoding.MacRoman;
                this.baseEncodingDictionary = MacRomanEncoding;
            }
            else if (encodingName == "WinAnsiEncoding")
            {
                this.baseEncoding = PdfBaseEncoding.WinAnsi;
                this.baseEncodingDictionary = winAnsiEncoding;
            }
            else
            {
                this.baseEncoding = PdfBaseEncoding.Standard;
                if (baseFont == "Symbol")
                {
                    this.baseEncodingDictionary = symbolEncoding;
                }
                else if (baseFont != "ZapfDingbats")
                {
                    this.baseEncodingDictionary = PdfType1FontPredefinedEncoding.StandardEncoding;
                }
                else
                {
                    this.baseEncodingDictionary = zapfDingbatsEncoding;
                }
            }
        }

        internal static PdfSimpleFontEncoding Create(string baseFont, object value)
        {
            if (value == null)
            {
                return new PdfSimpleFontEncoding(baseFont, string.Empty, null);
            }
            PdfName name = value as PdfName;
            if (name != null)
            {
                return new PdfSimpleFontEncoding(baseFont, name.Name, null);
            }
            PdfReaderDictionary dictionary = value as PdfReaderDictionary;
            if (dictionary == null)
            {
                PdfDocumentStructureReader.ThrowIncorrectDataException();
            }
            string encodingName = dictionary.GetName("BaseEncoding");
            SortedDictionary<int, string> differences = new SortedDictionary<int, string>();
            IList<object> array = dictionary.GetArray("Differences");
            if ((array != null) && (array.Count > 0))
            {
                int num2 = 0;
                foreach (object obj2 in array)
                {
                    PdfName name2 = obj2 as PdfName;
                    if (name2 != null)
                    {
                        differences[num2++] = name2.Name;
                        continue;
                    }
                    if (!(obj2 is int))
                    {
                        PdfDocumentStructureReader.ThrowIncorrectDataException();
                    }
                    num2 = (int) obj2;
                }
            }
            return new PdfSimpleFontEncoding(baseFont, encodingName, differences);
        }

        internal static PdfSimpleFontEncoding CreateWinAnsiEncoding(string baseFont) => 
            Create(baseFont, new PdfName("WinAnsiEncoding"));

        internal string GetGlyphName(byte code)
        {
            string str;
            return (!this.differences.TryGetValue(code, out str) ? (this.baseEncodingDictionary.TryGetValue(code, out str) ? str : ".notdef") : str);
        }

        protected internal override PdfStringCommandData GetStringData(byte[] bytes, double[] glyphOffsets)
        {
            int length = bytes.Length;
            short[] str = new short[length];
            byte[][] charCodes = new byte[length][];
            for (int i = 0; i < length; i++)
            {
                str[i] = bytes[i];
                charCodes[i] = new byte[] { bytes[i] };
            }
            double[] offsets = glyphOffsets;
            if (glyphOffsets == null)
            {
                double[] local1 = glyphOffsets;
                offsets = new double[length + 1];
            }
            return new PdfStringCommandData(charCodes, str, offsets);
        }

        protected internal override object ToWritableObject(PdfObjectCollection objects) => 
            this.Write(objects);

        protected internal override object Write(PdfObjectCollection objects)
        {
            PdfBaseEncoding baseEncoding = this.baseEncoding;
            string str = (baseEncoding == PdfBaseEncoding.MacRoman) ? "MacRomanEncoding" : ((baseEncoding == PdfBaseEncoding.WinAnsi) ? "WinAnsiEncoding" : null);
            if (this.differences.Count == 0)
            {
                return (string.IsNullOrEmpty(str) ? null : new PdfName(str));
            }
            PdfWriterDictionary dictionary = new PdfWriterDictionary(objects);
            if (!string.IsNullOrEmpty(str))
            {
                dictionary.Add("BaseEncoding", new PdfName(str));
            }
            List<object> list = new List<object>();
            int key = -2147483648;
            foreach (KeyValuePair<int, string> pair in this.differences)
            {
                if (pair.Key != ++key)
                {
                    list.Add(pair.Key);
                    key = pair.Key;
                }
                list.Add(new PdfName(pair.Value));
            }
            dictionary.Add("Differences", list);
            return dictionary;
        }

        public PdfBaseEncoding BaseEncoding =>
            this.baseEncoding;

        public IDictionary<int, string> Differences =>
            this.differences;

        internal bool IsEmpty =>
            (this.baseEncoding == PdfBaseEncoding.Standard) && (this.differences.Count == 0);

        protected internal override bool ShouldUseEmbeddedFontEncoding =>
            this.baseEncoding == PdfBaseEncoding.Standard;
    }
}

